/// <reference path="LabelFormControl.ts"/>

namespace NextAdmin.UI {

    export class RichTextEditor extends LabelFormControl {


        public static quillB64JS = 'IWZ1bmN0aW9uKHQsZSl7Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYib2JqZWN0Ij09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sZSk6Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMuUXVpbGw9ZSgpOnQuUXVpbGw9ZSgpfSgidW5kZWZpbmVkIiE9dHlwZW9mIHNlbGY/c2VsZjp0aGlzLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUocil7aWYobltyXSlyZXR1cm4gbltyXS5leHBvcnRzO3ZhciBvPW5bcl09e2k6cixsOiExLGV4cG9ydHM6e319O3JldHVybiB0W3JdLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLGUpLG8ubD0hMCxvLmV4cG9ydHN9dmFyIG49e307cmV0dXJuIGUubT10LGUuYz1uLGUuZD1mdW5jdGlvbih0LG4scil7ZS5vKHQsbil8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LG4se2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLGdldDpyfSl9LGUubj1mdW5jdGlvbih0KXt2YXIgbj10JiZ0Ll9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gdC5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiB0fTtyZXR1cm4gZS5kKG4sImEiLG4pLG59LGUubz1mdW5jdGlvbih0LGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxlKX0sZS5wPSIiLGUoZS5zPTQ1KX0oW2Z1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPW4oMTcpLG89bigxOCksaT1uKDE5KSxsPW4oNDgpLGE9big0OSkscz1uKDUwKSx1PW4oNTEpLGM9big1MiksZj1uKDExKSxoPW4oMjkpLHA9bigzMCksZD1uKDI4KSx5PW4oMSksdj17U2NvcGU6eS5TY29wZSxjcmVhdGU6eS5jcmVhdGUsZmluZDp5LmZpbmQscXVlcnk6eS5xdWVyeSxyZWdpc3Rlcjp5LnJlZ2lzdGVyLENvbnRhaW5lcjpyLmRlZmF1bHQsRm9ybWF0Om8uZGVmYXVsdCxMZWFmOmkuZGVmYXVsdCxFbWJlZDp1LmRlZmF1bHQsU2Nyb2xsOmwuZGVmYXVsdCxCbG9jazpzLmRlZmF1bHQsSW5saW5lOmEuZGVmYXVsdCxUZXh0OmMuZGVmYXVsdCxBdHRyaWJ1dG9yOntBdHRyaWJ1dGU6Zi5kZWZhdWx0LENsYXNzOmguZGVmYXVsdCxTdHlsZTpwLmRlZmF1bHQsU3RvcmU6ZC5kZWZhdWx0fX07ZS5kZWZhdWx0PXZ9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcih0LGUpe3ZhciBuPWkodCk7aWYobnVsbD09bil0aHJvdyBuZXcgcygiVW5hYmxlIHRvIGNyZWF0ZSAiK3QrIiBibG90Iik7dmFyIHI9bjtyZXR1cm4gbmV3IHIodCBpbnN0YW5jZW9mIE5vZGV8fHQubm9kZVR5cGU9PT1Ob2RlLlRFWFRfTk9ERT90OnIuY3JlYXRlKGUpLGUpfWZ1bmN0aW9uIG8odCxuKXtyZXR1cm4gdm9pZCAwPT09biYmKG49ITEpLG51bGw9PXQ/bnVsbDpudWxsIT10W2UuREFUQV9LRVldP3RbZS5EQVRBX0tFWV0uYmxvdDpuP28odC5wYXJlbnROb2RlLG4pOm51bGx9ZnVuY3Rpb24gaSh0LGUpe3ZvaWQgMD09PWUmJihlPXAuQU5ZKTt2YXIgbjtpZigic3RyaW5nIj09dHlwZW9mIHQpbj1oW3RdfHx1W3RdO2Vsc2UgaWYodCBpbnN0YW5jZW9mIFRleHR8fHQubm9kZVR5cGU9PT1Ob2RlLlRFWFRfTk9ERSluPWgudGV4dDtlbHNlIGlmKCJudW1iZXIiPT10eXBlb2YgdCl0JnAuTEVWRUwmcC5CTE9DSz9uPWguYmxvY2s6dCZwLkxFVkVMJnAuSU5MSU5FJiYobj1oLmlubGluZSk7ZWxzZSBpZih0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpe3ZhciByPSh0LmdldEF0dHJpYnV0ZSgiY2xhc3MiKXx8IiIpLnNwbGl0KC9ccysvKTtmb3IodmFyIG8gaW4gcilpZihuPWNbcltvXV0pYnJlYWs7bj1ufHxmW3QudGFnTmFtZV19cmV0dXJuIG51bGw9PW4/bnVsbDplJnAuTEVWRUwmbi5zY29wZSYmZSZwLlRZUEUmbi5zY29wZT9uOm51bGx9ZnVuY3Rpb24gbCgpe2Zvcih2YXIgdD1bXSxlPTA7ZTxhcmd1bWVudHMubGVuZ3RoO2UrKyl0W2VdPWFyZ3VtZW50c1tlXTtpZih0Lmxlbmd0aD4xKXJldHVybiB0Lm1hcChmdW5jdGlvbih0KXtyZXR1cm4gbCh0KX0pO3ZhciBuPXRbMF07aWYoInN0cmluZyIhPXR5cGVvZiBuLmJsb3ROYW1lJiYic3RyaW5nIiE9dHlwZW9mIG4uYXR0ck5hbWUpdGhyb3cgbmV3IHMoIkludmFsaWQgZGVmaW5pdGlvbiIpO2lmKCJhYnN0cmFjdCI9PT1uLmJsb3ROYW1lKXRocm93IG5ldyBzKCJDYW5ub3QgcmVnaXN0ZXIgYWJzdHJhY3QgY2xhc3MiKTtpZihoW24uYmxvdE5hbWV8fG4uYXR0ck5hbWVdPW4sInN0cmluZyI9PXR5cGVvZiBuLmtleU5hbWUpdVtuLmtleU5hbWVdPW47ZWxzZSBpZihudWxsIT1uLmNsYXNzTmFtZSYmKGNbbi5jbGFzc05hbWVdPW4pLG51bGwhPW4udGFnTmFtZSl7QXJyYXkuaXNBcnJheShuLnRhZ05hbWUpP24udGFnTmFtZT1uLnRhZ05hbWUubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LnRvVXBwZXJDYXNlKCl9KTpuLnRhZ05hbWU9bi50YWdOYW1lLnRvVXBwZXJDYXNlKCk7dmFyIHI9QXJyYXkuaXNBcnJheShuLnRhZ05hbWUpP24udGFnTmFtZTpbbi50YWdOYW1lXTtyLmZvckVhY2goZnVuY3Rpb24odCl7bnVsbCE9Zlt0XSYmbnVsbCE9bi5jbGFzc05hbWV8fChmW3RdPW4pfSl9cmV0dXJuIG59dmFyIGE9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fGZ1bmN0aW9uKCl7dmFyIHQ9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKHQsZSl7dC5fX3Byb3RvX189ZX18fGZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuIGluIGUpZS5oYXNPd25Qcm9wZXJ0eShuKSYmKHRbbl09ZVtuXSl9O3JldHVybiBmdW5jdGlvbihlLG4pe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9dChlLG4pLGUucHJvdG90eXBlPW51bGw9PT1uP09iamVjdC5jcmVhdGUobik6KHIucHJvdG90eXBlPW4ucHJvdG90eXBlLG5ldyByKX19KCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBzPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoZSl7dmFyIG49dGhpcztyZXR1cm4gZT0iW1BhcmNobWVudF0gIitlLG49dC5jYWxsKHRoaXMsZSl8fHRoaXMsbi5tZXNzYWdlPWUsbi5uYW1lPW4uY29uc3RydWN0b3IubmFtZSxufXJldHVybiBhKGUsdCksZX0oRXJyb3IpO2UuUGFyY2htZW50RXJyb3I9czt2YXIgdT17fSxjPXt9LGY9e30saD17fTtlLkRBVEFfS0VZPSJfX2Jsb3QiO3ZhciBwOyFmdW5jdGlvbih0KXt0W3QuVFlQRT0zXT0iVFlQRSIsdFt0LkxFVkVMPTEyXT0iTEVWRUwiLHRbdC5BVFRSSUJVVEU9MTNdPSJBVFRSSUJVVEUiLHRbdC5CTE9UPTE0XT0iQkxPVCIsdFt0LklOTElORT03XT0iSU5MSU5FIix0W3QuQkxPQ0s9MTFdPSJCTE9DSyIsdFt0LkJMT0NLX0JMT1Q9MTBdPSJCTE9DS19CTE9UIix0W3QuSU5MSU5FX0JMT1Q9Nl09IklOTElORV9CTE9UIix0W3QuQkxPQ0tfQVRUUklCVVRFPTldPSJCTE9DS19BVFRSSUJVVEUiLHRbdC5JTkxJTkVfQVRUUklCVVRFPTVdPSJJTkxJTkVfQVRUUklCVVRFIix0W3QuQU5ZPTE1XT0iQU5ZIn0ocD1lLlNjb3BlfHwoZS5TY29wZT17fSkpLGUuY3JlYXRlPXIsZS5maW5kPW8sZS5xdWVyeT1pLGUucmVnaXN0ZXI9bH0sZnVuY3Rpb24odCxlKXsidXNlIHN0cmljdCI7dmFyIG49T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxyPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsbz1mdW5jdGlvbih0KXtyZXR1cm4iZnVuY3Rpb24iPT10eXBlb2YgQXJyYXkuaXNBcnJheT9BcnJheS5pc0FycmF5KHQpOiJbb2JqZWN0IEFycmF5XSI9PT1yLmNhbGwodCl9LGk9ZnVuY3Rpb24odCl7aWYoIXR8fCJbb2JqZWN0IE9iamVjdF0iIT09ci5jYWxsKHQpKXJldHVybiExO3ZhciBlPW4uY2FsbCh0LCJjb25zdHJ1Y3RvciIpLG89dC5jb25zdHJ1Y3RvciYmdC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUmJm4uY2FsbCh0LmNvbnN0cnVjdG9yLnByb3RvdHlwZSwiaXNQcm90b3R5cGVPZiIpO2lmKHQuY29uc3RydWN0b3ImJiFlJiYhbylyZXR1cm4hMTt2YXIgaTtmb3IoaSBpbiB0KTtyZXR1cm4gdm9pZCAwPT09aXx8bi5jYWxsKHQsaSl9O3QuZXhwb3J0cz1mdW5jdGlvbiB0KCl7dmFyIGUsbixyLGwsYSxzLHU9YXJndW1lbnRzWzBdLGM9MSxmPWFyZ3VtZW50cy5sZW5ndGgsaD0hMTtmb3IoImJvb2xlYW4iPT10eXBlb2YgdSYmKGg9dSx1PWFyZ3VtZW50c1sxXXx8e30sYz0yKSwobnVsbD09dXx8Im9iamVjdCIhPXR5cGVvZiB1JiYiZnVuY3Rpb24iIT10eXBlb2YgdSkmJih1PXt9KTtjPGY7KytjKWlmKG51bGwhPShlPWFyZ3VtZW50c1tjXSkpZm9yKG4gaW4gZSlyPXVbbl0sbD1lW25dLHUhPT1sJiYoaCYmbCYmKGkobCl8fChhPW8obCkpKT8oYT8oYT0hMSxzPXImJm8ocik/cjpbXSk6cz1yJiZpKHIpP3I6e30sdVtuXT10KGgscyxsKSk6dm9pZCAwIT09bCYmKHVbbl09bCkpO3JldHVybiB1fX0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1mdW5jdGlvbiBvKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9ZnVuY3Rpb24gaSh0LGUpe2lmKCF0KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7cmV0dXJuIWV8fCJvYmplY3QiIT10eXBlb2YgZSYmImZ1bmN0aW9uIiE9dHlwZW9mIGU/dDplfWZ1bmN0aW9uIGwodCxlKXtpZigiZnVuY3Rpb24iIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAiK3R5cGVvZiBlKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxlJiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZih0LGUpOnQuX19wcm90b19fPWUpfWZ1bmN0aW9uIGEodCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9O3JldHVybiBudWxsPT10P2U6KCJmdW5jdGlvbiI9PXR5cGVvZiB0LmZvcm1hdHMmJihlPSgwLGYuZGVmYXVsdCkoZSx0LmZvcm1hdHMoKSkpLG51bGw9PXQucGFyZW50fHwic2Nyb2xsIj09dC5wYXJlbnQuYmxvdE5hbWV8fHQucGFyZW50LnN0YXRpY3Muc2NvcGUhPT10LnN0YXRpY3Muc2NvcGU/ZTphKHQucGFyZW50LGUpKX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PWUuQmxvY2tFbWJlZD1lLmJ1YmJsZUZvcm1hdHM9dm9pZCAwO3ZhciBzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsci5rZXkscil9fXJldHVybiBmdW5jdGlvbihlLG4scil7cmV0dXJuIG4mJnQoZS5wcm90b3R5cGUsbiksciYmdChlLHIpLGV9fSgpLHU9ZnVuY3Rpb24gdChlLG4scil7bnVsbD09PWUmJihlPUZ1bmN0aW9uLnByb3RvdHlwZSk7dmFyIG89T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLG4pO2lmKHZvaWQgMD09PW8pe3ZhciBpPU9iamVjdC5nZXRQcm90b3R5cGVPZihlKTtyZXR1cm4gbnVsbD09PWk/dm9pZCAwOnQoaSxuLHIpfWlmKCJ2YWx1ZSJpbiBvKXJldHVybiBvLnZhbHVlO3ZhciBsPW8uZ2V0O2lmKHZvaWQgMCE9PWwpcmV0dXJuIGwuY2FsbChyKX0sYz1uKDIpLGY9cihjKSxoPW4oNCkscD1yKGgpLGQ9bigwKSx5PXIoZCksdj1uKDE0KSxiPXIodiksZz1uKDUpLG09cihnKSxfPW4oOCksTz1yKF8pLHc9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3JldHVybiBvKHRoaXMsZSksaSh0aGlzLChlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpKS5hcHBseSh0aGlzLGFyZ3VtZW50cykpfXJldHVybiBsKGUsdCkscyhlLFt7a2V5OiJhdHRhY2giLHZhbHVlOmZ1bmN0aW9uKCl7dShlLnByb3RvdHlwZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlLnByb3RvdHlwZSksImF0dGFjaCIsdGhpcykuY2FsbCh0aGlzKSx0aGlzLmF0dHJpYnV0ZXM9bmV3IHkuZGVmYXVsdC5BdHRyaWJ1dG9yLlN0b3JlKHRoaXMuZG9tTm9kZSl9fSx7a2V5OiJkZWx0YSIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHAuZGVmYXVsdCkuaW5zZXJ0KHRoaXMudmFsdWUoKSwoMCxmLmRlZmF1bHQpKHRoaXMuZm9ybWF0cygpLHRoaXMuYXR0cmlidXRlcy52YWx1ZXMoKSkpfX0se2tleToiZm9ybWF0Iix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBuPXkuZGVmYXVsdC5xdWVyeSh0LHkuZGVmYXVsdC5TY29wZS5CTE9DS19BVFRSSUJVVEUpO251bGwhPW4mJnRoaXMuYXR0cmlidXRlcy5hdHRyaWJ1dGUobixlKX19LHtrZXk6ImZvcm1hdEF0Iix2YWx1ZTpmdW5jdGlvbih0LGUsbixyKXt0aGlzLmZvcm1hdChuLHIpfX0se2tleToiaW5zZXJ0QXQiLHZhbHVlOmZ1bmN0aW9uKHQsbixyKXtpZigic3RyaW5nIj09dHlwZW9mIG4mJm4uZW5kc1dpdGgoIlxuIikpe3ZhciBvPXkuZGVmYXVsdC5jcmVhdGUoeC5ibG90TmFtZSk7dGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKG8sMD09PXQ/dGhpczp0aGlzLm5leHQpLG8uaW5zZXJ0QXQoMCxuLnNsaWNlKDAsLTEpKX1lbHNlIHUoZS5wcm90b3R5cGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZS5wcm90b3R5cGUpLCJpbnNlcnRBdCIsdGhpcykuY2FsbCh0aGlzLHQsbixyKX19XSksZX0oeS5kZWZhdWx0LkVtYmVkKTt3LnNjb3BlPXkuZGVmYXVsdC5TY29wZS5CTE9DS19CTE9UO3ZhciB4PWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUodCl7byh0aGlzLGUpO3ZhciBuPWkodGhpcywoZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlKSkuY2FsbCh0aGlzLHQpKTtyZXR1cm4gbi5jYWNoZT17fSxufXJldHVybiBsKGUsdCkscyhlLFt7a2V5OiJkZWx0YSIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09dGhpcy5jYWNoZS5kZWx0YSYmKHRoaXMuY2FjaGUuZGVsdGE9dGhpcy5kZXNjZW5kYW50cyh5LmRlZmF1bHQuTGVhZikucmVkdWNlKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIDA9PT1lLmxlbmd0aCgpP3Q6dC5pbnNlcnQoZS52YWx1ZSgpLGEoZSkpfSxuZXcgcC5kZWZhdWx0KS5pbnNlcnQoIlxuIixhKHRoaXMpKSksdGhpcy5jYWNoZS5kZWx0YX19LHtrZXk6ImRlbGV0ZUF0Iix2YWx1ZTpmdW5jdGlvbih0LG4pe3UoZS5wcm90b3R5cGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZS5wcm90b3R5cGUpLCJkZWxldGVBdCIsdGhpcykuY2FsbCh0aGlzLHQsbiksdGhpcy5jYWNoZT17fX19LHtrZXk6ImZvcm1hdEF0Iix2YWx1ZTpmdW5jdGlvbih0LG4scixvKXtuPD0wfHwoeS5kZWZhdWx0LnF1ZXJ5KHIseS5kZWZhdWx0LlNjb3BlLkJMT0NLKT90K249PT10aGlzLmxlbmd0aCgpJiZ0aGlzLmZvcm1hdChyLG8pOnUoZS5wcm90b3R5cGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZS5wcm90b3R5cGUpLCJmb3JtYXRBdCIsdGhpcykuY2FsbCh0aGlzLHQsTWF0aC5taW4obix0aGlzLmxlbmd0aCgpLXQtMSkscixvKSx0aGlzLmNhY2hlPXt9KX19LHtrZXk6Imluc2VydEF0Iix2YWx1ZTpmdW5jdGlvbih0LG4scil7aWYobnVsbCE9cilyZXR1cm4gdShlLnByb3RvdHlwZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlLnByb3RvdHlwZSksImluc2VydEF0Iix0aGlzKS5jYWxsKHRoaXMsdCxuLHIpO2lmKDAhPT1uLmxlbmd0aCl7dmFyIG89bi5zcGxpdCgiXG4iKSxpPW8uc2hpZnQoKTtpLmxlbmd0aD4wJiYodDx0aGlzLmxlbmd0aCgpLTF8fG51bGw9PXRoaXMuY2hpbGRyZW4udGFpbD91KGUucHJvdG90eXBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUucHJvdG90eXBlKSwiaW5zZXJ0QXQiLHRoaXMpLmNhbGwodGhpcyxNYXRoLm1pbih0LHRoaXMubGVuZ3RoKCktMSksaSk6dGhpcy5jaGlsZHJlbi50YWlsLmluc2VydEF0KHRoaXMuY2hpbGRyZW4udGFpbC5sZW5ndGgoKSxpKSx0aGlzLmNhY2hlPXt9KTt2YXIgbD10aGlzO28ucmVkdWNlKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGw9bC5zcGxpdCh0LCEwKSxsLmluc2VydEF0KDAsZSksZS5sZW5ndGh9LHQraS5sZW5ndGgpfX19LHtrZXk6Imluc2VydEJlZm9yZSIsdmFsdWU6ZnVuY3Rpb24odCxuKXt2YXIgcj10aGlzLmNoaWxkcmVuLmhlYWQ7dShlLnByb3RvdHlwZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlLnByb3RvdHlwZSksImluc2VydEJlZm9yZSIsdGhpcykuY2FsbCh0aGlzLHQsbiksciBpbnN0YW5jZW9mIGIuZGVmYXVsdCYmci5yZW1vdmUoKSx0aGlzLmNhY2hlPXt9fX0se2tleToibGVuZ3RoIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBudWxsPT10aGlzLmNhY2hlLmxlbmd0aCYmKHRoaXMuY2FjaGUubGVuZ3RoPXUoZS5wcm90b3R5cGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZS5wcm90b3R5cGUpLCJsZW5ndGgiLHRoaXMpLmNhbGwodGhpcykrMSksdGhpcy5jYWNoZS5sZW5ndGh9fSx7a2V5OiJtb3ZlQ2hpbGRyZW4iLHZhbHVlOmZ1bmN0aW9uKHQsbil7dShlLnByb3RvdHlwZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlLnByb3RvdHlwZSksIm1vdmVDaGlsZHJlbiIsdGhpcykuY2FsbCh0aGlzLHQsbiksdGhpcy5jYWNoZT17fX19LHtrZXk6Im9wdGltaXplIix2YWx1ZTpmdW5jdGlvbih0KXt1KGUucHJvdG90eXBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUucHJvdG90eXBlKSwib3B0aW1pemUiLHRoaXMpLmNhbGwodGhpcyx0KSx0aGlzLmNhY2hlPXt9fX0se2tleToicGF0aCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHUoZS5wcm90b3R5cGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZS5wcm90b3R5cGUpLCJwYXRoIix0aGlzKS5jYWxsKHRoaXMsdCwhMCl9fSx7a2V5OiJyZW1vdmVDaGlsZCIsdmFsdWU6ZnVuY3Rpb24odCl7dShlLnByb3RvdHlwZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlLnByb3RvdHlwZSksInJlbW92ZUNoaWxkIix0aGlzKS5jYWxsKHRoaXMsdCksdGhpcy5jYWNoZT17fX19LHtrZXk6InNwbGl0Iix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdO2lmKG4mJigwPT09dHx8dD49dGhpcy5sZW5ndGgoKS0xKSl7dmFyIHI9dGhpcy5jbG9uZSgpO3JldHVybiAwPT09dD8odGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKHIsdGhpcyksdGhpcyk6KHRoaXMucGFyZW50Lmluc2VydEJlZm9yZShyLHRoaXMubmV4dCkscil9dmFyIG89dShlLnByb3RvdHlwZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlLnByb3RvdHlwZSksInNwbGl0Iix0aGlzKS5jYWxsKHRoaXMsdCxuKTtyZXR1cm4gdGhpcy5jYWNoZT17fSxvfX1dKSxlfSh5LmRlZmF1bHQuQmxvY2spO3guYmxvdE5hbWU9ImJsb2NrIix4LnRhZ05hbWU9IlAiLHguZGVmYXVsdENoaWxkPSJicmVhayIseC5hbGxvd2VkQ2hpbGRyZW49W20uZGVmYXVsdCx5LmRlZmF1bHQuRW1iZWQsTy5kZWZhdWx0XSxlLmJ1YmJsZUZvcm1hdHM9YSxlLkJsb2NrRW1iZWQ9dyxlLmRlZmF1bHQ9eH0sZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oNTQpLG89bigxMiksaT1uKDIpLGw9bigyMCksYT1TdHJpbmcuZnJvbUNoYXJDb2RlKDApLHM9ZnVuY3Rpb24odCl7QXJyYXkuaXNBcnJheSh0KT90aGlzLm9wcz10Om51bGwhPXQmJkFycmF5LmlzQXJyYXkodC5vcHMpP3RoaXMub3BzPXQub3BzOnRoaXMub3BzPVtdfTtzLnByb3RvdHlwZS5pbnNlcnQ9ZnVuY3Rpb24odCxlKXt2YXIgbj17fTtyZXR1cm4gMD09PXQubGVuZ3RoP3RoaXM6KG4uaW5zZXJ0PXQsbnVsbCE9ZSYmIm9iamVjdCI9PXR5cGVvZiBlJiZPYmplY3Qua2V5cyhlKS5sZW5ndGg+MCYmKG4uYXR0cmlidXRlcz1lKSx0aGlzLnB1c2gobikpfSxzLnByb3RvdHlwZS5kZWxldGU9ZnVuY3Rpb24odCl7cmV0dXJuIHQ8PTA/dGhpczp0aGlzLnB1c2goe2RlbGV0ZTp0fSl9LHMucHJvdG90eXBlLnJldGFpbj1mdW5jdGlvbih0LGUpe2lmKHQ8PTApcmV0dXJuIHRoaXM7dmFyIG49e3JldGFpbjp0fTtyZXR1cm4gbnVsbCE9ZSYmIm9iamVjdCI9PXR5cGVvZiBlJiZPYmplY3Qua2V5cyhlKS5sZW5ndGg+MCYmKG4uYXR0cmlidXRlcz1lKSx0aGlzLnB1c2gobil9LHMucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5vcHMubGVuZ3RoLG49dGhpcy5vcHNbZS0xXTtpZih0PWkoITAse30sdCksIm9iamVjdCI9PXR5cGVvZiBuKXtpZigibnVtYmVyIj09dHlwZW9mIHQuZGVsZXRlJiYibnVtYmVyIj09dHlwZW9mIG4uZGVsZXRlKXJldHVybiB0aGlzLm9wc1tlLTFdPXtkZWxldGU6bi5kZWxldGUrdC5kZWxldGV9LHRoaXM7aWYoIm51bWJlciI9PXR5cGVvZiBuLmRlbGV0ZSYmbnVsbCE9dC5pbnNlcnQmJihlLT0xLCJvYmplY3QiIT10eXBlb2Yobj10aGlzLm9wc1tlLTFdKSkpcmV0dXJuIHRoaXMub3BzLnVuc2hpZnQodCksdGhpcztpZihvKHQuYXR0cmlidXRlcyxuLmF0dHJpYnV0ZXMpKXtpZigic3RyaW5nIj09dHlwZW9mIHQuaW5zZXJ0JiYic3RyaW5nIj09dHlwZW9mIG4uaW5zZXJ0KXJldHVybiB0aGlzLm9wc1tlLTFdPXtpbnNlcnQ6bi5pbnNlcnQrdC5pbnNlcnR9LCJvYmplY3QiPT10eXBlb2YgdC5hdHRyaWJ1dGVzJiYodGhpcy5vcHNbZS0xXS5hdHRyaWJ1dGVzPXQuYXR0cmlidXRlcyksdGhpcztpZigibnVtYmVyIj09dHlwZW9mIHQucmV0YWluJiYibnVtYmVyIj09dHlwZW9mIG4ucmV0YWluKXJldHVybiB0aGlzLm9wc1tlLTFdPXtyZXRhaW46bi5yZXRhaW4rdC5yZXRhaW59LCJvYmplY3QiPT10eXBlb2YgdC5hdHRyaWJ1dGVzJiYodGhpcy5vcHNbZS0xXS5hdHRyaWJ1dGVzPXQuYXR0cmlidXRlcyksdGhpc319cmV0dXJuIGU9PT10aGlzLm9wcy5sZW5ndGg/dGhpcy5vcHMucHVzaCh0KTp0aGlzLm9wcy5zcGxpY2UoZSwwLHQpLHRoaXN9LHMucHJvdG90eXBlLmNob3A9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm9wc1t0aGlzLm9wcy5sZW5ndGgtMV07cmV0dXJuIHQmJnQucmV0YWluJiYhdC5hdHRyaWJ1dGVzJiZ0aGlzLm9wcy5wb3AoKSx0aGlzfSxzLnByb3RvdHlwZS5maWx0ZXI9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMub3BzLmZpbHRlcih0KX0scy5wcm90b3R5cGUuZm9yRWFjaD1mdW5jdGlvbih0KXt0aGlzLm9wcy5mb3JFYWNoKHQpfSxzLnByb3RvdHlwZS5tYXA9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMub3BzLm1hcCh0KX0scy5wcm90b3R5cGUucGFydGl0aW9uPWZ1bmN0aW9uKHQpe3ZhciBlPVtdLG49W107cmV0dXJuIHRoaXMuZm9yRWFjaChmdW5jdGlvbihyKXsodChyKT9lOm4pLnB1c2gocil9KSxbZSxuXX0scy5wcm90b3R5cGUucmVkdWNlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMub3BzLnJlZHVjZSh0LGUpfSxzLnByb3RvdHlwZS5jaGFuZ2VMZW5ndGg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZWR1Y2UoZnVuY3Rpb24odCxlKXtyZXR1cm4gZS5pbnNlcnQ/dCtsLmxlbmd0aChlKTplLmRlbGV0ZT90LWUuZGVsZXRlOnR9LDApfSxzLnByb3RvdHlwZS5sZW5ndGg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZWR1Y2UoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCtsLmxlbmd0aChlKX0sMCl9LHMucHJvdG90eXBlLnNsaWNlPWZ1bmN0aW9uKHQsZSl7dD10fHwwLCJudW1iZXIiIT10eXBlb2YgZSYmKGU9MS8wKTtmb3IodmFyIG49W10scj1sLml0ZXJhdG9yKHRoaXMub3BzKSxvPTA7bzxlJiZyLmhhc05leHQoKTspe3ZhciBpO288dD9pPXIubmV4dCh0LW8pOihpPXIubmV4dChlLW8pLG4ucHVzaChpKSksbys9bC5sZW5ndGgoaSl9cmV0dXJuIG5ldyBzKG4pfSxzLnByb3RvdHlwZS5jb21wb3NlPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1sLml0ZXJhdG9yKHRoaXMub3BzKSxuPWwuaXRlcmF0b3IodC5vcHMpLHI9bmV3IHM7ZS5oYXNOZXh0KCl8fG4uaGFzTmV4dCgpOylpZigiaW5zZXJ0Ij09PW4ucGVla1R5cGUoKSlyLnB1c2gobi5uZXh0KCkpO2Vsc2UgaWYoImRlbGV0ZSI9PT1lLnBlZWtUeXBlKCkpci5wdXNoKGUubmV4dCgpKTtlbHNle3ZhciBvPU1hdGgubWluKGUucGVla0xlbmd0aCgpLG4ucGVla0xlbmd0aCgpKSxpPWUubmV4dChvKSxhPW4ubmV4dChvKTtpZigibnVtYmVyIj09dHlwZW9mIGEucmV0YWluKXt2YXIgdT17fTsibnVtYmVyIj09dHlwZW9mIGkucmV0YWluP3UucmV0YWluPW86dS5pbnNlcnQ9aS5pbnNlcnQ7dmFyIGM9bC5hdHRyaWJ1dGVzLmNvbXBvc2UoaS5hdHRyaWJ1dGVzLGEuYXR0cmlidXRlcywibnVtYmVyIj09dHlwZW9mIGkucmV0YWluKTtjJiYodS5hdHRyaWJ1dGVzPWMpLHIucHVzaCh1KX1lbHNlIm51bWJlciI9PXR5cGVvZiBhLmRlbGV0ZSYmIm51bWJlciI9PXR5cGVvZiBpLnJldGFpbiYmci5wdXNoKGEpfXJldHVybiByLmNob3AoKX0scy5wcm90b3R5cGUuY29uY2F0PWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBzKHRoaXMub3BzLnNsaWNlKCkpO3JldHVybiB0Lm9wcy5sZW5ndGg+MCYmKGUucHVzaCh0Lm9wc1swXSksZS5vcHM9ZS5vcHMuY29uY2F0KHQub3BzLnNsaWNlKDEpKSksZX0scy5wcm90b3R5cGUuZGlmZj1mdW5jdGlvbih0LGUpe2lmKHRoaXMub3BzPT09dC5vcHMpcmV0dXJuIG5ldyBzO3ZhciBuPVt0aGlzLHRdLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS5tYXAoZnVuY3Rpb24obil7aWYobnVsbCE9bi5pbnNlcnQpcmV0dXJuInN0cmluZyI9PXR5cGVvZiBuLmluc2VydD9uLmluc2VydDphO3ZhciByPWU9PT10PyJvbiI6IndpdGgiO3Rocm93IG5ldyBFcnJvcigiZGlmZigpIGNhbGxlZCAiK3IrIiBub24tZG9jdW1lbnQiKX0pLmpvaW4oIiIpfSksaT1uZXcgcyx1PXIoblswXSxuWzFdLGUpLGM9bC5pdGVyYXRvcih0aGlzLm9wcyksZj1sLml0ZXJhdG9yKHQub3BzKTtyZXR1cm4gdS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10WzFdLmxlbmd0aDtlPjA7KXt2YXIgbj0wO3N3aXRjaCh0WzBdKXtjYXNlIHIuSU5TRVJUOm49TWF0aC5taW4oZi5wZWVrTGVuZ3RoKCksZSksaS5wdXNoKGYubmV4dChuKSk7YnJlYWs7Y2FzZSByLkRFTEVURTpuPU1hdGgubWluKGUsYy5wZWVrTGVuZ3RoKCkpLGMubmV4dChuKSxpLmRlbGV0ZShuKTticmVhaztjYXNlIHIuRVFVQUw6bj1NYXRoLm1pbihjLnBlZWtMZW5ndGgoKSxmLnBlZWtMZW5ndGgoKSxlKTt2YXIgYT1jLm5leHQobikscz1mLm5leHQobik7byhhLmluc2VydCxzLmluc2VydCk/aS5yZXRhaW4obixsLmF0dHJpYnV0ZXMuZGlmZihhLmF0dHJpYnV0ZXMscy5hdHRyaWJ1dGVzKSk6aS5wdXNoKHMpLmRlbGV0ZShuKX1lLT1ufX0pLGkuY2hvcCgpfSxzLnByb3RvdHlwZS5lYWNoTGluZT1mdW5jdGlvbih0LGUpe2U9ZXx8IlxuIjtmb3IodmFyIG49bC5pdGVyYXRvcih0aGlzLm9wcykscj1uZXcgcyxvPTA7bi5oYXNOZXh0KCk7KXtpZigiaW5zZXJ0IiE9PW4ucGVla1R5cGUoKSlyZXR1cm47dmFyIGk9bi5wZWVrKCksYT1sLmxlbmd0aChpKS1uLnBlZWtMZW5ndGgoKSx1PSJzdHJpbmciPT10eXBlb2YgaS5pbnNlcnQ/aS5pbnNlcnQuaW5kZXhPZihlLGEpLWE6LTE7aWYodTwwKXIucHVzaChuLm5leHQoKSk7ZWxzZSBpZih1PjApci5wdXNoKG4ubmV4dCh1KSk7ZWxzZXtpZighMT09PXQocixuLm5leHQoMSkuYXR0cmlidXRlc3x8e30sbykpcmV0dXJuO28rPTEscj1uZXcgc319ci5sZW5ndGgoKT4wJiZ0KHIse30sbyl9LHMucHJvdG90eXBlLnRyYW5zZm9ybT1mdW5jdGlvbih0LGUpe2lmKGU9ISFlLCJudW1iZXIiPT10eXBlb2YgdClyZXR1cm4gdGhpcy50cmFuc2Zvcm1Qb3NpdGlvbih0LGUpO2Zvcih2YXIgbj1sLml0ZXJhdG9yKHRoaXMub3BzKSxyPWwuaXRlcmF0b3IodC5vcHMpLG89bmV3IHM7bi5oYXNOZXh0KCl8fHIuaGFzTmV4dCgpOylpZigiaW5zZXJ0IiE9PW4ucGVla1R5cGUoKXx8IWUmJiJpbnNlcnQiPT09ci5wZWVrVHlwZSgpKWlmKCJpbnNlcnQiPT09ci5wZWVrVHlwZSgpKW8ucHVzaChyLm5leHQoKSk7ZWxzZXt2YXIgaT1NYXRoLm1pbihuLnBlZWtMZW5ndGgoKSxyLnBlZWtMZW5ndGgoKSksYT1uLm5leHQoaSksdT1yLm5leHQoaSk7aWYoYS5kZWxldGUpY29udGludWU7dS5kZWxldGU/by5wdXNoKHUpOm8ucmV0YWluKGksbC5hdHRyaWJ1dGVzLnRyYW5zZm9ybShhLmF0dHJpYnV0ZXMsdS5hdHRyaWJ1dGVzLGUpKX1lbHNlIG8ucmV0YWluKGwubGVuZ3RoKG4ubmV4dCgpKSk7cmV0dXJuIG8uY2hvcCgpfSxzLnByb3RvdHlwZS50cmFuc2Zvcm1Qb3NpdGlvbj1mdW5jdGlvbih0LGUpe2U9ISFlO2Zvcih2YXIgbj1sLml0ZXJhdG9yKHRoaXMub3BzKSxyPTA7bi5oYXNOZXh0KCkmJnI8PXQ7KXt2YXIgbz1uLnBlZWtMZW5ndGgoKSxpPW4ucGVla1R5cGUoKTtuLm5leHQoKSwiZGVsZXRlIiE9PWk/KCJpbnNlcnQiPT09aSYmKHI8dHx8IWUpJiYodCs9bykscis9byk6dC09TWF0aC5taW4obyx0LXIpfXJldHVybiB0fSx0LmV4cG9ydHM9c30sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1mdW5jdGlvbiBvKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9ZnVuY3Rpb24gaSh0LGUpe2lmKCF0KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7cmV0dXJuIWV8fCJvYmplY3QiIT10eXBlb2YgZSYmImZ1bmN0aW9uIiE9dHlwZW9mIGU/dDplfWZ1bmN0aW9uIGwodCxlKXtpZigiZnVuY3Rpb24iIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAiK3R5cGVvZiBlKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxlJiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZih0LGUpOnQuX19wcm90b19fPWUpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgYT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LHIua2V5LHIpfX1yZXR1cm4gZnVuY3Rpb24oZSxuLHIpe3JldHVybiBuJiZ0KGUucHJvdG90eXBlLG4pLHImJnQoZSxyKSxlfX0oKSxzPWZ1bmN0aW9uIHQoZSxuLHIpe251bGw9PT1lJiYoZT1GdW5jdGlvbi5wcm90b3R5cGUpO3ZhciBvPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxuKTtpZih2b2lkIDA9PT1vKXt2YXIgaT1PYmplY3QuZ2V0UHJvdG90eXBlT2YoZSk7cmV0dXJuIG51bGw9PT1pP3ZvaWQgMDp0KGksbixyKX1pZigidmFsdWUiaW4gbylyZXR1cm4gby52YWx1ZTt2YXIgbD1vLmdldDtpZih2b2lkIDAhPT1sKXJldHVybiBsLmNhbGwocil9LHU9big4KSxjPXIodSksZj1uKDApLGg9cihmKSxwPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gbyh0aGlzLGUpLGkodGhpcywoZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlKSkuYXBwbHkodGhpcyxhcmd1bWVudHMpKX1yZXR1cm4gbChlLHQpLGEoZSxbe2tleToiZm9ybWF0QXQiLHZhbHVlOmZ1bmN0aW9uKHQsbixyLG8pe2lmKGUuY29tcGFyZSh0aGlzLnN0YXRpY3MuYmxvdE5hbWUscik8MCYmaC5kZWZhdWx0LnF1ZXJ5KHIsaC5kZWZhdWx0LlNjb3BlLkJMT1QpKXt2YXIgaT10aGlzLmlzb2xhdGUodCxuKTtvJiZpLndyYXAocixvKX1lbHNlIHMoZS5wcm90b3R5cGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZS5wcm90b3R5cGUpLCJmb3JtYXRBdCIsdGhpcykuY2FsbCh0aGlzLHQsbixyLG8pfX0se2tleToib3B0aW1pemUiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKHMoZS5wcm90b3R5cGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZS5wcm90b3R5cGUpLCJvcHRpbWl6ZSIsdGhpcykuY2FsbCh0aGlzLHQpLHRoaXMucGFyZW50IGluc3RhbmNlb2YgZSYmZS5jb21wYXJlKHRoaXMuc3RhdGljcy5ibG90TmFtZSx0aGlzLnBhcmVudC5zdGF0aWNzLmJsb3ROYW1lKT4wKXt2YXIgbj10aGlzLnBhcmVudC5pc29sYXRlKHRoaXMub2Zmc2V0KCksdGhpcy5sZW5ndGgoKSk7dGhpcy5tb3ZlQ2hpbGRyZW4obiksbi53cmFwKHRoaXMpfX19XSxbe2tleToiY29tcGFyZSIsdmFsdWU6ZnVuY3Rpb24odCxuKXt2YXIgcj1lLm9yZGVyLmluZGV4T2YodCksbz1lLm9yZGVyLmluZGV4T2Yobik7cmV0dXJuIHI+PTB8fG8+PTA/ci1vOnQ9PT1uPzA6dDxuPy0xOjF9fV0pLGV9KGguZGVmYXVsdC5JbmxpbmUpO3AuYWxsb3dlZENoaWxkcmVuPVtwLGguZGVmYXVsdC5FbWJlZCxjLmRlZmF1bHRdLHAub3JkZXI9WyJjdXJzb3IiLCJpbmxpbmUiLCJ1bmRlcmxpbmUiLCJzdHJpa2UiLCJpdGFsaWMiLCJib2xkIiwic2NyaXB0IiwibGluayIsImNvZGUiXSxlLmRlZmF1bHQ9cH0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1mdW5jdGlvbiBvKHQsZSxuKXtyZXR1cm4gZSBpbiB0P09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUse3ZhbHVlOm4sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KTp0W2VdPW4sdH1mdW5jdGlvbiBpKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9ZnVuY3Rpb24gbCh0LGUpe2lmKGU9KDAsTi5kZWZhdWx0KSghMCx7Y29udGFpbmVyOnQsbW9kdWxlczp7Y2xpcGJvYXJkOiEwLGtleWJvYXJkOiEwLGhpc3Rvcnk6ITB9fSxlKSxlLnRoZW1lJiZlLnRoZW1lIT09Uy5ERUZBVUxUUy50aGVtZSl7aWYoZS50aGVtZT1TLmltcG9ydCgidGhlbWVzLyIrZS50aGVtZSksbnVsbD09ZS50aGVtZSl0aHJvdyBuZXcgRXJyb3IoIkludmFsaWQgdGhlbWUgIitlLnRoZW1lKyIuIERpZCB5b3UgcmVnaXN0ZXIgaXQ/Iil9ZWxzZSBlLnRoZW1lPVQuZGVmYXVsdDt2YXIgbj0oMCxOLmRlZmF1bHQpKCEwLHt9LGUudGhlbWUuREVGQVVMVFMpO1tuLGVdLmZvckVhY2goZnVuY3Rpb24odCl7dC5tb2R1bGVzPXQubW9kdWxlc3x8e30sT2JqZWN0LmtleXModC5tb2R1bGVzKS5mb3JFYWNoKGZ1bmN0aW9uKGUpeyEwPT09dC5tb2R1bGVzW2VdJiYodC5tb2R1bGVzW2VdPXt9KX0pfSk7dmFyIHI9T2JqZWN0LmtleXMobi5tb2R1bGVzKS5jb25jYXQoT2JqZWN0LmtleXMoZS5tb2R1bGVzKSksbz1yLnJlZHVjZShmdW5jdGlvbih0LGUpe3ZhciBuPVMuaW1wb3J0KCJtb2R1bGVzLyIrZSk7cmV0dXJuIG51bGw9PW4/UC5lcnJvcigiQ2Fubm90IGxvYWQgIitlKyIgbW9kdWxlLiBBcmUgeW91IHN1cmUgeW91IHJlZ2lzdGVyZWQgaXQ/Iik6dFtlXT1uLkRFRkFVTFRTfHx7fSx0fSx7fSk7cmV0dXJuIG51bGwhPWUubW9kdWxlcyYmZS5tb2R1bGVzLnRvb2xiYXImJmUubW9kdWxlcy50b29sYmFyLmNvbnN0cnVjdG9yIT09T2JqZWN0JiYoZS5tb2R1bGVzLnRvb2xiYXI9e2NvbnRhaW5lcjplLm1vZHVsZXMudG9vbGJhcn0pLGU9KDAsTi5kZWZhdWx0KSghMCx7fSxTLkRFRkFVTFRTLHttb2R1bGVzOm99LG4sZSksWyJib3VuZHMiLCJjb250YWluZXIiLCJzY3JvbGxpbmdDb250YWluZXIiXS5mb3JFYWNoKGZ1bmN0aW9uKHQpeyJzdHJpbmciPT10eXBlb2YgZVt0XSYmKGVbdF09ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlW3RdKSl9KSxlLm1vZHVsZXM9T2JqZWN0LmtleXMoZS5tb2R1bGVzKS5yZWR1Y2UoZnVuY3Rpb24odCxuKXtyZXR1cm4gZS5tb2R1bGVzW25dJiYodFtuXT1lLm1vZHVsZXNbbl0pLHR9LHt9KSxlfWZ1bmN0aW9uIGEodCxlLG4scil7aWYodGhpcy5vcHRpb25zLnN0cmljdCYmIXRoaXMuaXNFbmFibGVkKCkmJmU9PT1nLmRlZmF1bHQuc291cmNlcy5VU0VSKXJldHVybiBuZXcgZC5kZWZhdWx0O3ZhciBvPW51bGw9PW4/bnVsbDp0aGlzLmdldFNlbGVjdGlvbigpLGk9dGhpcy5lZGl0b3IuZGVsdGEsbD10KCk7aWYobnVsbCE9byYmKCEwPT09biYmKG49by5pbmRleCksbnVsbD09cj9vPXUobyxsLGUpOjAhPT1yJiYobz11KG8sbixyLGUpKSx0aGlzLnNldFNlbGVjdGlvbihvLGcuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCkpLGwubGVuZ3RoKCk+MCl7dmFyIGEscz1bZy5kZWZhdWx0LmV2ZW50cy5URVhUX0NIQU5HRSxsLGksZV07aWYoKGE9dGhpcy5lbWl0dGVyKS5lbWl0LmFwcGx5KGEsW2cuZGVmYXVsdC5ldmVudHMuRURJVE9SX0NIQU5HRV0uY29uY2F0KHMpKSxlIT09Zy5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKXt2YXIgYzsoYz10aGlzLmVtaXR0ZXIpLmVtaXQuYXBwbHkoYyxzKX19cmV0dXJuIGx9ZnVuY3Rpb24gcyh0LGUsbixyLG8pe3ZhciBpPXt9O3JldHVybiJudW1iZXIiPT10eXBlb2YgdC5pbmRleCYmIm51bWJlciI9PXR5cGVvZiB0Lmxlbmd0aD8ibnVtYmVyIiE9dHlwZW9mIGU/KG89cixyPW4sbj1lLGU9dC5sZW5ndGgsdD10LmluZGV4KTooZT10Lmxlbmd0aCx0PXQuaW5kZXgpOiJudW1iZXIiIT10eXBlb2YgZSYmKG89cixyPW4sbj1lLGU9MCksIm9iamVjdCI9PT0odm9pZCAwPT09bj8idW5kZWZpbmVkIjpjKG4pKT8oaT1uLG89cik6InN0cmluZyI9PXR5cGVvZiBuJiYobnVsbCE9cj9pW25dPXI6bz1uKSxvPW98fGcuZGVmYXVsdC5zb3VyY2VzLkFQSSxbdCxlLGksb119ZnVuY3Rpb24gdSh0LGUsbixyKXtpZihudWxsPT10KXJldHVybiBudWxsO3ZhciBvPXZvaWQgMCxpPXZvaWQgMDtpZihlIGluc3RhbmNlb2YgZC5kZWZhdWx0KXt2YXIgbD1bdC5pbmRleCx0LmluZGV4K3QubGVuZ3RoXS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIGUudHJhbnNmb3JtUG9zaXRpb24odCxyIT09Zy5kZWZhdWx0LnNvdXJjZXMuVVNFUil9KSxhPWYobCwyKTtvPWFbMF0saT1hWzFdfWVsc2V7dmFyIHM9W3QuaW5kZXgsdC5pbmRleCt0Lmxlbmd0aF0ubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0PGV8fHQ9PT1lJiZyPT09Zy5kZWZhdWx0LnNvdXJjZXMuVVNFUj90Om4+PTA/dCtuOk1hdGgubWF4KGUsdCtuKX0pLHU9ZihzLDIpO289dVswXSxpPXVbMV19cmV0dXJuIG5ldyB4LlJhbmdlKG8saS1vKX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PWUub3ZlcmxvYWQ9ZS5leHBhbmRDb25maWc9dm9pZCAwO3ZhciBjPSJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJiJzeW1ib2wiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJiJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlPyJzeW1ib2wiOnR5cGVvZiB0fSxmPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe3ZhciBuPVtdLHI9ITAsbz0hMSxpPXZvaWQgMDt0cnl7Zm9yKHZhciBsLGE9dFtTeW1ib2wuaXRlcmF0b3JdKCk7IShyPShsPWEubmV4dCgpKS5kb25lKSYmKG4ucHVzaChsLnZhbHVlKSwhZXx8bi5sZW5ndGghPT1lKTtyPSEwKTt9Y2F0Y2godCl7bz0hMCxpPXR9ZmluYWxseXt0cnl7IXImJmEucmV0dXJuJiZhLnJldHVybigpfWZpbmFsbHl7aWYobyl0aHJvdyBpfX1yZXR1cm4gbn1yZXR1cm4gZnVuY3Rpb24oZSxuKXtpZihBcnJheS5pc0FycmF5KGUpKXJldHVybiBlO2lmKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoZSkpcmV0dXJuIHQoZSxuKTt0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIil9fSgpLGg9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsInZhbHVlImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxyLmtleSxyKX19cmV0dXJuIGZ1bmN0aW9uKGUsbixyKXtyZXR1cm4gbiYmdChlLnByb3RvdHlwZSxuKSxyJiZ0KGUsciksZX19KCk7big1Myk7dmFyIHA9big0KSxkPXIocCkseT1uKDU3KSx2PXIoeSksYj1uKDkpLGc9cihiKSxtPW4oNyksXz1yKG0pLE89bigwKSx3PXIoTykseD1uKDIyKSxrPXIoeCksRT1uKDIpLE49cihFKSxqPW4oMTApLEE9cihqKSxxPW4oMzIpLFQ9cihxKSxQPSgwLEEuZGVmYXVsdCkoInF1aWxsIiksUz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSl7dmFyIG49dGhpcyxyPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fTtpZihpKHRoaXMsdCksdGhpcy5vcHRpb25zPWwoZSxyKSx0aGlzLmNvbnRhaW5lcj10aGlzLm9wdGlvbnMuY29udGFpbmVyLG51bGw9PXRoaXMuY29udGFpbmVyKXJldHVybiBQLmVycm9yKCJJbnZhbGlkIFF1aWxsIGNvbnRhaW5lciIsZSk7dGhpcy5vcHRpb25zLmRlYnVnJiZ0LmRlYnVnKHRoaXMub3B0aW9ucy5kZWJ1Zyk7dmFyIG89dGhpcy5jb250YWluZXIuaW5uZXJIVE1MLnRyaW0oKTt0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCJxbC1jb250YWluZXIiKSx0aGlzLmNvbnRhaW5lci5pbm5lckhUTUw9IiIsdGhpcy5jb250YWluZXIuX19xdWlsbD10aGlzLHRoaXMucm9vdD10aGlzLmFkZENvbnRhaW5lcigicWwtZWRpdG9yIiksdGhpcy5yb290LmNsYXNzTGlzdC5hZGQoInFsLWJsYW5rIiksdGhpcy5yb290LnNldEF0dHJpYnV0ZSgiZGF0YS1ncmFtbSIsITEpLHRoaXMuc2Nyb2xsaW5nQ29udGFpbmVyPXRoaXMub3B0aW9ucy5zY3JvbGxpbmdDb250YWluZXJ8fHRoaXMucm9vdCx0aGlzLmVtaXR0ZXI9bmV3IGcuZGVmYXVsdCx0aGlzLnNjcm9sbD13LmRlZmF1bHQuY3JlYXRlKHRoaXMucm9vdCx7ZW1pdHRlcjp0aGlzLmVtaXR0ZXIsd2hpdGVsaXN0OnRoaXMub3B0aW9ucy5mb3JtYXRzfSksdGhpcy5lZGl0b3I9bmV3IHYuZGVmYXVsdCh0aGlzLnNjcm9sbCksdGhpcy5zZWxlY3Rpb249bmV3IGsuZGVmYXVsdCh0aGlzLnNjcm9sbCx0aGlzLmVtaXR0ZXIpLHRoaXMudGhlbWU9bmV3IHRoaXMub3B0aW9ucy50aGVtZSh0aGlzLHRoaXMub3B0aW9ucyksdGhpcy5rZXlib2FyZD10aGlzLnRoZW1lLmFkZE1vZHVsZSgia2V5Ym9hcmQiKSx0aGlzLmNsaXBib2FyZD10aGlzLnRoZW1lLmFkZE1vZHVsZSgiY2xpcGJvYXJkIiksdGhpcy5oaXN0b3J5PXRoaXMudGhlbWUuYWRkTW9kdWxlKCJoaXN0b3J5IiksdGhpcy50aGVtZS5pbml0KCksdGhpcy5lbWl0dGVyLm9uKGcuZGVmYXVsdC5ldmVudHMuRURJVE9SX0NIQU5HRSxmdW5jdGlvbih0KXt0PT09Zy5kZWZhdWx0LmV2ZW50cy5URVhUX0NIQU5HRSYmbi5yb290LmNsYXNzTGlzdC50b2dnbGUoInFsLWJsYW5rIixuLmVkaXRvci5pc0JsYW5rKCkpfSksdGhpcy5lbWl0dGVyLm9uKGcuZGVmYXVsdC5ldmVudHMuU0NST0xMX1VQREFURSxmdW5jdGlvbih0LGUpe3ZhciByPW4uc2VsZWN0aW9uLmxhc3RSYW5nZSxvPXImJjA9PT1yLmxlbmd0aD9yLmluZGV4OnZvaWQgMDthLmNhbGwobixmdW5jdGlvbigpe3JldHVybiBuLmVkaXRvci51cGRhdGUobnVsbCxlLG8pfSx0KX0pO3ZhciBzPXRoaXMuY2xpcGJvYXJkLmNvbnZlcnQoIjxkaXYgY2xhc3M9J3FsLWVkaXRvcicgc3R5bGU9XCJ3aGl0ZS1zcGFjZTogbm9ybWFsO1wiPiIrbysiPHA+PGJyPjwvcD48L2Rpdj4iKTt0aGlzLnNldENvbnRlbnRzKHMpLHRoaXMuaGlzdG9yeS5jbGVhcigpLHRoaXMub3B0aW9ucy5wbGFjZWhvbGRlciYmdGhpcy5yb290LnNldEF0dHJpYnV0ZSgiZGF0YS1wbGFjZWhvbGRlciIsdGhpcy5vcHRpb25zLnBsYWNlaG9sZGVyKSx0aGlzLm9wdGlvbnMucmVhZE9ubHkmJnRoaXMuZGlzYWJsZSgpfXJldHVybiBoKHQsbnVsbCxbe2tleToiZGVidWciLHZhbHVlOmZ1bmN0aW9uKHQpeyEwPT09dCYmKHQ9ImxvZyIpLEEuZGVmYXVsdC5sZXZlbCh0KX19LHtrZXk6ImZpbmQiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcXVpbGx8fHcuZGVmYXVsdC5maW5kKHQpfX0se2tleToiaW1wb3J0Iix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gbnVsbD09dGhpcy5pbXBvcnRzW3RdJiZQLmVycm9yKCJDYW5ub3QgaW1wb3J0ICIrdCsiLiBBcmUgeW91IHN1cmUgaXQgd2FzIHJlZ2lzdGVyZWQ/IiksdGhpcy5pbXBvcnRzW3RdfX0se2tleToicmVnaXN0ZXIiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcyxyPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdJiZhcmd1bWVudHNbMl07aWYoInN0cmluZyIhPXR5cGVvZiB0KXt2YXIgbz10LmF0dHJOYW1lfHx0LmJsb3ROYW1lOyJzdHJpbmciPT10eXBlb2Ygbz90aGlzLnJlZ2lzdGVyKCJmb3JtYXRzLyIrbyx0LGUpOk9iamVjdC5rZXlzKHQpLmZvckVhY2goZnVuY3Rpb24ocil7bi5yZWdpc3RlcihyLHRbcl0sZSl9KX1lbHNlIG51bGw9PXRoaXMuaW1wb3J0c1t0XXx8cnx8UC53YXJuKCJPdmVyd3JpdGluZyAiK3QrIiB3aXRoIixlKSx0aGlzLmltcG9ydHNbdF09ZSwodC5zdGFydHNXaXRoKCJibG90cy8iKXx8dC5zdGFydHNXaXRoKCJmb3JtYXRzLyIpKSYmImFic3RyYWN0IiE9PWUuYmxvdE5hbWU/dy5kZWZhdWx0LnJlZ2lzdGVyKGUpOnQuc3RhcnRzV2l0aCgibW9kdWxlcyIpJiYiZnVuY3Rpb24iPT10eXBlb2YgZS5yZWdpc3RlciYmZS5yZWdpc3RlcigpfX1dKSxoKHQsW3trZXk6ImFkZENvbnRhaW5lciIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOm51bGw7aWYoInN0cmluZyI9PXR5cGVvZiB0KXt2YXIgbj10O3Q9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2IiksdC5jbGFzc0xpc3QuYWRkKG4pfXJldHVybiB0aGlzLmNvbnRhaW5lci5pbnNlcnRCZWZvcmUodCxlKSx0fX0se2tleToiYmx1ciIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnNlbGVjdGlvbi5zZXRSYW5nZShudWxsKX19LHtrZXk6ImRlbGV0ZVRleHQiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj10aGlzLG89cyh0LGUsbiksaT1mKG8sNCk7cmV0dXJuIHQ9aVswXSxlPWlbMV0sbj1pWzNdLGEuY2FsbCh0aGlzLGZ1bmN0aW9uKCl7cmV0dXJuIHIuZWRpdG9yLmRlbGV0ZVRleHQodCxlKX0sbix0LC0xKmUpfX0se2tleToiZGlzYWJsZSIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmVuYWJsZSghMSl9fSx7a2V5OiJlbmFibGUiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9IShhcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXSl8fGFyZ3VtZW50c1swXTt0aGlzLnNjcm9sbC5lbmFibGUodCksdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LnRvZ2dsZSgicWwtZGlzYWJsZWQiLCF0KX19LHtrZXk6ImZvY3VzIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuc2Nyb2xsaW5nQ29udGFpbmVyLnNjcm9sbFRvcDt0aGlzLnNlbGVjdGlvbi5mb2N1cygpLHRoaXMuc2Nyb2xsaW5nQ29udGFpbmVyLnNjcm9sbFRvcD10LHRoaXMuc2Nyb2xsSW50b1ZpZXcoKX19LHtrZXk6ImZvcm1hdCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLHI9YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmcuZGVmYXVsdC5zb3VyY2VzLkFQSTtyZXR1cm4gYS5jYWxsKHRoaXMsZnVuY3Rpb24oKXt2YXIgcj1uLmdldFNlbGVjdGlvbighMCksaT1uZXcgZC5kZWZhdWx0O2lmKG51bGw9PXIpcmV0dXJuIGk7aWYody5kZWZhdWx0LnF1ZXJ5KHQsdy5kZWZhdWx0LlNjb3BlLkJMT0NLKSlpPW4uZWRpdG9yLmZvcm1hdExpbmUoci5pbmRleCxyLmxlbmd0aCxvKHt9LHQsZSkpO2Vsc2V7aWYoMD09PXIubGVuZ3RoKXJldHVybiBuLnNlbGVjdGlvbi5mb3JtYXQodCxlKSxpO2k9bi5lZGl0b3IuZm9ybWF0VGV4dChyLmluZGV4LHIubGVuZ3RoLG8oe30sdCxlKSl9cmV0dXJuIG4uc2V0U2VsZWN0aW9uKHIsZy5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKSxpfSxyKX19LHtrZXk6ImZvcm1hdExpbmUiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuLHIsbyl7dmFyIGk9dGhpcyxsPXZvaWQgMCx1PXModCxlLG4scixvKSxjPWYodSw0KTtyZXR1cm4gdD1jWzBdLGU9Y1sxXSxsPWNbMl0sbz1jWzNdLGEuY2FsbCh0aGlzLGZ1bmN0aW9uKCl7cmV0dXJuIGkuZWRpdG9yLmZvcm1hdExpbmUodCxlLGwpfSxvLHQsMCl9fSx7a2V5OiJmb3JtYXRUZXh0Iix2YWx1ZTpmdW5jdGlvbih0LGUsbixyLG8pe3ZhciBpPXRoaXMsbD12b2lkIDAsdT1zKHQsZSxuLHIsbyksYz1mKHUsNCk7cmV0dXJuIHQ9Y1swXSxlPWNbMV0sbD1jWzJdLG89Y1szXSxhLmNhbGwodGhpcyxmdW5jdGlvbigpe3JldHVybiBpLmVkaXRvci5mb3JtYXRUZXh0KHQsZSxsKX0sbyx0LDApfX0se2tleToiZ2V0Qm91bmRzIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MCxuPXZvaWQgMDtuPSJudW1iZXIiPT10eXBlb2YgdD90aGlzLnNlbGVjdGlvbi5nZXRCb3VuZHModCxlKTp0aGlzLnNlbGVjdGlvbi5nZXRCb3VuZHModC5pbmRleCx0Lmxlbmd0aCk7dmFyIHI9dGhpcy5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7cmV0dXJue2JvdHRvbTpuLmJvdHRvbS1yLnRvcCxoZWlnaHQ6bi5oZWlnaHQsbGVmdDpuLmxlZnQtci5sZWZ0LHJpZ2h0Om4ucmlnaHQtci5sZWZ0LHRvcDpuLnRvcC1yLnRvcCx3aWR0aDpuLndpZHRofX19LHtrZXk6ImdldENvbnRlbnRzIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTowLGU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnRoaXMuZ2V0TGVuZ3RoKCktdCxuPXModCxlKSxyPWYobiwyKTtyZXR1cm4gdD1yWzBdLGU9clsxXSx0aGlzLmVkaXRvci5nZXRDb250ZW50cyh0LGUpfX0se2tleToiZ2V0Rm9ybWF0Iix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp0aGlzLmdldFNlbGVjdGlvbighMCksZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MDtyZXR1cm4ibnVtYmVyIj09dHlwZW9mIHQ/dGhpcy5lZGl0b3IuZ2V0Rm9ybWF0KHQsZSk6dGhpcy5lZGl0b3IuZ2V0Rm9ybWF0KHQuaW5kZXgsdC5sZW5ndGgpfX0se2tleToiZ2V0SW5kZXgiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0Lm9mZnNldCh0aGlzLnNjcm9sbCl9fSx7a2V5OiJnZXRMZW5ndGgiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2Nyb2xsLmxlbmd0aCgpfX0se2tleToiZ2V0TGVhZiIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuc2Nyb2xsLmxlYWYodCl9fSx7a2V5OiJnZXRMaW5lIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5zY3JvbGwubGluZSh0KX19LHtrZXk6ImdldExpbmVzIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTowLGU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOk51bWJlci5NQVhfVkFMVUU7cmV0dXJuIm51bWJlciIhPXR5cGVvZiB0P3RoaXMuc2Nyb2xsLmxpbmVzKHQuaW5kZXgsdC5sZW5ndGgpOnRoaXMuc2Nyb2xsLmxpbmVzKHQsZSl9fSx7a2V5OiJnZXRNb2R1bGUiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRoZW1lLm1vZHVsZXNbdF19fSx7a2V5OiJnZXRTZWxlY3Rpb24iLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdJiZhcmd1bWVudHNbMF0mJnRoaXMuZm9jdXMoKSx0aGlzLnVwZGF0ZSgpLHRoaXMuc2VsZWN0aW9uLmdldFJhbmdlKClbMF19fSx7a2V5OiJnZXRUZXh0Iix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTowLGU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnRoaXMuZ2V0TGVuZ3RoKCktdCxuPXModCxlKSxyPWYobiwyKTtyZXR1cm4gdD1yWzBdLGU9clsxXSx0aGlzLmVkaXRvci5nZXRUZXh0KHQsZSl9fSx7a2V5OiJoYXNGb2N1cyIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZWxlY3Rpb24uaGFzRm9jdXMoKX19LHtrZXk6Imluc2VydEVtYmVkIix2YWx1ZTpmdW5jdGlvbihlLG4scil7dmFyIG89dGhpcyxpPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTp0LnNvdXJjZXMuQVBJO3JldHVybiBhLmNhbGwodGhpcyxmdW5jdGlvbigpe3JldHVybiBvLmVkaXRvci5pbnNlcnRFbWJlZChlLG4scil9LGksZSl9fSx7a2V5OiJpbnNlcnRUZXh0Iix2YWx1ZTpmdW5jdGlvbih0LGUsbixyLG8pe3ZhciBpPXRoaXMsbD12b2lkIDAsdT1zKHQsMCxuLHIsbyksYz1mKHUsNCk7cmV0dXJuIHQ9Y1swXSxsPWNbMl0sbz1jWzNdLGEuY2FsbCh0aGlzLGZ1bmN0aW9uKCl7cmV0dXJuIGkuZWRpdG9yLmluc2VydFRleHQodCxlLGwpfSxvLHQsZS5sZW5ndGgpfX0se2tleToiaXNFbmFibGVkIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiF0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuY29udGFpbnMoInFsLWRpc2FibGVkIil9fSx7a2V5OiJvZmYiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZW1pdHRlci5vZmYuYXBwbHkodGhpcy5lbWl0dGVyLGFyZ3VtZW50cyl9fSx7a2V5OiJvbiIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbWl0dGVyLm9uLmFwcGx5KHRoaXMuZW1pdHRlcixhcmd1bWVudHMpfX0se2tleToib25jZSIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbWl0dGVyLm9uY2UuYXBwbHkodGhpcy5lbWl0dGVyLGFyZ3VtZW50cyl9fSx7a2V5OiJwYXN0ZUhUTUwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuKXt0aGlzLmNsaXBib2FyZC5kYW5nZXJvdXNseVBhc3RlSFRNTCh0LGUsbil9fSx7a2V5OiJyZW1vdmVGb3JtYXQiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj10aGlzLG89cyh0LGUsbiksaT1mKG8sNCk7cmV0dXJuIHQ9aVswXSxlPWlbMV0sbj1pWzNdLGEuY2FsbCh0aGlzLGZ1bmN0aW9uKCl7cmV0dXJuIHIuZWRpdG9yLnJlbW92ZUZvcm1hdCh0LGUpfSxuLHQpfX0se2tleToic2Nyb2xsSW50b1ZpZXciLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5zZWxlY3Rpb24uc2Nyb2xsSW50b1ZpZXcodGhpcy5zY3JvbGxpbmdDb250YWluZXIpfX0se2tleToic2V0Q29udGVudHMiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06Zy5kZWZhdWx0LnNvdXJjZXMuQVBJO3JldHVybiBhLmNhbGwodGhpcyxmdW5jdGlvbigpe3Q9bmV3IGQuZGVmYXVsdCh0KTt2YXIgbj1lLmdldExlbmd0aCgpLHI9ZS5lZGl0b3IuZGVsZXRlVGV4dCgwLG4pLG89ZS5lZGl0b3IuYXBwbHlEZWx0YSh0KSxpPW8ub3BzW28ub3BzLmxlbmd0aC0xXTtyZXR1cm4gbnVsbCE9aSYmInN0cmluZyI9PXR5cGVvZiBpLmluc2VydCYmIlxuIj09PWkuaW5zZXJ0W2kuaW5zZXJ0Lmxlbmd0aC0xXSYmKGUuZWRpdG9yLmRlbGV0ZVRleHQoZS5nZXRMZW5ndGgoKS0xLDEpLG8uZGVsZXRlKDEpKSxyLmNvbXBvc2Uobyl9LG4pfX0se2tleToic2V0U2VsZWN0aW9uIix2YWx1ZTpmdW5jdGlvbihlLG4scil7aWYobnVsbD09ZSl0aGlzLnNlbGVjdGlvbi5zZXRSYW5nZShudWxsLG58fHQuc291cmNlcy5BUEkpO2Vsc2V7dmFyIG89cyhlLG4sciksaT1mKG8sNCk7ZT1pWzBdLG49aVsxXSxyPWlbM10sdGhpcy5zZWxlY3Rpb24uc2V0UmFuZ2UobmV3IHguUmFuZ2UoZSxuKSxyKSxyIT09Zy5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UJiZ0aGlzLnNlbGVjdGlvbi5zY3JvbGxJbnRvVmlldyh0aGlzLnNjcm9sbGluZ0NvbnRhaW5lcil9fX0se2tleToic2V0VGV4dCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmcuZGVmYXVsdC5zb3VyY2VzLkFQSSxuPShuZXcgZC5kZWZhdWx0KS5pbnNlcnQodCk7cmV0dXJuIHRoaXMuc2V0Q29udGVudHMobixlKX19LHtrZXk6InVwZGF0ZSIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06Zy5kZWZhdWx0LnNvdXJjZXMuVVNFUixlPXRoaXMuc2Nyb2xsLnVwZGF0ZSh0KTtyZXR1cm4gdGhpcy5zZWxlY3Rpb24udXBkYXRlKHQpLGV9fSx7a2V5OiJ1cGRhdGVDb250ZW50cyIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxuPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpnLmRlZmF1bHQuc291cmNlcy5BUEk7cmV0dXJuIGEuY2FsbCh0aGlzLGZ1bmN0aW9uKCl7cmV0dXJuIHQ9bmV3IGQuZGVmYXVsdCh0KSxlLmVkaXRvci5hcHBseURlbHRhKHQsbil9LG4sITApfX1dKSx0fSgpO1MuREVGQVVMVFM9e2JvdW5kczpudWxsLGZvcm1hdHM6bnVsbCxtb2R1bGVzOnt9LHBsYWNlaG9sZGVyOiIiLHJlYWRPbmx5OiExLHNjcm9sbGluZ0NvbnRhaW5lcjpudWxsLHN0cmljdDohMCx0aGVtZToiZGVmYXVsdCJ9LFMuZXZlbnRzPWcuZGVmYXVsdC5ldmVudHMsUy5zb3VyY2VzPWcuZGVmYXVsdC5zb3VyY2VzLFMudmVyc2lvbj0iMS4zLjYiLFMuaW1wb3J0cz17ZGVsdGE6ZC5kZWZhdWx0LHBhcmNobWVudDp3LmRlZmF1bHQsImNvcmUvbW9kdWxlIjpfLmRlZmF1bHQsImNvcmUvdGhlbWUiOlQuZGVmYXVsdH0sZS5leHBhbmRDb25maWc9bCxlLm92ZXJsb2FkPXMsZS5kZWZhdWx0PVN9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbz1mdW5jdGlvbiB0KGUpe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fTtyKHRoaXMsdCksdGhpcy5xdWlsbD1lLHRoaXMub3B0aW9ucz1ufTtvLkRFRkFVTFRTPXt9LGUuZGVmYXVsdD1vfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1mdW5jdGlvbiBvKHQsZSl7aWYoIXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTtyZXR1cm4hZXx8Im9iamVjdCIhPXR5cGVvZiBlJiYiZnVuY3Rpb24iIT10eXBlb2YgZT90OmV9ZnVuY3Rpb24gaSh0LGUpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIrdHlwZW9mIGUpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLGUmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHQsZSk6dC5fX3Byb3RvX189ZSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBsPW4oMCksYT1mdW5jdGlvbih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19KGwpLHM9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3JldHVybiByKHRoaXMsZSksbyh0aGlzLChlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpKS5hcHBseSh0aGlzLGFyZ3VtZW50cykpfXJldHVybiBpKGUsdCksZX0oYS5kZWZhdWx0LlRleHQpO2UuZGVmYXVsdD1zfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWZ1bmN0aW9uIG8odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1mdW5jdGlvbiBpKHQsZSl7aWYoIXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTtyZXR1cm4hZXx8Im9iamVjdCIhPXR5cGVvZiBlJiYiZnVuY3Rpb24iIT10eXBlb2YgZT90OmV9ZnVuY3Rpb24gbCh0LGUpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIrdHlwZW9mIGUpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLGUmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHQsZSk6dC5fX3Byb3RvX189ZSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsci5rZXkscil9fXJldHVybiBmdW5jdGlvbihlLG4scil7cmV0dXJuIG4mJnQoZS5wcm90b3R5cGUsbiksciYmdChlLHIpLGV9fSgpLHM9ZnVuY3Rpb24gdChlLG4scil7bnVsbD09PWUmJihlPUZ1bmN0aW9uLnByb3RvdHlwZSk7dmFyIG89T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLG4pO2lmKHZvaWQgMD09PW8pe3ZhciBpPU9iamVjdC5nZXRQcm90b3R5cGVPZihlKTtyZXR1cm4gbnVsbD09PWk/dm9pZCAwOnQoaSxuLHIpfWlmKCJ2YWx1ZSJpbiBvKXJldHVybiBvLnZhbHVlO3ZhciBsPW8uZ2V0O2lmKHZvaWQgMCE9PWwpcmV0dXJuIGwuY2FsbChyKX0sdT1uKDU4KSxjPXIodSksZj1uKDEwKSxoPXIoZikscD0oMCxoLmRlZmF1bHQpKCJxdWlsbDpldmVudHMiKTtbInNlbGVjdGlvbmNoYW5nZSIsIm1vdXNlZG93biIsIm1vdXNldXAiLCJjbGljayJdLmZvckVhY2goZnVuY3Rpb24odCl7ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0LGZ1bmN0aW9uKCl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsZT1BcnJheSh0KSxuPTA7bjx0O24rKyllW25dPWFyZ3VtZW50c1tuXTtbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIi5xbC1jb250YWluZXIiKSkuZm9yRWFjaChmdW5jdGlvbih0KXtpZih0Ll9fcXVpbGwmJnQuX19xdWlsbC5lbWl0dGVyKXt2YXIgbjsobj10Ll9fcXVpbGwuZW1pdHRlcikuaGFuZGxlRE9NLmFwcGx5KG4sZSl9fSl9KX0pO3ZhciBkPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtvKHRoaXMsZSk7dmFyIHQ9aSh0aGlzLChlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpKS5jYWxsKHRoaXMpKTtyZXR1cm4gdC5saXN0ZW5lcnM9e30sdC5vbigiZXJyb3IiLHAuZXJyb3IpLHR9cmV0dXJuIGwoZSx0KSxhKGUsW3trZXk6ImVtaXQiLHZhbHVlOmZ1bmN0aW9uKCl7cC5sb2cuYXBwbHkocCxhcmd1bWVudHMpLHMoZS5wcm90b3R5cGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZS5wcm90b3R5cGUpLCJlbWl0Iix0aGlzKS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSx7a2V5OiJoYW5kbGVET00iLHZhbHVlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLG49QXJyYXkoZT4xP2UtMTowKSxyPTE7cjxlO3IrKyluW3ItMV09YXJndW1lbnRzW3JdOyh0aGlzLmxpc3RlbmVyc1t0LnR5cGVdfHxbXSkuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgcj1lLm5vZGUsbz1lLmhhbmRsZXI7KHQudGFyZ2V0PT09cnx8ci5jb250YWlucyh0LnRhcmdldCkpJiZvLmFwcGx5KHZvaWQgMCxbdF0uY29uY2F0KG4pKX0pfX0se2tleToibGlzdGVuRE9NIix2YWx1ZTpmdW5jdGlvbih0LGUsbil7dGhpcy5saXN0ZW5lcnNbdF18fCh0aGlzLmxpc3RlbmVyc1t0XT1bXSksdGhpcy5saXN0ZW5lcnNbdF0ucHVzaCh7bm9kZTplLGhhbmRsZXI6bn0pfX1dKSxlfShjLmRlZmF1bHQpO2QuZXZlbnRzPXtFRElUT1JfQ0hBTkdFOiJlZGl0b3ItY2hhbmdlIixTQ1JPTExfQkVGT1JFX1VQREFURToic2Nyb2xsLWJlZm9yZS11cGRhdGUiLFNDUk9MTF9PUFRJTUlaRToic2Nyb2xsLW9wdGltaXplIixTQ1JPTExfVVBEQVRFOiJzY3JvbGwtdXBkYXRlIixTRUxFQ1RJT05fQ0hBTkdFOiJzZWxlY3Rpb24tY2hhbmdlIixURVhUX0NIQU5HRToidGV4dC1jaGFuZ2UifSxkLnNvdXJjZXM9e0FQSToiYXBpIixTSUxFTlQ6InNpbGVudCIsVVNFUjoidXNlciJ9LGUuZGVmYXVsdD1kfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIodCl7aWYoaS5pbmRleE9mKHQpPD1pLmluZGV4T2YobCkpe2Zvcih2YXIgZSxuPWFyZ3VtZW50cy5sZW5ndGgscj1BcnJheShuPjE/bi0xOjApLG89MTtvPG47bysrKXJbby0xXT1hcmd1bWVudHNbb107KGU9Y29uc29sZSlbdF0uYXBwbHkoZSxyKX19ZnVuY3Rpb24gbyh0KXtyZXR1cm4gaS5yZWR1Y2UoZnVuY3Rpb24oZSxuKXtyZXR1cm4gZVtuXT1yLmJpbmQoY29uc29sZSxuLHQpLGV9LHt9KX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIGk9WyJlcnJvciIsIndhcm4iLCJsb2ciLCJpbmZvIl0sbD0id2FybiI7ci5sZXZlbD1vLmxldmVsPWZ1bmN0aW9uKHQpe2w9dH0sZS5kZWZhdWx0PW99LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPW4oMSksbz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlLG4pe3ZvaWQgMD09PW4mJihuPXt9KSx0aGlzLmF0dHJOYW1lPXQsdGhpcy5rZXlOYW1lPWU7dmFyIG89ci5TY29wZS5UWVBFJnIuU2NvcGUuQVRUUklCVVRFO251bGwhPW4uc2NvcGU/dGhpcy5zY29wZT1uLnNjb3BlJnIuU2NvcGUuTEVWRUx8bzp0aGlzLnNjb3BlPXIuU2NvcGUuQVRUUklCVVRFLG51bGwhPW4ud2hpdGVsaXN0JiYodGhpcy53aGl0ZWxpc3Q9bi53aGl0ZWxpc3QpfXJldHVybiB0LmtleXM9ZnVuY3Rpb24odCl7cmV0dXJuW10ubWFwLmNhbGwodC5hdHRyaWJ1dGVzLGZ1bmN0aW9uKHQpe3JldHVybiB0Lm5hbWV9KX0sdC5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKHQsZSl7cmV0dXJuISF0aGlzLmNhbkFkZCh0LGUpJiYodC5zZXRBdHRyaWJ1dGUodGhpcy5rZXlOYW1lLGUpLCEwKX0sdC5wcm90b3R5cGUuY2FuQWRkPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG51bGwhPXIucXVlcnkodCxyLlNjb3BlLkJMT1QmKHRoaXMuc2NvcGV8ci5TY29wZS5UWVBFKSkmJihudWxsPT10aGlzLndoaXRlbGlzdHx8KCJzdHJpbmciPT10eXBlb2YgZT90aGlzLndoaXRlbGlzdC5pbmRleE9mKGUucmVwbGFjZSgvWyInXS9nLCIiKSk+LTE6dGhpcy53aGl0ZWxpc3QuaW5kZXhPZihlKT4tMSkpfSx0LnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24odCl7dC5yZW1vdmVBdHRyaWJ1dGUodGhpcy5rZXlOYW1lKX0sdC5wcm90b3R5cGUudmFsdWU9ZnVuY3Rpb24odCl7dmFyIGU9dC5nZXRBdHRyaWJ1dGUodGhpcy5rZXlOYW1lKTtyZXR1cm4gdGhpcy5jYW5BZGQodCxlKSYmZT9lOiIifSx0fSgpO2UuZGVmYXVsdD1vfSxmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcih0KXtyZXR1cm4gbnVsbD09PXR8fHZvaWQgMD09PXR9ZnVuY3Rpb24gbyh0KXtyZXR1cm4hKCF0fHwib2JqZWN0IiE9dHlwZW9mIHR8fCJudW1iZXIiIT10eXBlb2YgdC5sZW5ndGgpJiYoImZ1bmN0aW9uIj09dHlwZW9mIHQuY29weSYmImZ1bmN0aW9uIj09dHlwZW9mIHQuc2xpY2UmJiEodC5sZW5ndGg+MCYmIm51bWJlciIhPXR5cGVvZiB0WzBdKSl9ZnVuY3Rpb24gaSh0LGUsbil7dmFyIGksYztpZihyKHQpfHxyKGUpKXJldHVybiExO2lmKHQucHJvdG90eXBlIT09ZS5wcm90b3R5cGUpcmV0dXJuITE7aWYocyh0KSlyZXR1cm4hIXMoZSkmJih0PWwuY2FsbCh0KSxlPWwuY2FsbChlKSx1KHQsZSxuKSk7aWYobyh0KSl7aWYoIW8oZSkpcmV0dXJuITE7aWYodC5sZW5ndGghPT1lLmxlbmd0aClyZXR1cm4hMTtmb3IoaT0wO2k8dC5sZW5ndGg7aSsrKWlmKHRbaV0hPT1lW2ldKXJldHVybiExO3JldHVybiEwfXRyeXt2YXIgZj1hKHQpLGg9YShlKX1jYXRjaCh0KXtyZXR1cm4hMX1pZihmLmxlbmd0aCE9aC5sZW5ndGgpcmV0dXJuITE7Zm9yKGYuc29ydCgpLGguc29ydCgpLGk9Zi5sZW5ndGgtMTtpPj0wO2ktLSlpZihmW2ldIT1oW2ldKXJldHVybiExO2ZvcihpPWYubGVuZ3RoLTE7aT49MDtpLS0paWYoYz1mW2ldLCF1KHRbY10sZVtjXSxuKSlyZXR1cm4hMTtyZXR1cm4gdHlwZW9mIHQ9PXR5cGVvZiBlfXZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZSxhPW4oNTUpLHM9big1NiksdT10LmV4cG9ydHM9ZnVuY3Rpb24odCxlLG4pe3JldHVybiBufHwobj17fSksdD09PWV8fCh0IGluc3RhbmNlb2YgRGF0ZSYmZSBpbnN0YW5jZW9mIERhdGU/dC5nZXRUaW1lKCk9PT1lLmdldFRpbWUoKTohdHx8IWV8fCJvYmplY3QiIT10eXBlb2YgdCYmIm9iamVjdCIhPXR5cGVvZiBlP24uc3RyaWN0P3Q9PT1lOnQ9PWU6aSh0LGUsbikpfX0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1mdW5jdGlvbiBvKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9ZnVuY3Rpb24gaSh0LGUpe2lmKCF0KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7cmV0dXJuIWV8fCJvYmplY3QiIT10eXBlb2YgZSYmImZ1bmN0aW9uIiE9dHlwZW9mIGU/dDplfWZ1bmN0aW9uIGwodCxlKXtpZigiZnVuY3Rpb24iIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAiK3R5cGVvZiBlKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxlJiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZih0LGUpOnQuX19wcm90b19fPWUpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9ZS5Db2RlPXZvaWQgMDt2YXIgYT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXt2YXIgbj1bXSxyPSEwLG89ITEsaT12b2lkIDA7dHJ5e2Zvcih2YXIgbCxhPXRbU3ltYm9sLml0ZXJhdG9yXSgpOyEocj0obD1hLm5leHQoKSkuZG9uZSkmJihuLnB1c2gobC52YWx1ZSksIWV8fG4ubGVuZ3RoIT09ZSk7cj0hMCk7fWNhdGNoKHQpe289ITAsaT10fWZpbmFsbHl7dHJ5eyFyJiZhLnJldHVybiYmYS5yZXR1cm4oKX1maW5hbGx5e2lmKG8pdGhyb3cgaX19cmV0dXJuIG59cmV0dXJuIGZ1bmN0aW9uKGUsbil7aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gZTtpZihTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGUpKXJldHVybiB0KGUsbik7dGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpfX0oKSxzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsci5rZXkscil9fXJldHVybiBmdW5jdGlvbihlLG4scil7cmV0dXJuIG4mJnQoZS5wcm90b3R5cGUsbiksciYmdChlLHIpLGV9fSgpLHU9ZnVuY3Rpb24gdChlLG4scil7bnVsbD09PWUmJihlPUZ1bmN0aW9uLnByb3RvdHlwZSk7dmFyIG89T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLG4pO2lmKHZvaWQgMD09PW8pe3ZhciBpPU9iamVjdC5nZXRQcm90b3R5cGVPZihlKTtyZXR1cm4gbnVsbD09PWk/dm9pZCAwOnQoaSxuLHIpfWlmKCJ2YWx1ZSJpbiBvKXJldHVybiBvLnZhbHVlO3ZhciBsPW8uZ2V0O2lmKHZvaWQgMCE9PWwpcmV0dXJuIGwuY2FsbChyKX0sYz1uKDQpLGY9cihjKSxoPW4oMCkscD1yKGgpLGQ9bigzKSx5PXIoZCksdj1uKDUpLGI9cih2KSxnPW4oOCksbT1yKGcpLF89ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3JldHVybiBvKHRoaXMsZSksaSh0aGlzLChlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpKS5hcHBseSh0aGlzLGFyZ3VtZW50cykpfXJldHVybiBsKGUsdCksZX0oYi5kZWZhdWx0KTtfLmJsb3ROYW1lPSJjb2RlIixfLnRhZ05hbWU9IkNPREUiO3ZhciBPPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gbyh0aGlzLGUpLGkodGhpcywoZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlKSkuYXBwbHkodGhpcyxhcmd1bWVudHMpKX1yZXR1cm4gbChlLHQpLHMoZSxbe2tleToiZGVsdGEiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXRoaXMuZG9tTm9kZS50ZXh0Q29udGVudDtyZXR1cm4gZS5lbmRzV2l0aCgiXG4iKSYmKGU9ZS5zbGljZSgwLC0xKSksZS5zcGxpdCgiXG4iKS5yZWR1Y2UoZnVuY3Rpb24oZSxuKXtyZXR1cm4gZS5pbnNlcnQobikuaW5zZXJ0KCJcbiIsdC5mb3JtYXRzKCkpfSxuZXcgZi5kZWZhdWx0KX19LHtrZXk6ImZvcm1hdCIsdmFsdWU6ZnVuY3Rpb24odCxuKXtpZih0IT09dGhpcy5zdGF0aWNzLmJsb3ROYW1lfHwhbil7dmFyIHI9dGhpcy5kZXNjZW5kYW50KG0uZGVmYXVsdCx0aGlzLmxlbmd0aCgpLTEpLG89YShyLDEpLGk9b1swXTtudWxsIT1pJiZpLmRlbGV0ZUF0KGkubGVuZ3RoKCktMSwxKSx1KGUucHJvdG90eXBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUucHJvdG90eXBlKSwiZm9ybWF0Iix0aGlzKS5jYWxsKHRoaXMsdCxuKX19fSx7a2V5OiJmb3JtYXRBdCIsdmFsdWU6ZnVuY3Rpb24odCxuLHIsbyl7aWYoMCE9PW4mJm51bGwhPXAuZGVmYXVsdC5xdWVyeShyLHAuZGVmYXVsdC5TY29wZS5CTE9DSykmJihyIT09dGhpcy5zdGF0aWNzLmJsb3ROYW1lfHxvIT09dGhpcy5zdGF0aWNzLmZvcm1hdHModGhpcy5kb21Ob2RlKSkpe3ZhciBpPXRoaXMubmV3bGluZUluZGV4KHQpO2lmKCEoaTwwfHxpPj10K24pKXt2YXIgbD10aGlzLm5ld2xpbmVJbmRleCh0LCEwKSsxLGE9aS1sKzEscz10aGlzLmlzb2xhdGUobCxhKSx1PXMubmV4dDtzLmZvcm1hdChyLG8pLHUgaW5zdGFuY2VvZiBlJiZ1LmZvcm1hdEF0KDAsdC1sK24tYSxyLG8pfX19fSx7a2V5OiJpbnNlcnRBdCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4pe2lmKG51bGw9PW4pe3ZhciByPXRoaXMuZGVzY2VuZGFudChtLmRlZmF1bHQsdCksbz1hKHIsMiksaT1vWzBdLGw9b1sxXTtpLmluc2VydEF0KGwsZSl9fX0se2tleToibGVuZ3RoIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuZG9tTm9kZS50ZXh0Q29udGVudC5sZW5ndGg7cmV0dXJuIHRoaXMuZG9tTm9kZS50ZXh0Q29udGVudC5lbmRzV2l0aCgiXG4iKT90OnQrMX19LHtrZXk6Im5ld2xpbmVJbmRleCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYoYXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0mJmFyZ3VtZW50c1sxXSlyZXR1cm4gdGhpcy5kb21Ob2RlLnRleHRDb250ZW50LnNsaWNlKDAsdCkubGFzdEluZGV4T2YoIlxuIik7dmFyIGU9dGhpcy5kb21Ob2RlLnRleHRDb250ZW50LnNsaWNlKHQpLmluZGV4T2YoIlxuIik7cmV0dXJuIGU+LTE/dCtlOi0xfX0se2tleToib3B0aW1pemUiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMuZG9tTm9kZS50ZXh0Q29udGVudC5lbmRzV2l0aCgiXG4iKXx8dGhpcy5hcHBlbmRDaGlsZChwLmRlZmF1bHQuY3JlYXRlKCJ0ZXh0IiwiXG4iKSksdShlLnByb3RvdHlwZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlLnByb3RvdHlwZSksIm9wdGltaXplIix0aGlzKS5jYWxsKHRoaXMsdCk7dmFyIG49dGhpcy5uZXh0O251bGwhPW4mJm4ucHJldj09PXRoaXMmJm4uc3RhdGljcy5ibG90TmFtZT09PXRoaXMuc3RhdGljcy5ibG90TmFtZSYmdGhpcy5zdGF0aWNzLmZvcm1hdHModGhpcy5kb21Ob2RlKT09PW4uc3RhdGljcy5mb3JtYXRzKG4uZG9tTm9kZSkmJihuLm9wdGltaXplKHQpLG4ubW92ZUNoaWxkcmVuKHRoaXMpLG4ucmVtb3ZlKCkpfX0se2tleToicmVwbGFjZSIsdmFsdWU6ZnVuY3Rpb24odCl7dShlLnByb3RvdHlwZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlLnByb3RvdHlwZSksInJlcGxhY2UiLHRoaXMpLmNhbGwodGhpcyx0KSxbXS5zbGljZS5jYWxsKHRoaXMuZG9tTm9kZS5xdWVyeVNlbGVjdG9yQWxsKCIqIikpLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGU9cC5kZWZhdWx0LmZpbmQodCk7bnVsbD09ZT90LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodCk6ZSBpbnN0YW5jZW9mIHAuZGVmYXVsdC5FbWJlZD9lLnJlbW92ZSgpOmUudW53cmFwKCl9KX19XSxbe2tleToiY3JlYXRlIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgbj11KGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSksImNyZWF0ZSIsdGhpcykuY2FsbCh0aGlzLHQpO3JldHVybiBuLnNldEF0dHJpYnV0ZSgic3BlbGxjaGVjayIsITEpLG59fSx7a2V5OiJmb3JtYXRzIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiEwfX1dKSxlfSh5LmRlZmF1bHQpO08uYmxvdE5hbWU9ImNvZGUtYmxvY2siLE8udGFnTmFtZT0iUFJFIixPLlRBQj0iICAiLGUuQ29kZT1fLGUuZGVmYXVsdD1PfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1mdW5jdGlvbiBvKHQsZSl7aWYoIXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTtyZXR1cm4hZXx8Im9iamVjdCIhPXR5cGVvZiBlJiYiZnVuY3Rpb24iIT10eXBlb2YgZT90OmV9ZnVuY3Rpb24gaSh0LGUpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIrdHlwZW9mIGUpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLGUmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHQsZSk6dC5fX3Byb3RvX189ZSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBsPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsci5rZXkscil9fXJldHVybiBmdW5jdGlvbihlLG4scil7cmV0dXJuIG4mJnQoZS5wcm90b3R5cGUsbiksciYmdChlLHIpLGV9fSgpLGE9ZnVuY3Rpb24gdChlLG4scil7bnVsbD09PWUmJihlPUZ1bmN0aW9uLnByb3RvdHlwZSk7dmFyIG89T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLG4pO2lmKHZvaWQgMD09PW8pe3ZhciBpPU9iamVjdC5nZXRQcm90b3R5cGVPZihlKTtyZXR1cm4gbnVsbD09PWk/dm9pZCAwOnQoaSxuLHIpfWlmKCJ2YWx1ZSJpbiBvKXJldHVybiBvLnZhbHVlO3ZhciBsPW8uZ2V0O2lmKHZvaWQgMCE9PWwpcmV0dXJuIGwuY2FsbChyKX0scz1uKDApLHU9ZnVuY3Rpb24odCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fShzKSxjPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gcih0aGlzLGUpLG8odGhpcywoZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlKSkuYXBwbHkodGhpcyxhcmd1bWVudHMpKX1yZXR1cm4gaShlLHQpLGwoZSxbe2tleToiaW5zZXJ0SW50byIsdmFsdWU6ZnVuY3Rpb24odCxuKXswPT09dC5jaGlsZHJlbi5sZW5ndGg/YShlLnByb3RvdHlwZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlLnByb3RvdHlwZSksImluc2VydEludG8iLHRoaXMpLmNhbGwodGhpcyx0LG4pOnRoaXMucmVtb3ZlKCl9fSx7a2V5OiJsZW5ndGgiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIDB9fSx7a2V5OiJ2YWx1ZSIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4iIn19XSxbe2tleToidmFsdWUiLHZhbHVlOmZ1bmN0aW9uKCl7fX1dKSxlfSh1LmRlZmF1bHQuRW1iZWQpO2MuYmxvdE5hbWU9ImJyZWFrIixjLnRhZ05hbWU9IkJSIixlLmRlZmF1bHQ9Y30sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9ZnVuY3Rpb24gbyh0LGUpe2lmKCF0KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7cmV0dXJuIWV8fCJvYmplY3QiIT10eXBlb2YgZSYmImZ1bmN0aW9uIiE9dHlwZW9mIGU/dDplfWZ1bmN0aW9uIGkodCxlKXtpZigiZnVuY3Rpb24iIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAiK3R5cGVvZiBlKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxlJiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZih0LGUpOnQuX19wcm90b19fPWUpfWZ1bmN0aW9uIGwodCxlKXt2YXIgbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJhIik7bi5ocmVmPXQ7dmFyIHI9bi5ocmVmLnNsaWNlKDAsbi5ocmVmLmluZGV4T2YoIjoiKSk7cmV0dXJuIGUuaW5kZXhPZihyKT4tMX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZS5zYW5pdGl6ZT1lLmRlZmF1bHQ9dm9pZCAwO3ZhciBhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsci5rZXkscil9fXJldHVybiBmdW5jdGlvbihlLG4scil7cmV0dXJuIG4mJnQoZS5wcm90b3R5cGUsbiksciYmdChlLHIpLGV9fSgpLHM9ZnVuY3Rpb24gdChlLG4scil7bnVsbD09PWUmJihlPUZ1bmN0aW9uLnByb3RvdHlwZSk7dmFyIG89T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLG4pO2lmKHZvaWQgMD09PW8pe3ZhciBpPU9iamVjdC5nZXRQcm90b3R5cGVPZihlKTtyZXR1cm4gbnVsbD09PWk/dm9pZCAwOnQoaSxuLHIpfWlmKCJ2YWx1ZSJpbiBvKXJldHVybiBvLnZhbHVlO3ZhciBsPW8uZ2V0O2lmKHZvaWQgMCE9PWwpcmV0dXJuIGwuY2FsbChyKX0sdT1uKDUpLGM9ZnVuY3Rpb24odCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fSh1KSxmPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gcih0aGlzLGUpLG8odGhpcywoZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlKSkuYXBwbHkodGhpcyxhcmd1bWVudHMpKX1yZXR1cm4gaShlLHQpLGEoZSxbe2tleToiZm9ybWF0Iix2YWx1ZTpmdW5jdGlvbih0LG4pe2lmKHQhPT10aGlzLnN0YXRpY3MuYmxvdE5hbWV8fCFuKXJldHVybiBzKGUucHJvdG90eXBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUucHJvdG90eXBlKSwiZm9ybWF0Iix0aGlzKS5jYWxsKHRoaXMsdCxuKTtuPXRoaXMuY29uc3RydWN0b3Iuc2FuaXRpemUobiksdGhpcy5kb21Ob2RlLnNldEF0dHJpYnV0ZSgiaHJlZiIsbil9fV0sW3trZXk6ImNyZWF0ZSIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIG49cyhlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpLCJjcmVhdGUiLHRoaXMpLmNhbGwodGhpcyx0KTtyZXR1cm4gdD10aGlzLnNhbml0aXplKHQpLG4uc2V0QXR0cmlidXRlKCJocmVmIix0KSxuLnNldEF0dHJpYnV0ZSgidGFyZ2V0IiwiX2JsYW5rIiksbn19LHtrZXk6ImZvcm1hdHMiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0LmdldEF0dHJpYnV0ZSgiaHJlZiIpfX0se2tleToic2FuaXRpemUiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiBsKHQsdGhpcy5QUk9UT0NPTF9XSElURUxJU1QpP3Q6dGhpcy5TQU5JVElaRURfVVJMfX1dKSxlfShjLmRlZmF1bHQpO2YuYmxvdE5hbWU9ImxpbmsiLGYudGFnTmFtZT0iQSIsZi5TQU5JVElaRURfVVJMPSJhYm91dDpibGFuayIsZi5QUk9UT0NPTF9XSElURUxJU1Q9WyJodHRwIiwiaHR0cHMiLCJtYWlsdG8iLCJ0ZWwiXSxlLmRlZmF1bHQ9ZixlLnNhbml0aXplPWx9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZnVuY3Rpb24gbyh0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfWZ1bmN0aW9uIGkodCxlKXt0LnNldEF0dHJpYnV0ZShlLCEoInRydWUiPT09dC5nZXRBdHRyaWJ1dGUoZSkpKX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIGw9ImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmInN5bWJvbCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/InN5bWJvbCI6dHlwZW9mIHR9LGE9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsInZhbHVlImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxyLmtleSxyKX19cmV0dXJuIGZ1bmN0aW9uKGUsbixyKXtyZXR1cm4gbiYmdChlLnByb3RvdHlwZSxuKSxyJiZ0KGUsciksZX19KCkscz1uKDI1KSx1PXIocyksYz1uKDEwNiksZj1yKGMpLGg9MCxwPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXt2YXIgbj10aGlzO28odGhpcyx0KSx0aGlzLnNlbGVjdD1lLHRoaXMuY29udGFpbmVyPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNwYW4iKSx0aGlzLmJ1aWxkUGlja2VyKCksdGhpcy5zZWxlY3Quc3R5bGUuZGlzcGxheT0ibm9uZSIsdGhpcy5zZWxlY3QucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5jb250YWluZXIsdGhpcy5zZWxlY3QpLHRoaXMubGFiZWwuYWRkRXZlbnRMaXN0ZW5lcigibW91c2Vkb3duIixmdW5jdGlvbigpe24udG9nZ2xlUGlja2VyKCl9KSx0aGlzLmxhYmVsLmFkZEV2ZW50TGlzdGVuZXIoImtleWRvd24iLGZ1bmN0aW9uKHQpe3N3aXRjaCh0LmtleUNvZGUpe2Nhc2UgdS5kZWZhdWx0LmtleXMuRU5URVI6bi50b2dnbGVQaWNrZXIoKTticmVhaztjYXNlIHUuZGVmYXVsdC5rZXlzLkVTQ0FQRTpuLmVzY2FwZSgpLHQucHJldmVudERlZmF1bHQoKX19KSx0aGlzLnNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCJjaGFuZ2UiLHRoaXMudXBkYXRlLmJpbmQodGhpcykpfXJldHVybiBhKHQsW3trZXk6InRvZ2dsZVBpY2tlciIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QudG9nZ2xlKCJxbC1leHBhbmRlZCIpLGkodGhpcy5sYWJlbCwiYXJpYS1leHBhbmRlZCIpLGkodGhpcy5vcHRpb25zLCJhcmlhLWhpZGRlbiIpfX0se2tleToiYnVpbGRJdGVtIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3BhbiIpO3JldHVybiBuLnRhYkluZGV4PSIwIixuLnNldEF0dHJpYnV0ZSgicm9sZSIsImJ1dHRvbiIpLG4uY2xhc3NMaXN0LmFkZCgicWwtcGlja2VyLWl0ZW0iKSx0Lmhhc0F0dHJpYnV0ZSgidmFsdWUiKSYmbi5zZXRBdHRyaWJ1dGUoImRhdGEtdmFsdWUiLHQuZ2V0QXR0cmlidXRlKCJ2YWx1ZSIpKSx0LnRleHRDb250ZW50JiZuLnNldEF0dHJpYnV0ZSgiZGF0YS1sYWJlbCIsdC50ZXh0Q29udGVudCksbi5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsZnVuY3Rpb24oKXtlLnNlbGVjdEl0ZW0obiwhMCl9KSxuLmFkZEV2ZW50TGlzdGVuZXIoImtleWRvd24iLGZ1bmN0aW9uKHQpe3N3aXRjaCh0LmtleUNvZGUpe2Nhc2UgdS5kZWZhdWx0LmtleXMuRU5URVI6ZS5zZWxlY3RJdGVtKG4sITApLHQucHJldmVudERlZmF1bHQoKTticmVhaztjYXNlIHUuZGVmYXVsdC5rZXlzLkVTQ0FQRTplLmVzY2FwZSgpLHQucHJldmVudERlZmF1bHQoKX19KSxufX0se2tleToiYnVpbGRMYWJlbCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzcGFuIik7cmV0dXJuIHQuY2xhc3NMaXN0LmFkZCgicWwtcGlja2VyLWxhYmVsIiksdC5pbm5lckhUTUw9Zi5kZWZhdWx0LHQudGFiSW5kZXg9IjAiLHQuc2V0QXR0cmlidXRlKCJyb2xlIiwiYnV0dG9uIiksdC5zZXRBdHRyaWJ1dGUoImFyaWEtZXhwYW5kZWQiLCJmYWxzZSIpLHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHQpLHR9fSx7a2V5OiJidWlsZE9wdGlvbnMiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNwYW4iKTtlLmNsYXNzTGlzdC5hZGQoInFsLXBpY2tlci1vcHRpb25zIiksZS5zZXRBdHRyaWJ1dGUoImFyaWEtaGlkZGVuIiwidHJ1ZSIpLGUudGFiSW5kZXg9Ii0xIixlLmlkPSJxbC1waWNrZXItb3B0aW9ucy0iK2gsaCs9MSx0aGlzLmxhYmVsLnNldEF0dHJpYnV0ZSgiYXJpYS1jb250cm9scyIsZS5pZCksdGhpcy5vcHRpb25zPWUsW10uc2xpY2UuY2FsbCh0aGlzLnNlbGVjdC5vcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uKG4pe3ZhciByPXQuYnVpbGRJdGVtKG4pO2UuYXBwZW5kQ2hpbGQociksITA9PT1uLnNlbGVjdGVkJiZ0LnNlbGVjdEl0ZW0ocil9KSx0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChlKX19LHtrZXk6ImJ1aWxkUGlja2VyIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7W10uc2xpY2UuY2FsbCh0aGlzLnNlbGVjdC5hdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3QuY29udGFpbmVyLnNldEF0dHJpYnV0ZShlLm5hbWUsZS52YWx1ZSl9KSx0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCJxbC1waWNrZXIiKSx0aGlzLmxhYmVsPXRoaXMuYnVpbGRMYWJlbCgpLHRoaXMuYnVpbGRPcHRpb25zKCl9fSx7a2V5OiJlc2NhcGUiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLmNsb3NlKCksc2V0VGltZW91dChmdW5jdGlvbigpe3JldHVybiB0LmxhYmVsLmZvY3VzKCl9LDEpfX0se2tleToiY2xvc2UiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5jb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgicWwtZXhwYW5kZWQiKSx0aGlzLmxhYmVsLnNldEF0dHJpYnV0ZSgiYXJpYS1leHBhbmRlZCIsImZhbHNlIiksdGhpcy5vcHRpb25zLnNldEF0dHJpYnV0ZSgiYXJpYS1oaWRkZW4iLCJ0cnVlIil9fSx7a2V5OiJzZWxlY3RJdGVtIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdLG49dGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcigiLnFsLXNlbGVjdGVkIik7aWYodCE9PW4mJihudWxsIT1uJiZuLmNsYXNzTGlzdC5yZW1vdmUoInFsLXNlbGVjdGVkIiksbnVsbCE9dCYmKHQuY2xhc3NMaXN0LmFkZCgicWwtc2VsZWN0ZWQiKSx0aGlzLnNlbGVjdC5zZWxlY3RlZEluZGV4PVtdLmluZGV4T2YuY2FsbCh0LnBhcmVudE5vZGUuY2hpbGRyZW4sdCksdC5oYXNBdHRyaWJ1dGUoImRhdGEtdmFsdWUiKT90aGlzLmxhYmVsLnNldEF0dHJpYnV0ZSgiZGF0YS12YWx1ZSIsdC5nZXRBdHRyaWJ1dGUoImRhdGEtdmFsdWUiKSk6dGhpcy5sYWJlbC5yZW1vdmVBdHRyaWJ1dGUoImRhdGEtdmFsdWUiKSx0Lmhhc0F0dHJpYnV0ZSgiZGF0YS1sYWJlbCIpP3RoaXMubGFiZWwuc2V0QXR0cmlidXRlKCJkYXRhLWxhYmVsIix0LmdldEF0dHJpYnV0ZSgiZGF0YS1sYWJlbCIpKTp0aGlzLmxhYmVsLnJlbW92ZUF0dHJpYnV0ZSgiZGF0YS1sYWJlbCIpLGUpKSl7aWYoImZ1bmN0aW9uIj09dHlwZW9mIEV2ZW50KXRoaXMuc2VsZWN0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCJjaGFuZ2UiKSk7ZWxzZSBpZigib2JqZWN0Ij09PSgidW5kZWZpbmVkIj09dHlwZW9mIEV2ZW50PyJ1bmRlZmluZWQiOmwoRXZlbnQpKSl7dmFyIHI9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoIkV2ZW50Iik7ci5pbml0RXZlbnQoImNoYW5nZSIsITAsITApLHRoaXMuc2VsZWN0LmRpc3BhdGNoRXZlbnQocil9dGhpcy5jbG9zZSgpfX19LHtrZXk6InVwZGF0ZSIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD12b2lkIDA7aWYodGhpcy5zZWxlY3Quc2VsZWN0ZWRJbmRleD4tMSl7dmFyIGU9dGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcigiLnFsLXBpY2tlci1vcHRpb25zIikuY2hpbGRyZW5bdGhpcy5zZWxlY3Quc2VsZWN0ZWRJbmRleF07dD10aGlzLnNlbGVjdC5vcHRpb25zW3RoaXMuc2VsZWN0LnNlbGVjdGVkSW5kZXhdLHRoaXMuc2VsZWN0SXRlbShlKX1lbHNlIHRoaXMuc2VsZWN0SXRlbShudWxsKTt2YXIgbj1udWxsIT10JiZ0IT09dGhpcy5zZWxlY3QucXVlcnlTZWxlY3Rvcigib3B0aW9uW3NlbGVjdGVkXSIpO3RoaXMubGFiZWwuY2xhc3NMaXN0LnRvZ2dsZSgicWwtYWN0aXZlIixuKX19XSksdH0oKTtlLmRlZmF1bHQ9cH0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKHQpe3ZhciBlPWEuZmluZCh0KTtpZihudWxsPT1lKXRyeXtlPWEuY3JlYXRlKHQpfWNhdGNoKG4pe2U9YS5jcmVhdGUoYS5TY29wZS5JTkxJTkUpLFtdLnNsaWNlLmNhbGwodC5jaGlsZE5vZGVzKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2UuZG9tTm9kZS5hcHBlbmRDaGlsZCh0KX0pLHQucGFyZW50Tm9kZSYmdC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChlLmRvbU5vZGUsdCksZS5hdHRhY2goKX1yZXR1cm4gZX12YXIgbz10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8ZnVuY3Rpb24oKXt2YXIgdD1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24odCxlKXt0Ll9fcHJvdG9fXz1lfXx8ZnVuY3Rpb24odCxlKXtmb3IodmFyIG4gaW4gZSllLmhhc093blByb3BlcnR5KG4pJiYodFtuXT1lW25dKX07cmV0dXJuIGZ1bmN0aW9uKGUsbil7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX10KGUsbiksZS5wcm90b3R5cGU9bnVsbD09PW4/T2JqZWN0LmNyZWF0ZShuKTooci5wcm90b3R5cGU9bi5wcm90b3R5cGUsbmV3IHIpfX0oKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIGk9big0NyksbD1uKDI3KSxhPW4oMSkscz1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKGUpe3ZhciBuPXQuY2FsbCh0aGlzLGUpfHx0aGlzO3JldHVybiBuLmJ1aWxkKCksbn1yZXR1cm4gbyhlLHQpLGUucHJvdG90eXBlLmFwcGVuZENoaWxkPWZ1bmN0aW9uKHQpe3RoaXMuaW5zZXJ0QmVmb3JlKHQpfSxlLnByb3RvdHlwZS5hdHRhY2g9ZnVuY3Rpb24oKXt0LnByb3RvdHlwZS5hdHRhY2guY2FsbCh0aGlzKSx0aGlzLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24odCl7dC5hdHRhY2goKX0pfSxlLnByb3RvdHlwZS5idWlsZD1mdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5jaGlsZHJlbj1uZXcgaS5kZWZhdWx0LFtdLnNsaWNlLmNhbGwodGhpcy5kb21Ob2RlLmNoaWxkTm9kZXMpLnJldmVyc2UoKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3RyeXt2YXIgbj1yKGUpO3QuaW5zZXJ0QmVmb3JlKG4sdC5jaGlsZHJlbi5oZWFkfHx2b2lkIDApfWNhdGNoKHQpe2lmKHQgaW5zdGFuY2VvZiBhLlBhcmNobWVudEVycm9yKXJldHVybjt0aHJvdyB0fX0pfSxlLnByb3RvdHlwZS5kZWxldGVBdD1mdW5jdGlvbih0LGUpe2lmKDA9PT10JiZlPT09dGhpcy5sZW5ndGgoKSlyZXR1cm4gdGhpcy5yZW1vdmUoKTt0aGlzLmNoaWxkcmVuLmZvckVhY2hBdCh0LGUsZnVuY3Rpb24odCxlLG4pe3QuZGVsZXRlQXQoZSxuKX0pfSxlLnByb3RvdHlwZS5kZXNjZW5kYW50PWZ1bmN0aW9uKHQsbil7dmFyIHI9dGhpcy5jaGlsZHJlbi5maW5kKG4pLG89clswXSxpPXJbMV07cmV0dXJuIG51bGw9PXQuYmxvdE5hbWUmJnQobyl8fG51bGwhPXQuYmxvdE5hbWUmJm8gaW5zdGFuY2VvZiB0P1tvLGldOm8gaW5zdGFuY2VvZiBlP28uZGVzY2VuZGFudCh0LGkpOltudWxsLC0xXX0sZS5wcm90b3R5cGUuZGVzY2VuZGFudHM9ZnVuY3Rpb24odCxuLHIpe3ZvaWQgMD09PW4mJihuPTApLHZvaWQgMD09PXImJihyPU51bWJlci5NQVhfVkFMVUUpO3ZhciBvPVtdLGk9cjtyZXR1cm4gdGhpcy5jaGlsZHJlbi5mb3JFYWNoQXQobixyLGZ1bmN0aW9uKG4scixsKXsobnVsbD09dC5ibG90TmFtZSYmdChuKXx8bnVsbCE9dC5ibG90TmFtZSYmbiBpbnN0YW5jZW9mIHQpJiZvLnB1c2gobiksbiBpbnN0YW5jZW9mIGUmJihvPW8uY29uY2F0KG4uZGVzY2VuZGFudHModCxyLGkpKSksaS09bH0pLG99LGUucHJvdG90eXBlLmRldGFjaD1mdW5jdGlvbigpe3RoaXMuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbih0KXt0LmRldGFjaCgpfSksdC5wcm90b3R5cGUuZGV0YWNoLmNhbGwodGhpcyl9LGUucHJvdG90eXBlLmZvcm1hdEF0PWZ1bmN0aW9uKHQsZSxuLHIpe3RoaXMuY2hpbGRyZW4uZm9yRWFjaEF0KHQsZSxmdW5jdGlvbih0LGUsbyl7dC5mb3JtYXRBdChlLG8sbixyKX0pfSxlLnByb3RvdHlwZS5pbnNlcnRBdD1mdW5jdGlvbih0LGUsbil7dmFyIHI9dGhpcy5jaGlsZHJlbi5maW5kKHQpLG89clswXSxpPXJbMV07aWYobylvLmluc2VydEF0KGksZSxuKTtlbHNle3ZhciBsPW51bGw9PW4/YS5jcmVhdGUoInRleHQiLGUpOmEuY3JlYXRlKGUsbik7dGhpcy5hcHBlbmRDaGlsZChsKX19LGUucHJvdG90eXBlLmluc2VydEJlZm9yZT1mdW5jdGlvbih0LGUpe2lmKG51bGwhPXRoaXMuc3RhdGljcy5hbGxvd2VkQ2hpbGRyZW4mJiF0aGlzLnN0YXRpY3MuYWxsb3dlZENoaWxkcmVuLnNvbWUoZnVuY3Rpb24oZSl7cmV0dXJuIHQgaW5zdGFuY2VvZiBlfSkpdGhyb3cgbmV3IGEuUGFyY2htZW50RXJyb3IoIkNhbm5vdCBpbnNlcnQgIit0LnN0YXRpY3MuYmxvdE5hbWUrIiBpbnRvICIrdGhpcy5zdGF0aWNzLmJsb3ROYW1lKTt0Lmluc2VydEludG8odGhpcyxlKX0sZS5wcm90b3R5cGUubGVuZ3RoPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2hpbGRyZW4ucmVkdWNlKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQrZS5sZW5ndGgoKX0sMCl9LGUucHJvdG90eXBlLm1vdmVDaGlsZHJlbj1mdW5jdGlvbih0LGUpe3RoaXMuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihuKXt0Lmluc2VydEJlZm9yZShuLGUpfSl9LGUucHJvdG90eXBlLm9wdGltaXplPWZ1bmN0aW9uKGUpe2lmKHQucHJvdG90eXBlLm9wdGltaXplLmNhbGwodGhpcyxlKSwwPT09dGhpcy5jaGlsZHJlbi5sZW5ndGgpaWYobnVsbCE9dGhpcy5zdGF0aWNzLmRlZmF1bHRDaGlsZCl7dmFyIG49YS5jcmVhdGUodGhpcy5zdGF0aWNzLmRlZmF1bHRDaGlsZCk7dGhpcy5hcHBlbmRDaGlsZChuKSxuLm9wdGltaXplKGUpfWVsc2UgdGhpcy5yZW1vdmUoKX0sZS5wcm90b3R5cGUucGF0aD1mdW5jdGlvbih0LG4pe3ZvaWQgMD09PW4mJihuPSExKTt2YXIgcj10aGlzLmNoaWxkcmVuLmZpbmQodCxuKSxvPXJbMF0saT1yWzFdLGw9W1t0aGlzLHRdXTtyZXR1cm4gbyBpbnN0YW5jZW9mIGU/bC5jb25jYXQoby5wYXRoKGksbikpOihudWxsIT1vJiZsLnB1c2goW28saV0pLGwpfSxlLnByb3RvdHlwZS5yZW1vdmVDaGlsZD1mdW5jdGlvbih0KXt0aGlzLmNoaWxkcmVuLnJlbW92ZSh0KX0sZS5wcm90b3R5cGUucmVwbGFjZT1mdW5jdGlvbihuKXtuIGluc3RhbmNlb2YgZSYmbi5tb3ZlQ2hpbGRyZW4odGhpcyksdC5wcm90b3R5cGUucmVwbGFjZS5jYWxsKHRoaXMsbil9LGUucHJvdG90eXBlLnNwbGl0PWZ1bmN0aW9uKHQsZSl7aWYodm9pZCAwPT09ZSYmKGU9ITEpLCFlKXtpZigwPT09dClyZXR1cm4gdGhpcztpZih0PT09dGhpcy5sZW5ndGgoKSlyZXR1cm4gdGhpcy5uZXh0fXZhciBuPXRoaXMuY2xvbmUoKTtyZXR1cm4gdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKG4sdGhpcy5uZXh0KSx0aGlzLmNoaWxkcmVuLmZvckVhY2hBdCh0LHRoaXMubGVuZ3RoKCksZnVuY3Rpb24odCxyLG8pe3Q9dC5zcGxpdChyLGUpLG4uYXBwZW5kQ2hpbGQodCl9KSxufSxlLnByb3RvdHlwZS51bndyYXA9ZnVuY3Rpb24oKXt0aGlzLm1vdmVDaGlsZHJlbih0aGlzLnBhcmVudCx0aGlzLm5leHQpLHRoaXMucmVtb3ZlKCl9LGUucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMsbz1bXSxpPVtdO3QuZm9yRWFjaChmdW5jdGlvbih0KXt0LnRhcmdldD09PW4uZG9tTm9kZSYmImNoaWxkTGlzdCI9PT10LnR5cGUmJihvLnB1c2guYXBwbHkobyx0LmFkZGVkTm9kZXMpLGkucHVzaC5hcHBseShpLHQucmVtb3ZlZE5vZGVzKSl9KSxpLmZvckVhY2goZnVuY3Rpb24odCl7aWYoIShudWxsIT10LnBhcmVudE5vZGUmJiJJRlJBTUUiIT09dC50YWdOYW1lJiZkb2N1bWVudC5ib2R5LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHQpJk5vZGUuRE9DVU1FTlRfUE9TSVRJT05fQ09OVEFJTkVEX0JZKSl7dmFyIGU9YS5maW5kKHQpO251bGwhPWUmJihudWxsIT1lLmRvbU5vZGUucGFyZW50Tm9kZSYmZS5kb21Ob2RlLnBhcmVudE5vZGUhPT1uLmRvbU5vZGV8fGUuZGV0YWNoKCkpfX0pLG8uZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiB0LnBhcmVudE5vZGU9PW4uZG9tTm9kZX0pLnNvcnQoZnVuY3Rpb24odCxlKXtyZXR1cm4gdD09PWU/MDp0LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGUpJk5vZGUuRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HPzE6LTF9KS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBlPW51bGw7bnVsbCE9dC5uZXh0U2libGluZyYmKGU9YS5maW5kKHQubmV4dFNpYmxpbmcpKTt2YXIgbz1yKHQpO28ubmV4dD09ZSYmbnVsbCE9by5uZXh0fHwobnVsbCE9by5wYXJlbnQmJm8ucGFyZW50LnJlbW92ZUNoaWxkKG4pLG4uaW5zZXJ0QmVmb3JlKG8sZXx8dm9pZCAwKSl9KX0sZX0obC5kZWZhdWx0KTtlLmRlZmF1bHQ9c30sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8ZnVuY3Rpb24oKXt2YXIgdD1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24odCxlKXt0Ll9fcHJvdG9fXz1lfXx8ZnVuY3Rpb24odCxlKXtmb3IodmFyIG4gaW4gZSllLmhhc093blByb3BlcnR5KG4pJiYodFtuXT1lW25dKX07cmV0dXJuIGZ1bmN0aW9uKGUsbil7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX10KGUsbiksZS5wcm90b3R5cGU9bnVsbD09PW4/T2JqZWN0LmNyZWF0ZShuKTooci5wcm90b3R5cGU9bi5wcm90b3R5cGUsbmV3IHIpfX0oKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG89bigxMSksaT1uKDI4KSxsPW4oMTcpLGE9bigxKSxzPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoZSl7dmFyIG49dC5jYWxsKHRoaXMsZSl8fHRoaXM7cmV0dXJuIG4uYXR0cmlidXRlcz1uZXcgaS5kZWZhdWx0KG4uZG9tTm9kZSksbn1yZXR1cm4gcihlLHQpLGUuZm9ybWF0cz1mdW5jdGlvbih0KXtyZXR1cm4ic3RyaW5nIj09dHlwZW9mIHRoaXMudGFnTmFtZXx8KEFycmF5LmlzQXJyYXkodGhpcy50YWdOYW1lKT90LnRhZ05hbWUudG9Mb3dlckNhc2UoKTp2b2lkIDApfSxlLnByb3RvdHlwZS5mb3JtYXQ9ZnVuY3Rpb24odCxlKXt2YXIgbj1hLnF1ZXJ5KHQpO24gaW5zdGFuY2VvZiBvLmRlZmF1bHQ/dGhpcy5hdHRyaWJ1dGVzLmF0dHJpYnV0ZShuLGUpOmUmJihudWxsPT1ufHx0PT09dGhpcy5zdGF0aWNzLmJsb3ROYW1lJiZ0aGlzLmZvcm1hdHMoKVt0XT09PWV8fHRoaXMucmVwbGFjZVdpdGgodCxlKSl9LGUucHJvdG90eXBlLmZvcm1hdHM9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmF0dHJpYnV0ZXMudmFsdWVzKCksZT10aGlzLnN0YXRpY3MuZm9ybWF0cyh0aGlzLmRvbU5vZGUpO3JldHVybiBudWxsIT1lJiYodFt0aGlzLnN0YXRpY3MuYmxvdE5hbWVdPWUpLHR9LGUucHJvdG90eXBlLnJlcGxhY2VXaXRoPWZ1bmN0aW9uKGUsbil7dmFyIHI9dC5wcm90b3R5cGUucmVwbGFjZVdpdGguY2FsbCh0aGlzLGUsbik7cmV0dXJuIHRoaXMuYXR0cmlidXRlcy5jb3B5KHIpLHJ9LGUucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbihlLG4pe3ZhciByPXRoaXM7dC5wcm90b3R5cGUudXBkYXRlLmNhbGwodGhpcyxlLG4pLGUuc29tZShmdW5jdGlvbih0KXtyZXR1cm4gdC50YXJnZXQ9PT1yLmRvbU5vZGUmJiJhdHRyaWJ1dGVzIj09PXQudHlwZX0pJiZ0aGlzLmF0dHJpYnV0ZXMuYnVpbGQoKX0sZS5wcm90b3R5cGUud3JhcD1mdW5jdGlvbihuLHIpe3ZhciBvPXQucHJvdG90eXBlLndyYXAuY2FsbCh0aGlzLG4scik7cmV0dXJuIG8gaW5zdGFuY2VvZiBlJiZvLnN0YXRpY3Muc2NvcGU9PT10aGlzLnN0YXRpY3Muc2NvcGUmJnRoaXMuYXR0cmlidXRlcy5tb3ZlKG8pLG99LGV9KGwuZGVmYXVsdCk7ZS5kZWZhdWx0PXN9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dmFyIHI9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fGZ1bmN0aW9uKCl7dmFyIHQ9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKHQsZSl7dC5fX3Byb3RvX189ZX18fGZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuIGluIGUpZS5oYXNPd25Qcm9wZXJ0eShuKSYmKHRbbl09ZVtuXSl9O3JldHVybiBmdW5jdGlvbihlLG4pe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9dChlLG4pLGUucHJvdG90eXBlPW51bGw9PT1uP09iamVjdC5jcmVhdGUobik6KHIucHJvdG90eXBlPW4ucHJvdG90eXBlLG5ldyByKX19KCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMjcpLGk9bigxKSxsPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gbnVsbCE9PXQmJnQuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybiByKGUsdCksZS52YWx1ZT1mdW5jdGlvbih0KXtyZXR1cm4hMH0sZS5wcm90b3R5cGUuaW5kZXg9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5kb21Ob2RlPT09dHx8dGhpcy5kb21Ob2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHQpJk5vZGUuRE9DVU1FTlRfUE9TSVRJT05fQ09OVEFJTkVEX0JZP01hdGgubWluKGUsMSk6LTF9LGUucHJvdG90eXBlLnBvc2l0aW9uPWZ1bmN0aW9uKHQsZSl7dmFyIG49W10uaW5kZXhPZi5jYWxsKHRoaXMucGFyZW50LmRvbU5vZGUuY2hpbGROb2Rlcyx0aGlzLmRvbU5vZGUpO3JldHVybiB0PjAmJihuKz0xKSxbdGhpcy5wYXJlbnQuZG9tTm9kZSxuXX0sZS5wcm90b3R5cGUudmFsdWU9ZnVuY3Rpb24oKXtyZXR1cm4gdD17fSx0W3RoaXMuc3RhdGljcy5ibG90TmFtZV09dGhpcy5zdGF0aWNzLnZhbHVlKHRoaXMuZG9tTm9kZSl8fCEwLHQ7dmFyIHR9LGUuc2NvcGU9aS5TY29wZS5JTkxJTkVfQkxPVCxlfShvLmRlZmF1bHQpO2UuZGVmYXVsdD1sfSxmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcih0KXt0aGlzLm9wcz10LHRoaXMuaW5kZXg9MCx0aGlzLm9mZnNldD0wfXZhciBvPW4oMTIpLGk9bigyKSxsPXthdHRyaWJ1dGVzOntjb21wb3NlOmZ1bmN0aW9uKHQsZSxuKXsib2JqZWN0IiE9dHlwZW9mIHQmJih0PXt9KSwib2JqZWN0IiE9dHlwZW9mIGUmJihlPXt9KTt2YXIgcj1pKCEwLHt9LGUpO258fChyPU9iamVjdC5rZXlzKHIpLnJlZHVjZShmdW5jdGlvbih0LGUpe3JldHVybiBudWxsIT1yW2VdJiYodFtlXT1yW2VdKSx0fSx7fSkpO2Zvcih2YXIgbyBpbiB0KXZvaWQgMCE9PXRbb10mJnZvaWQgMD09PWVbb10mJihyW29dPXRbb10pO3JldHVybiBPYmplY3Qua2V5cyhyKS5sZW5ndGg+MD9yOnZvaWQgMH0sZGlmZjpmdW5jdGlvbih0LGUpeyJvYmplY3QiIT10eXBlb2YgdCYmKHQ9e30pLCJvYmplY3QiIT10eXBlb2YgZSYmKGU9e30pO3ZhciBuPU9iamVjdC5rZXlzKHQpLmNvbmNhdChPYmplY3Qua2V5cyhlKSkucmVkdWNlKGZ1bmN0aW9uKG4scil7cmV0dXJuIG8odFtyXSxlW3JdKXx8KG5bcl09dm9pZCAwPT09ZVtyXT9udWxsOmVbcl0pLG59LHt9KTtyZXR1cm4gT2JqZWN0LmtleXMobikubGVuZ3RoPjA/bjp2b2lkIDB9LHRyYW5zZm9ybTpmdW5jdGlvbih0LGUsbil7aWYoIm9iamVjdCIhPXR5cGVvZiB0KXJldHVybiBlO2lmKCJvYmplY3QiPT10eXBlb2YgZSl7aWYoIW4pcmV0dXJuIGU7dmFyIHI9T2JqZWN0LmtleXMoZSkucmVkdWNlKGZ1bmN0aW9uKG4scil7cmV0dXJuIHZvaWQgMD09PXRbcl0mJihuW3JdPWVbcl0pLG59LHt9KTtyZXR1cm4gT2JqZWN0LmtleXMocikubGVuZ3RoPjA/cjp2b2lkIDB9fX0saXRlcmF0b3I6ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyByKHQpfSxsZW5ndGg6ZnVuY3Rpb24odCl7cmV0dXJuIm51bWJlciI9PXR5cGVvZiB0LmRlbGV0ZT90LmRlbGV0ZToibnVtYmVyIj09dHlwZW9mIHQucmV0YWluP3QucmV0YWluOiJzdHJpbmciPT10eXBlb2YgdC5pbnNlcnQ/dC5pbnNlcnQubGVuZ3RoOjF9fTtyLnByb3RvdHlwZS5oYXNOZXh0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGVla0xlbmd0aCgpPDEvMH0sci5wcm90b3R5cGUubmV4dD1mdW5jdGlvbih0KXt0fHwodD0xLzApO3ZhciBlPXRoaXMub3BzW3RoaXMuaW5kZXhdO2lmKGUpe3ZhciBuPXRoaXMub2Zmc2V0LHI9bC5sZW5ndGgoZSk7aWYodD49ci1uPyh0PXItbix0aGlzLmluZGV4Kz0xLHRoaXMub2Zmc2V0PTApOnRoaXMub2Zmc2V0Kz10LCJudW1iZXIiPT10eXBlb2YgZS5kZWxldGUpcmV0dXJue2RlbGV0ZTp0fTt2YXIgbz17fTtyZXR1cm4gZS5hdHRyaWJ1dGVzJiYoby5hdHRyaWJ1dGVzPWUuYXR0cmlidXRlcyksIm51bWJlciI9PXR5cGVvZiBlLnJldGFpbj9vLnJldGFpbj10OiJzdHJpbmciPT10eXBlb2YgZS5pbnNlcnQ/by5pbnNlcnQ9ZS5pbnNlcnQuc3Vic3RyKG4sdCk6by5pbnNlcnQ9ZS5pbnNlcnQsb31yZXR1cm57cmV0YWluOjEvMH19LHIucHJvdG90eXBlLnBlZWs9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vcHNbdGhpcy5pbmRleF19LHIucHJvdG90eXBlLnBlZWtMZW5ndGg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vcHNbdGhpcy5pbmRleF0/bC5sZW5ndGgodGhpcy5vcHNbdGhpcy5pbmRleF0pLXRoaXMub2Zmc2V0OjEvMH0sci5wcm90b3R5cGUucGVla1R5cGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vcHNbdGhpcy5pbmRleF0/Im51bWJlciI9PXR5cGVvZiB0aGlzLm9wc1t0aGlzLmluZGV4XS5kZWxldGU/ImRlbGV0ZSI6Im51bWJlciI9PXR5cGVvZiB0aGlzLm9wc1t0aGlzLmluZGV4XS5yZXRhaW4/InJldGFpbiI6Imluc2VydCI6InJldGFpbiJ9LHQuZXhwb3J0cz1sfSxmdW5jdGlvbih0LGUpe3ZhciBuPWZ1bmN0aW9uKCl7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHQodCxlKXtyZXR1cm4gbnVsbCE9ZSYmdCBpbnN0YW5jZW9mIGV9ZnVuY3Rpb24gZShuLHIsbyxpLGMpe2Z1bmN0aW9uIGYobixvKXtpZihudWxsPT09bilyZXR1cm4gbnVsbDtpZigwPT09bylyZXR1cm4gbjt2YXIgeSx2O2lmKCJvYmplY3QiIT10eXBlb2YgbilyZXR1cm4gbjtpZih0KG4sYSkpeT1uZXcgYTtlbHNlIGlmKHQobixzKSl5PW5ldyBzO2Vsc2UgaWYodChuLHUpKXk9bmV3IHUoZnVuY3Rpb24odCxlKXtuLnRoZW4oZnVuY3Rpb24oZSl7dChmKGUsby0xKSl9LGZ1bmN0aW9uKHQpe2UoZih0LG8tMSkpfSl9KTtlbHNlIGlmKGUuX19pc0FycmF5KG4pKXk9W107ZWxzZSBpZihlLl9faXNSZWdFeHAobikpeT1uZXcgUmVnRXhwKG4uc291cmNlLGwobikpLG4ubGFzdEluZGV4JiYoeS5sYXN0SW5kZXg9bi5sYXN0SW5kZXgpO2Vsc2UgaWYoZS5fX2lzRGF0ZShuKSl5PW5ldyBEYXRlKG4uZ2V0VGltZSgpKTtlbHNle2lmKGQmJkJ1ZmZlci5pc0J1ZmZlcihuKSlyZXR1cm4geT1uZXcgQnVmZmVyKG4ubGVuZ3RoKSxuLmNvcHkoeSkseTt0KG4sRXJyb3IpP3k9T2JqZWN0LmNyZWF0ZShuKTp2b2lkIDA9PT1pPyh2PU9iamVjdC5nZXRQcm90b3R5cGVPZihuKSx5PU9iamVjdC5jcmVhdGUodikpOih5PU9iamVjdC5jcmVhdGUoaSksdj1pKX1pZihyKXt2YXIgYj1oLmluZGV4T2Yobik7aWYoLTEhPWIpcmV0dXJuIHBbYl07aC5wdXNoKG4pLHAucHVzaCh5KX10KG4sYSkmJm4uZm9yRWFjaChmdW5jdGlvbih0LGUpe3ZhciBuPWYoZSxvLTEpLHI9Zih0LG8tMSk7eS5zZXQobixyKX0pLHQobixzKSYmbi5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBlPWYodCxvLTEpO3kuYWRkKGUpfSk7Zm9yKHZhciBnIGluIG4pe3ZhciBtO3YmJihtPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodixnKSksbSYmbnVsbD09bS5zZXR8fCh5W2ddPWYobltnXSxvLTEpKX1pZihPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKWZvcih2YXIgXz1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG4pLGc9MDtnPF8ubGVuZ3RoO2crKyl7dmFyIE89X1tnXSx3PU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobixPKTsoIXd8fHcuZW51bWVyYWJsZXx8YykmJih5W09dPWYobltPXSxvLTEpLHcuZW51bWVyYWJsZXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHksTyx7ZW51bWVyYWJsZTohMX0pKX1pZihjKWZvcih2YXIgeD1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhuKSxnPTA7Zzx4Lmxlbmd0aDtnKyspe3ZhciBrPXhbZ10sdz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG4sayk7dyYmdy5lbnVtZXJhYmxlfHwoeVtrXT1mKG5ba10sby0xKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoeSxrLHtlbnVtZXJhYmxlOiExfSkpfXJldHVybiB5fSJvYmplY3QiPT10eXBlb2YgciYmKG89ci5kZXB0aCxpPXIucHJvdG90eXBlLGM9ci5pbmNsdWRlTm9uRW51bWVyYWJsZSxyPXIuY2lyY3VsYXIpO3ZhciBoPVtdLHA9W10sZD0idW5kZWZpbmVkIiE9dHlwZW9mIEJ1ZmZlcjtyZXR1cm4gdm9pZCAwPT09ciYmKHI9ITApLHZvaWQgMD09PW8mJihvPTEvMCksZihuLG8pfWZ1bmN0aW9uIG4odCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KX1mdW5jdGlvbiByKHQpe3JldHVybiJvYmplY3QiPT10eXBlb2YgdCYmIltvYmplY3QgRGF0ZV0iPT09bih0KX1mdW5jdGlvbiBvKHQpe3JldHVybiJvYmplY3QiPT10eXBlb2YgdCYmIltvYmplY3QgQXJyYXldIj09PW4odCl9ZnVuY3Rpb24gaSh0KXtyZXR1cm4ib2JqZWN0Ij09dHlwZW9mIHQmJiJbb2JqZWN0IFJlZ0V4cF0iPT09bih0KX1mdW5jdGlvbiBsKHQpe3ZhciBlPSIiO3JldHVybiB0Lmdsb2JhbCYmKGUrPSJnIiksdC5pZ25vcmVDYXNlJiYoZSs9ImkiKSx0Lm11bHRpbGluZSYmKGUrPSJtIiksZX12YXIgYTt0cnl7YT1NYXB9Y2F0Y2godCl7YT1mdW5jdGlvbigpe319dmFyIHM7dHJ5e3M9U2V0fWNhdGNoKHQpe3M9ZnVuY3Rpb24oKXt9fXZhciB1O3RyeXt1PVByb21pc2V9Y2F0Y2godCl7dT1mdW5jdGlvbigpe319cmV0dXJuIGUuY2xvbmVQcm90b3R5cGU9ZnVuY3Rpb24odCl7aWYobnVsbD09PXQpcmV0dXJuIG51bGw7dmFyIGU9ZnVuY3Rpb24oKXt9O3JldHVybiBlLnByb3RvdHlwZT10LG5ldyBlfSxlLl9fb2JqVG9TdHI9bixlLl9faXNEYXRlPXIsZS5fX2lzQXJyYXk9byxlLl9faXNSZWdFeHA9aSxlLl9fZ2V0UmVnRXhwRmxhZ3M9bCxlfSgpOyJvYmplY3QiPT10eXBlb2YgdCYmdC5leHBvcnRzJiYodC5leHBvcnRzPW4pfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWZ1bmN0aW9uIG8odCl7aWYoQXJyYXkuaXNBcnJheSh0KSl7Zm9yKHZhciBlPTAsbj1BcnJheSh0Lmxlbmd0aCk7ZTx0Lmxlbmd0aDtlKyspbltlXT10W2VdO3JldHVybiBufXJldHVybiBBcnJheS5mcm9tKHQpfWZ1bmN0aW9uIGkodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1mdW5jdGlvbiBsKHQsZSl7dHJ5e2UucGFyZW50Tm9kZX1jYXRjaCh0KXtyZXR1cm4hMX1yZXR1cm4gZSBpbnN0YW5jZW9mIFRleHQmJihlPWUucGFyZW50Tm9kZSksdC5jb250YWlucyhlKX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PWUuUmFuZ2U9dm9pZCAwO3ZhciBhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe3ZhciBuPVtdLHI9ITAsbz0hMSxpPXZvaWQgMDt0cnl7Zm9yKHZhciBsLGE9dFtTeW1ib2wuaXRlcmF0b3JdKCk7IShyPShsPWEubmV4dCgpKS5kb25lKSYmKG4ucHVzaChsLnZhbHVlKSwhZXx8bi5sZW5ndGghPT1lKTtyPSEwKTt9Y2F0Y2godCl7bz0hMCxpPXR9ZmluYWxseXt0cnl7IXImJmEucmV0dXJuJiZhLnJldHVybigpfWZpbmFsbHl7aWYobyl0aHJvdyBpfX1yZXR1cm4gbn1yZXR1cm4gZnVuY3Rpb24oZSxuKXtpZihBcnJheS5pc0FycmF5KGUpKXJldHVybiBlO2lmKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoZSkpcmV0dXJuIHQoZSxuKTt0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIil9fSgpLHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsInZhbHVlImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxyLmtleSxyKX19cmV0dXJuIGZ1bmN0aW9uKGUsbixyKXtyZXR1cm4gbiYmdChlLnByb3RvdHlwZSxuKSxyJiZ0KGUsciksZX19KCksdT1uKDApLGM9cih1KSxmPW4oMjEpLGg9cihmKSxwPW4oMTIpLGQ9cihwKSx5PW4oOSksdj1yKHkpLGI9bigxMCksZz1yKGIpLG09KDAsZy5kZWZhdWx0KSgicXVpbGw6c2VsZWN0aW9uIiksXz1mdW5jdGlvbiB0KGUpe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTowO2kodGhpcyx0KSx0aGlzLmluZGV4PWUsdGhpcy5sZW5ndGg9bn0sTz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSxuKXt2YXIgcj10aGlzO2kodGhpcyx0KSx0aGlzLmVtaXR0ZXI9bix0aGlzLnNjcm9sbD1lLHRoaXMuY29tcG9zaW5nPSExLHRoaXMubW91c2VEb3duPSExLHRoaXMucm9vdD10aGlzLnNjcm9sbC5kb21Ob2RlLHRoaXMuY3Vyc29yPWMuZGVmYXVsdC5jcmVhdGUoImN1cnNvciIsdGhpcyksdGhpcy5sYXN0UmFuZ2U9dGhpcy5zYXZlZFJhbmdlPW5ldyBfKDAsMCksdGhpcy5oYW5kbGVDb21wb3NpdGlvbigpLHRoaXMuaGFuZGxlRHJhZ2dpbmcoKSx0aGlzLmVtaXR0ZXIubGlzdGVuRE9NKCJzZWxlY3Rpb25jaGFuZ2UiLGRvY3VtZW50LGZ1bmN0aW9uKCl7ci5tb3VzZURvd258fHNldFRpbWVvdXQoci51cGRhdGUuYmluZChyLHYuZGVmYXVsdC5zb3VyY2VzLlVTRVIpLDEpfSksdGhpcy5lbWl0dGVyLm9uKHYuZGVmYXVsdC5ldmVudHMuRURJVE9SX0NIQU5HRSxmdW5jdGlvbih0LGUpe3Q9PT12LmRlZmF1bHQuZXZlbnRzLlRFWFRfQ0hBTkdFJiZlLmxlbmd0aCgpPjAmJnIudXBkYXRlKHYuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCl9KSx0aGlzLmVtaXR0ZXIub24odi5kZWZhdWx0LmV2ZW50cy5TQ1JPTExfQkVGT1JFX1VQREFURSxmdW5jdGlvbigpe2lmKHIuaGFzRm9jdXMoKSl7dmFyIHQ9ci5nZXROYXRpdmVSYW5nZSgpO251bGwhPXQmJnQuc3RhcnQubm9kZSE9PXIuY3Vyc29yLnRleHROb2RlJiZyLmVtaXR0ZXIub25jZSh2LmRlZmF1bHQuZXZlbnRzLlNDUk9MTF9VUERBVEUsZnVuY3Rpb24oKXt0cnl7ci5zZXROYXRpdmVSYW5nZSh0LnN0YXJ0Lm5vZGUsdC5zdGFydC5vZmZzZXQsdC5lbmQubm9kZSx0LmVuZC5vZmZzZXQpfWNhdGNoKHQpe319KX19KSx0aGlzLmVtaXR0ZXIub24odi5kZWZhdWx0LmV2ZW50cy5TQ1JPTExfT1BUSU1JWkUsZnVuY3Rpb24odCxlKXtpZihlLnJhbmdlKXt2YXIgbj1lLnJhbmdlLG89bi5zdGFydE5vZGUsaT1uLnN0YXJ0T2Zmc2V0LGw9bi5lbmROb2RlLGE9bi5lbmRPZmZzZXQ7ci5zZXROYXRpdmVSYW5nZShvLGksbCxhKX19KSx0aGlzLnVwZGF0ZSh2LmRlZmF1bHQuc291cmNlcy5TSUxFTlQpfXJldHVybiBzKHQsW3trZXk6ImhhbmRsZUNvbXBvc2l0aW9uIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5yb290LmFkZEV2ZW50TGlzdGVuZXIoImNvbXBvc2l0aW9uc3RhcnQiLGZ1bmN0aW9uKCl7dC5jb21wb3Npbmc9ITB9KSx0aGlzLnJvb3QuYWRkRXZlbnRMaXN0ZW5lcigiY29tcG9zaXRpb25lbmQiLGZ1bmN0aW9uKCl7aWYodC5jb21wb3Npbmc9ITEsdC5jdXJzb3IucGFyZW50KXt2YXIgZT10LmN1cnNvci5yZXN0b3JlKCk7aWYoIWUpcmV0dXJuO3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0LnNldE5hdGl2ZVJhbmdlKGUuc3RhcnROb2RlLGUuc3RhcnRPZmZzZXQsZS5lbmROb2RlLGUuZW5kT2Zmc2V0KX0sMSl9fSl9fSx7a2V5OiJoYW5kbGVEcmFnZ2luZyIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuZW1pdHRlci5saXN0ZW5ET00oIm1vdXNlZG93biIsZG9jdW1lbnQuYm9keSxmdW5jdGlvbigpe3QubW91c2VEb3duPSEwfSksdGhpcy5lbWl0dGVyLmxpc3RlbkRPTSgibW91c2V1cCIsZG9jdW1lbnQuYm9keSxmdW5jdGlvbigpe3QubW91c2VEb3duPSExLHQudXBkYXRlKHYuZGVmYXVsdC5zb3VyY2VzLlVTRVIpfSl9fSx7a2V5OiJmb2N1cyIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmhhc0ZvY3VzKCl8fCh0aGlzLnJvb3QuZm9jdXMoKSx0aGlzLnNldFJhbmdlKHRoaXMuc2F2ZWRSYW5nZSkpfX0se2tleToiZm9ybWF0Iix2YWx1ZTpmdW5jdGlvbih0LGUpe2lmKG51bGw9PXRoaXMuc2Nyb2xsLndoaXRlbGlzdHx8dGhpcy5zY3JvbGwud2hpdGVsaXN0W3RdKXt0aGlzLnNjcm9sbC51cGRhdGUoKTt2YXIgbj10aGlzLmdldE5hdGl2ZVJhbmdlKCk7aWYobnVsbCE9biYmbi5uYXRpdmUuY29sbGFwc2VkJiYhYy5kZWZhdWx0LnF1ZXJ5KHQsYy5kZWZhdWx0LlNjb3BlLkJMT0NLKSl7aWYobi5zdGFydC5ub2RlIT09dGhpcy5jdXJzb3IudGV4dE5vZGUpe3ZhciByPWMuZGVmYXVsdC5maW5kKG4uc3RhcnQubm9kZSwhMSk7aWYobnVsbD09cilyZXR1cm47aWYociBpbnN0YW5jZW9mIGMuZGVmYXVsdC5MZWFmKXt2YXIgbz1yLnNwbGl0KG4uc3RhcnQub2Zmc2V0KTtyLnBhcmVudC5pbnNlcnRCZWZvcmUodGhpcy5jdXJzb3Isbyl9ZWxzZSByLmluc2VydEJlZm9yZSh0aGlzLmN1cnNvcixuLnN0YXJ0Lm5vZGUpO3RoaXMuY3Vyc29yLmF0dGFjaCgpfXRoaXMuY3Vyc29yLmZvcm1hdCh0LGUpLHRoaXMuc2Nyb2xsLm9wdGltaXplKCksdGhpcy5zZXROYXRpdmVSYW5nZSh0aGlzLmN1cnNvci50ZXh0Tm9kZSx0aGlzLmN1cnNvci50ZXh0Tm9kZS5kYXRhLmxlbmd0aCksdGhpcy51cGRhdGUoKX19fX0se2tleToiZ2V0Qm91bmRzIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MCxuPXRoaXMuc2Nyb2xsLmxlbmd0aCgpO3Q9TWF0aC5taW4odCxuLTEpLGU9TWF0aC5taW4odCtlLG4tMSktdDt2YXIgcj12b2lkIDAsbz10aGlzLnNjcm9sbC5sZWFmKHQpLGk9YShvLDIpLGw9aVswXSxzPWlbMV07aWYobnVsbD09bClyZXR1cm4gbnVsbDt2YXIgdT1sLnBvc2l0aW9uKHMsITApLGM9YSh1LDIpO3I9Y1swXSxzPWNbMV07dmFyIGY9ZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtpZihlPjApe2Yuc2V0U3RhcnQocixzKTt2YXIgaD10aGlzLnNjcm9sbC5sZWFmKHQrZSkscD1hKGgsMik7aWYobD1wWzBdLHM9cFsxXSxudWxsPT1sKXJldHVybiBudWxsO3ZhciBkPWwucG9zaXRpb24ocywhMCkseT1hKGQsMik7cmV0dXJuIHI9eVswXSxzPXlbMV0sZi5zZXRFbmQocixzKSxmLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpfXZhciB2PSJsZWZ0IixiPXZvaWQgMDtyZXR1cm4gciBpbnN0YW5jZW9mIFRleHQ/KHM8ci5kYXRhLmxlbmd0aD8oZi5zZXRTdGFydChyLHMpLGYuc2V0RW5kKHIscysxKSk6KGYuc2V0U3RhcnQocixzLTEpLGYuc2V0RW5kKHIscyksdj0icmlnaHQiKSxiPWYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpOihiPWwuZG9tTm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxzPjAmJih2PSJyaWdodCIpKSx7Ym90dG9tOmIudG9wK2IuaGVpZ2h0LGhlaWdodDpiLmhlaWdodCxsZWZ0OmJbdl0scmlnaHQ6Ylt2XSx0b3A6Yi50b3Asd2lkdGg6MH19fSx7a2V5OiJnZXROYXRpdmVSYW5nZSIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD1kb2N1bWVudC5nZXRTZWxlY3Rpb24oKTtpZihudWxsPT10fHx0LnJhbmdlQ291bnQ8PTApcmV0dXJuIG51bGw7dmFyIGU9dC5nZXRSYW5nZUF0KDApO2lmKG51bGw9PWUpcmV0dXJuIG51bGw7dmFyIG49dGhpcy5ub3JtYWxpemVOYXRpdmUoZSk7cmV0dXJuIG0uaW5mbygiZ2V0TmF0aXZlUmFuZ2UiLG4pLG59fSx7a2V5OiJnZXRSYW5nZSIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmdldE5hdGl2ZVJhbmdlKCk7cmV0dXJuIG51bGw9PXQ/W251bGwsbnVsbF06W3RoaXMubm9ybWFsaXplZFRvUmFuZ2UodCksdF19fSx7a2V5OiJoYXNGb2N1cyIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudD09PXRoaXMucm9vdH19LHtrZXk6Im5vcm1hbGl6ZWRUb1JhbmdlIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLG49W1t0LnN0YXJ0Lm5vZGUsdC5zdGFydC5vZmZzZXRdXTt0Lm5hdGl2ZS5jb2xsYXBzZWR8fG4ucHVzaChbdC5lbmQubm9kZSx0LmVuZC5vZmZzZXRdKTt2YXIgcj1uLm1hcChmdW5jdGlvbih0KXt2YXIgbj1hKHQsMikscj1uWzBdLG89blsxXSxpPWMuZGVmYXVsdC5maW5kKHIsITApLGw9aS5vZmZzZXQoZS5zY3JvbGwpO3JldHVybiAwPT09bz9sOmkgaW5zdGFuY2VvZiBjLmRlZmF1bHQuQ29udGFpbmVyP2wraS5sZW5ndGgoKTpsK2kuaW5kZXgocixvKX0pLGk9TWF0aC5taW4oTWF0aC5tYXguYXBwbHkoTWF0aCxvKHIpKSx0aGlzLnNjcm9sbC5sZW5ndGgoKS0xKSxsPU1hdGgubWluLmFwcGx5KE1hdGgsW2ldLmNvbmNhdChvKHIpKSk7cmV0dXJuIG5ldyBfKGwsaS1sKX19LHtrZXk6Im5vcm1hbGl6ZU5hdGl2ZSIsdmFsdWU6ZnVuY3Rpb24odCl7aWYoIWwodGhpcy5yb290LHQuc3RhcnRDb250YWluZXIpfHwhdC5jb2xsYXBzZWQmJiFsKHRoaXMucm9vdCx0LmVuZENvbnRhaW5lcikpcmV0dXJuIG51bGw7dmFyIGU9e3N0YXJ0Ontub2RlOnQuc3RhcnRDb250YWluZXIsb2Zmc2V0OnQuc3RhcnRPZmZzZXR9LGVuZDp7bm9kZTp0LmVuZENvbnRhaW5lcixvZmZzZXQ6dC5lbmRPZmZzZXR9LG5hdGl2ZTp0fTtyZXR1cm5bZS5zdGFydCxlLmVuZF0uZm9yRWFjaChmdW5jdGlvbih0KXtmb3IodmFyIGU9dC5ub2RlLG49dC5vZmZzZXQ7IShlIGluc3RhbmNlb2YgVGV4dCkmJmUuY2hpbGROb2Rlcy5sZW5ndGg+MDspaWYoZS5jaGlsZE5vZGVzLmxlbmd0aD5uKWU9ZS5jaGlsZE5vZGVzW25dLG49MDtlbHNle2lmKGUuY2hpbGROb2Rlcy5sZW5ndGghPT1uKWJyZWFrO2U9ZS5sYXN0Q2hpbGQsbj1lIGluc3RhbmNlb2YgVGV4dD9lLmRhdGEubGVuZ3RoOmUuY2hpbGROb2Rlcy5sZW5ndGgrMX10Lm5vZGU9ZSx0Lm9mZnNldD1ufSksZX19LHtrZXk6InJhbmdlVG9OYXRpdmUiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj10LmNvbGxhcHNlZD9bdC5pbmRleF06W3QuaW5kZXgsdC5pbmRleCt0Lmxlbmd0aF0scj1bXSxvPXRoaXMuc2Nyb2xsLmxlbmd0aCgpO3JldHVybiBuLmZvckVhY2goZnVuY3Rpb24odCxuKXt0PU1hdGgubWluKG8tMSx0KTt2YXIgaT12b2lkIDAsbD1lLnNjcm9sbC5sZWFmKHQpLHM9YShsLDIpLHU9c1swXSxjPXNbMV0sZj11LnBvc2l0aW9uKGMsMCE9PW4pLGg9YShmLDIpO2k9aFswXSxjPWhbMV0sci5wdXNoKGksYyl9KSxyLmxlbmd0aDwyJiYocj1yLmNvbmNhdChyKSkscn19LHtrZXk6InNjcm9sbEludG9WaWV3Iix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLmxhc3RSYW5nZTtpZihudWxsIT1lKXt2YXIgbj10aGlzLmdldEJvdW5kcyhlLmluZGV4LGUubGVuZ3RoKTtpZihudWxsIT1uKXt2YXIgcj10aGlzLnNjcm9sbC5sZW5ndGgoKS0xLG89dGhpcy5zY3JvbGwubGluZShNYXRoLm1pbihlLmluZGV4LHIpKSxpPWEobywxKSxsPWlbMF0scz1sO2lmKGUubGVuZ3RoPjApe3ZhciB1PXRoaXMuc2Nyb2xsLmxpbmUoTWF0aC5taW4oZS5pbmRleCtlLmxlbmd0aCxyKSk7cz1hKHUsMSlbMF19aWYobnVsbCE9bCYmbnVsbCE9cyl7dmFyIGM9dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtuLnRvcDxjLnRvcD90LnNjcm9sbFRvcC09Yy50b3Atbi50b3A6bi5ib3R0b20+Yy5ib3R0b20mJih0LnNjcm9sbFRvcCs9bi5ib3R0b20tYy5ib3R0b20pfX19fX0se2tleToic2V0TmF0aXZlUmFuZ2UiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnQscj1hcmd1bWVudHMubGVuZ3RoPjMmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106ZSxvPWFyZ3VtZW50cy5sZW5ndGg+NCYmdm9pZCAwIT09YXJndW1lbnRzWzRdJiZhcmd1bWVudHNbNF07aWYobS5pbmZvKCJzZXROYXRpdmVSYW5nZSIsdCxlLG4sciksbnVsbD09dHx8bnVsbCE9dGhpcy5yb290LnBhcmVudE5vZGUmJm51bGwhPXQucGFyZW50Tm9kZSYmbnVsbCE9bi5wYXJlbnROb2RlKXt2YXIgaT1kb2N1bWVudC5nZXRTZWxlY3Rpb24oKTtpZihudWxsIT1pKWlmKG51bGwhPXQpe3RoaXMuaGFzRm9jdXMoKXx8dGhpcy5yb290LmZvY3VzKCk7dmFyIGw9KHRoaXMuZ2V0TmF0aXZlUmFuZ2UoKXx8e30pLm5hdGl2ZTtpZihudWxsPT1sfHxvfHx0IT09bC5zdGFydENvbnRhaW5lcnx8ZSE9PWwuc3RhcnRPZmZzZXR8fG4hPT1sLmVuZENvbnRhaW5lcnx8ciE9PWwuZW5kT2Zmc2V0KXsiQlIiPT10LnRhZ05hbWUmJihlPVtdLmluZGV4T2YuY2FsbCh0LnBhcmVudE5vZGUuY2hpbGROb2Rlcyx0KSx0PXQucGFyZW50Tm9kZSksIkJSIj09bi50YWdOYW1lJiYocj1bXS5pbmRleE9mLmNhbGwobi5wYXJlbnROb2RlLmNoaWxkTm9kZXMsbiksbj1uLnBhcmVudE5vZGUpO3ZhciBhPWRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7YS5zZXRTdGFydCh0LGUpLGEuc2V0RW5kKG4sciksaS5yZW1vdmVBbGxSYW5nZXMoKSxpLmFkZFJhbmdlKGEpfX1lbHNlIGkucmVtb3ZlQWxsUmFuZ2VzKCksdGhpcy5yb290LmJsdXIoKSxkb2N1bWVudC5ib2R5LmZvY3VzKCl9fX0se2tleToic2V0UmFuZ2UiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV0sbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06di5kZWZhdWx0LnNvdXJjZXMuQVBJO2lmKCJzdHJpbmciPT10eXBlb2YgZSYmKG49ZSxlPSExKSxtLmluZm8oInNldFJhbmdlIix0KSxudWxsIT10KXt2YXIgcj10aGlzLnJhbmdlVG9OYXRpdmUodCk7dGhpcy5zZXROYXRpdmVSYW5nZS5hcHBseSh0aGlzLG8ocikuY29uY2F0KFtlXSkpfWVsc2UgdGhpcy5zZXROYXRpdmVSYW5nZShudWxsKTt0aGlzLnVwZGF0ZShuKX19LHtrZXk6InVwZGF0ZSIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06di5kZWZhdWx0LnNvdXJjZXMuVVNFUixlPXRoaXMubGFzdFJhbmdlLG49dGhpcy5nZXRSYW5nZSgpLHI9YShuLDIpLG89clswXSxpPXJbMV07aWYodGhpcy5sYXN0UmFuZ2U9byxudWxsIT10aGlzLmxhc3RSYW5nZSYmKHRoaXMuc2F2ZWRSYW5nZT10aGlzLmxhc3RSYW5nZSksISgwLGQuZGVmYXVsdCkoZSx0aGlzLmxhc3RSYW5nZSkpe3ZhciBsOyF0aGlzLmNvbXBvc2luZyYmbnVsbCE9aSYmaS5uYXRpdmUuY29sbGFwc2VkJiZpLnN0YXJ0Lm5vZGUhPT10aGlzLmN1cnNvci50ZXh0Tm9kZSYmdGhpcy5jdXJzb3IucmVzdG9yZSgpO3ZhciBzPVt2LmRlZmF1bHQuZXZlbnRzLlNFTEVDVElPTl9DSEFOR0UsKDAsaC5kZWZhdWx0KSh0aGlzLmxhc3RSYW5nZSksKDAsaC5kZWZhdWx0KShlKSx0XTtpZigobD10aGlzLmVtaXR0ZXIpLmVtaXQuYXBwbHkobCxbdi5kZWZhdWx0LmV2ZW50cy5FRElUT1JfQ0hBTkdFXS5jb25jYXQocykpLHQhPT12LmRlZmF1bHQuc291cmNlcy5TSUxFTlQpe3ZhciB1Oyh1PXRoaXMuZW1pdHRlcikuZW1pdC5hcHBseSh1LHMpfX19fV0pLHR9KCk7ZS5SYW5nZT1fLGUuZGVmYXVsdD1PfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWZ1bmN0aW9uIG8odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1mdW5jdGlvbiBpKHQsZSl7aWYoIXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTtyZXR1cm4hZXx8Im9iamVjdCIhPXR5cGVvZiBlJiYiZnVuY3Rpb24iIT10eXBlb2YgZT90OmV9ZnVuY3Rpb24gbCh0LGUpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIrdHlwZW9mIGUpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLGUmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHQsZSk6dC5fX3Byb3RvX189ZSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBhPW4oMCkscz1yKGEpLHU9bigzKSxjPXIodSksZj1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7cmV0dXJuIG8odGhpcyxlKSxpKHRoaXMsKGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSkpLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9cmV0dXJuIGwoZSx0KSxlfShzLmRlZmF1bHQuQ29udGFpbmVyKTtmLmFsbG93ZWRDaGlsZHJlbj1bYy5kZWZhdWx0LHUuQmxvY2tFbWJlZCxmXSxlLmRlZmF1bHQ9Zn0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9ZnVuY3Rpb24gbyh0LGUpe2lmKCF0KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7cmV0dXJuIWV8fCJvYmplY3QiIT10eXBlb2YgZSYmImZ1bmN0aW9uIiE9dHlwZW9mIGU/dDplfWZ1bmN0aW9uIGkodCxlKXtpZigiZnVuY3Rpb24iIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAiK3R5cGVvZiBlKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxlJiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZih0LGUpOnQuX19wcm90b19fPWUpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxlLkNvbG9yU3R5bGU9ZS5Db2xvckNsYXNzPWUuQ29sb3JBdHRyaWJ1dG9yPXZvaWQgMDt2YXIgbD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LHIua2V5LHIpfX1yZXR1cm4gZnVuY3Rpb24oZSxuLHIpe3JldHVybiBuJiZ0KGUucHJvdG90eXBlLG4pLHImJnQoZSxyKSxlfX0oKSxhPWZ1bmN0aW9uIHQoZSxuLHIpe251bGw9PT1lJiYoZT1GdW5jdGlvbi5wcm90b3R5cGUpO3ZhciBvPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxuKTtpZih2b2lkIDA9PT1vKXt2YXIgaT1PYmplY3QuZ2V0UHJvdG90eXBlT2YoZSk7cmV0dXJuIG51bGw9PT1pP3ZvaWQgMDp0KGksbixyKX1pZigidmFsdWUiaW4gbylyZXR1cm4gby52YWx1ZTt2YXIgbD1vLmdldDtpZih2b2lkIDAhPT1sKXJldHVybiBsLmNhbGwocil9LHM9bigwKSx1PWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX0ocyksYz1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7cmV0dXJuIHIodGhpcyxlKSxvKHRoaXMsKGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSkpLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9cmV0dXJuIGkoZSx0KSxsKGUsW3trZXk6InZhbHVlIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgbj1hKGUucHJvdG90eXBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUucHJvdG90eXBlKSwidmFsdWUiLHRoaXMpLmNhbGwodGhpcyx0KTtyZXR1cm4gbi5zdGFydHNXaXRoKCJyZ2IoIik/KG49bi5yZXBsYWNlKC9eW15cZF0rLywiIikucmVwbGFjZSgvW15cZF0rJC8sIiIpLCIjIituLnNwbGl0KCIsIikubWFwKGZ1bmN0aW9uKHQpe3JldHVybigiMDAiK3BhcnNlSW50KHQpLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpfSkuam9pbigiIikpOm59fV0pLGV9KHUuZGVmYXVsdC5BdHRyaWJ1dG9yLlN0eWxlKSxmPW5ldyB1LmRlZmF1bHQuQXR0cmlidXRvci5DbGFzcygiY29sb3IiLCJxbC1jb2xvciIse3Njb3BlOnUuZGVmYXVsdC5TY29wZS5JTkxJTkV9KSxoPW5ldyBjKCJjb2xvciIsImNvbG9yIix7c2NvcGU6dS5kZWZhdWx0LlNjb3BlLklOTElORX0pO2UuQ29sb3JBdHRyaWJ1dG9yPWMsZS5Db2xvckNsYXNzPWYsZS5Db2xvclN0eWxlPWh9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZnVuY3Rpb24gbyh0LGUsbil7cmV0dXJuIGUgaW4gdD9PYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHt2YWx1ZTpuLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6dFtlXT1uLHR9ZnVuY3Rpb24gaSh0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfWZ1bmN0aW9uIGwodCxlKXtpZighdCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpO3JldHVybiFlfHwib2JqZWN0IiE9dHlwZW9mIGUmJiJmdW5jdGlvbiIhPXR5cGVvZiBlP3Q6ZX1mdW5jdGlvbiBhKHQsZSl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgIit0eXBlb2YgZSk7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksZSYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YodCxlKTp0Ll9fcHJvdG9fXz1lKX1mdW5jdGlvbiBzKHQsZSl7dmFyIG4scj10PT09RC5rZXlzLkxFRlQ/InByZWZpeCI6InN1ZmZpeCI7cmV0dXJuIG49e2tleTp0LHNoaWZ0S2V5OmUsYWx0S2V5Om51bGx9LG8obixyLC9eJC8pLG8obiwiaGFuZGxlciIsZnVuY3Rpb24obil7dmFyIHI9bi5pbmRleDt0PT09RC5rZXlzLlJJR0hUJiYocis9bi5sZW5ndGgrMSk7dmFyIG89dGhpcy5xdWlsbC5nZXRMZWFmKHIpO3JldHVybiEoYihvLDEpWzBdaW5zdGFuY2VvZiBULmRlZmF1bHQuRW1iZWQpfHwodD09PUQua2V5cy5MRUZUP2U/dGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24obi5pbmRleC0xLG4ubGVuZ3RoKzEsUy5kZWZhdWx0LnNvdXJjZXMuVVNFUik6dGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24obi5pbmRleC0xLFMuZGVmYXVsdC5zb3VyY2VzLlVTRVIpOmU/dGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24obi5pbmRleCxuLmxlbmd0aCsxLFMuZGVmYXVsdC5zb3VyY2VzLlVTRVIpOnRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKG4uaW5kZXgrbi5sZW5ndGgrMSxTLmRlZmF1bHQuc291cmNlcy5VU0VSKSwhMSl9KSxufWZ1bmN0aW9uIHUodCxlKXtpZighKDA9PT10LmluZGV4fHx0aGlzLnF1aWxsLmdldExlbmd0aCgpPD0xKSl7dmFyIG49dGhpcy5xdWlsbC5nZXRMaW5lKHQuaW5kZXgpLHI9YihuLDEpLG89clswXSxpPXt9O2lmKDA9PT1lLm9mZnNldCl7dmFyIGw9dGhpcy5xdWlsbC5nZXRMaW5lKHQuaW5kZXgtMSksYT1iKGwsMSkscz1hWzBdO2lmKG51bGwhPXMmJnMubGVuZ3RoKCk+MSl7dmFyIHU9by5mb3JtYXRzKCksYz10aGlzLnF1aWxsLmdldEZvcm1hdCh0LmluZGV4LTEsMSk7aT1BLmRlZmF1bHQuYXR0cmlidXRlcy5kaWZmKHUsYyl8fHt9fX12YXIgZj0vW1x1RDgwMC1cdURCRkZdW1x1REMwMC1cdURGRkZdJC8udGVzdChlLnByZWZpeCk/MjoxO3RoaXMucXVpbGwuZGVsZXRlVGV4dCh0LmluZGV4LWYsZixTLmRlZmF1bHQuc291cmNlcy5VU0VSKSxPYmplY3Qua2V5cyhpKS5sZW5ndGg+MCYmdGhpcy5xdWlsbC5mb3JtYXRMaW5lKHQuaW5kZXgtZixmLGksUy5kZWZhdWx0LnNvdXJjZXMuVVNFUiksdGhpcy5xdWlsbC5mb2N1cygpfX1mdW5jdGlvbiBjKHQsZSl7dmFyIG49L15bXHVEODAwLVx1REJGRl1bXHVEQzAwLVx1REZGRl0vLnRlc3QoZS5zdWZmaXgpPzI6MTtpZighKHQuaW5kZXg+PXRoaXMucXVpbGwuZ2V0TGVuZ3RoKCktbikpe3ZhciByPXt9LG89MCxpPXRoaXMucXVpbGwuZ2V0TGluZSh0LmluZGV4KSxsPWIoaSwxKSxhPWxbMF07aWYoZS5vZmZzZXQ+PWEubGVuZ3RoKCktMSl7dmFyIHM9dGhpcy5xdWlsbC5nZXRMaW5lKHQuaW5kZXgrMSksdT1iKHMsMSksYz11WzBdO2lmKGMpe3ZhciBmPWEuZm9ybWF0cygpLGg9dGhpcy5xdWlsbC5nZXRGb3JtYXQodC5pbmRleCwxKTtyPUEuZGVmYXVsdC5hdHRyaWJ1dGVzLmRpZmYoZixoKXx8e30sbz1jLmxlbmd0aCgpfX10aGlzLnF1aWxsLmRlbGV0ZVRleHQodC5pbmRleCxuLFMuZGVmYXVsdC5zb3VyY2VzLlVTRVIpLE9iamVjdC5rZXlzKHIpLmxlbmd0aD4wJiZ0aGlzLnF1aWxsLmZvcm1hdExpbmUodC5pbmRleCtvLTEsbixyLFMuZGVmYXVsdC5zb3VyY2VzLlVTRVIpfX1mdW5jdGlvbiBmKHQpe3ZhciBlPXRoaXMucXVpbGwuZ2V0TGluZXModCksbj17fTtpZihlLmxlbmd0aD4xKXt2YXIgcj1lWzBdLmZvcm1hdHMoKSxvPWVbZS5sZW5ndGgtMV0uZm9ybWF0cygpO249QS5kZWZhdWx0LmF0dHJpYnV0ZXMuZGlmZihvLHIpfHx7fX10aGlzLnF1aWxsLmRlbGV0ZVRleHQodCxTLmRlZmF1bHQuc291cmNlcy5VU0VSKSxPYmplY3Qua2V5cyhuKS5sZW5ndGg+MCYmdGhpcy5xdWlsbC5mb3JtYXRMaW5lKHQuaW5kZXgsMSxuLFMuZGVmYXVsdC5zb3VyY2VzLlVTRVIpLHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKHQuaW5kZXgsUy5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKSx0aGlzLnF1aWxsLmZvY3VzKCl9ZnVuY3Rpb24gaCh0LGUpe3ZhciBuPXRoaXM7dC5sZW5ndGg+MCYmdGhpcy5xdWlsbC5zY3JvbGwuZGVsZXRlQXQodC5pbmRleCx0Lmxlbmd0aCk7dmFyIHI9T2JqZWN0LmtleXMoZS5mb3JtYXQpLnJlZHVjZShmdW5jdGlvbih0LG4pe3JldHVybiBULmRlZmF1bHQucXVlcnkobixULmRlZmF1bHQuU2NvcGUuQkxPQ0spJiYhQXJyYXkuaXNBcnJheShlLmZvcm1hdFtuXSkmJih0W25dPWUuZm9ybWF0W25dKSx0fSx7fSk7dGhpcy5xdWlsbC5pbnNlcnRUZXh0KHQuaW5kZXgsIlxuIixyLFMuZGVmYXVsdC5zb3VyY2VzLlVTRVIpLHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKHQuaW5kZXgrMSxTLmRlZmF1bHQuc291cmNlcy5TSUxFTlQpLHRoaXMucXVpbGwuZm9jdXMoKSxPYmplY3Qua2V5cyhlLmZvcm1hdCkuZm9yRWFjaChmdW5jdGlvbih0KXtudWxsPT1yW3RdJiYoQXJyYXkuaXNBcnJheShlLmZvcm1hdFt0XSl8fCJsaW5rIiE9PXQmJm4ucXVpbGwuZm9ybWF0KHQsZS5mb3JtYXRbdF0sUy5kZWZhdWx0LnNvdXJjZXMuVVNFUikpfSl9ZnVuY3Rpb24gcCh0KXtyZXR1cm57a2V5OkQua2V5cy5UQUIsc2hpZnRLZXk6IXQsZm9ybWF0OnsiY29kZS1ibG9jayI6ITB9LGhhbmRsZXI6ZnVuY3Rpb24oZSl7dmFyIG49VC5kZWZhdWx0LnF1ZXJ5KCJjb2RlLWJsb2NrIikscj1lLmluZGV4LG89ZS5sZW5ndGgsaT10aGlzLnF1aWxsLnNjcm9sbC5kZXNjZW5kYW50KG4sciksbD1iKGksMiksYT1sWzBdLHM9bFsxXTtpZihudWxsIT1hKXt2YXIgdT10aGlzLnF1aWxsLmdldEluZGV4KGEpLGM9YS5uZXdsaW5lSW5kZXgocywhMCkrMSxmPWEubmV3bGluZUluZGV4KHUrcytvKSxoPWEuZG9tTm9kZS50ZXh0Q29udGVudC5zbGljZShjLGYpLnNwbGl0KCJcbiIpO3M9MCxoLmZvckVhY2goZnVuY3Rpb24oZSxpKXt0PyhhLmluc2VydEF0KGMrcyxuLlRBQikscys9bi5UQUIubGVuZ3RoLDA9PT1pP3IrPW4uVEFCLmxlbmd0aDpvKz1uLlRBQi5sZW5ndGgpOmUuc3RhcnRzV2l0aChuLlRBQikmJihhLmRlbGV0ZUF0KGMrcyxuLlRBQi5sZW5ndGgpLHMtPW4uVEFCLmxlbmd0aCwwPT09aT9yLT1uLlRBQi5sZW5ndGg6by09bi5UQUIubGVuZ3RoKSxzKz1lLmxlbmd0aCsxfSksdGhpcy5xdWlsbC51cGRhdGUoUy5kZWZhdWx0LnNvdXJjZXMuVVNFUiksdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24ocixvLFMuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCl9fX19ZnVuY3Rpb24gZCh0KXtyZXR1cm57a2V5OnRbMF0udG9VcHBlckNhc2UoKSxzaG9ydEtleTohMCxoYW5kbGVyOmZ1bmN0aW9uKGUsbil7dGhpcy5xdWlsbC5mb3JtYXQodCwhbi5mb3JtYXRbdF0sUy5kZWZhdWx0LnNvdXJjZXMuVVNFUil9fX1mdW5jdGlvbiB5KHQpe2lmKCJzdHJpbmciPT10eXBlb2YgdHx8Im51bWJlciI9PXR5cGVvZiB0KXJldHVybiB5KHtrZXk6dH0pO2lmKCJvYmplY3QiPT09KHZvaWQgMD09PXQ/InVuZGVmaW5lZCI6dih0KSkmJih0PSgwLF8uZGVmYXVsdCkodCwhMSkpLCJzdHJpbmciPT10eXBlb2YgdC5rZXkpaWYobnVsbCE9RC5rZXlzW3Qua2V5LnRvVXBwZXJDYXNlKCldKXQua2V5PUQua2V5c1t0LmtleS50b1VwcGVyQ2FzZSgpXTtlbHNle2lmKDEhPT10LmtleS5sZW5ndGgpcmV0dXJuIG51bGw7dC5rZXk9dC5rZXkudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApfXJldHVybiB0LnNob3J0S2V5JiYodFtCXT10LnNob3J0S2V5LGRlbGV0ZSB0LnNob3J0S2V5KSx0fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxlLlNIT1JUS0VZPWUuZGVmYXVsdD12b2lkIDA7dmFyIHY9ImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmInN5bWJvbCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/InN5bWJvbCI6dHlwZW9mIHR9LGI9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7dmFyIG49W10scj0hMCxvPSExLGk9dm9pZCAwO3RyeXtmb3IodmFyIGwsYT10W1N5bWJvbC5pdGVyYXRvcl0oKTshKHI9KGw9YS5uZXh0KCkpLmRvbmUpJiYobi5wdXNoKGwudmFsdWUpLCFlfHxuLmxlbmd0aCE9PWUpO3I9ITApO31jYXRjaCh0KXtvPSEwLGk9dH1maW5hbGx5e3RyeXshciYmYS5yZXR1cm4mJmEucmV0dXJuKCl9ZmluYWxseXtpZihvKXRocm93IGl9fXJldHVybiBufXJldHVybiBmdW5jdGlvbihlLG4pe2lmKEFycmF5LmlzQXJyYXkoZSkpcmV0dXJuIGU7aWYoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChlKSlyZXR1cm4gdChlLG4pO3Rocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKX19KCksZz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LHIua2V5LHIpfX1yZXR1cm4gZnVuY3Rpb24oZSxuLHIpe3JldHVybiBuJiZ0KGUucHJvdG90eXBlLG4pLHImJnQoZSxyKSxlfX0oKSxtPW4oMjEpLF89cihtKSxPPW4oMTIpLHc9cihPKSx4PW4oMiksaz1yKHgpLEU9big0KSxOPXIoRSksaj1uKDIwKSxBPXIoaikscT1uKDApLFQ9cihxKSxQPW4oNiksUz1yKFApLEM9bigxMCksTD1yKEMpLE09big3KSxSPXIoTSksST0oMCxMLmRlZmF1bHQpKCJxdWlsbDprZXlib2FyZCIpLEI9L01hYy9pLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKT8ibWV0YUtleSI6ImN0cmxLZXkiLEQ9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSh0LG4pe2kodGhpcyxlKTt2YXIgcj1sKHRoaXMsKGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSkpLmNhbGwodGhpcyx0LG4pKTtyZXR1cm4gci5iaW5kaW5ncz17fSxPYmplY3Qua2V5cyhyLm9wdGlvbnMuYmluZGluZ3MpLmZvckVhY2goZnVuY3Rpb24oZSl7KCJsaXN0IGF1dG9maWxsIiE9PWV8fG51bGw9PXQuc2Nyb2xsLndoaXRlbGlzdHx8dC5zY3JvbGwud2hpdGVsaXN0Lmxpc3QpJiZyLm9wdGlvbnMuYmluZGluZ3NbZV0mJnIuYWRkQmluZGluZyhyLm9wdGlvbnMuYmluZGluZ3NbZV0pfSksci5hZGRCaW5kaW5nKHtrZXk6ZS5rZXlzLkVOVEVSLHNoaWZ0S2V5Om51bGx9LGgpLHIuYWRkQmluZGluZyh7a2V5OmUua2V5cy5FTlRFUixtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLGFsdEtleTpudWxsfSxmdW5jdGlvbigpe30pLC9GaXJlZm94L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KT8oci5hZGRCaW5kaW5nKHtrZXk6ZS5rZXlzLkJBQ0tTUEFDRX0se2NvbGxhcHNlZDohMH0sdSksci5hZGRCaW5kaW5nKHtrZXk6ZS5rZXlzLkRFTEVURX0se2NvbGxhcHNlZDohMH0sYykpOihyLmFkZEJpbmRpbmcoe2tleTplLmtleXMuQkFDS1NQQUNFfSx7Y29sbGFwc2VkOiEwLHByZWZpeDovXi4/JC99LHUpLHIuYWRkQmluZGluZyh7a2V5OmUua2V5cy5ERUxFVEV9LHtjb2xsYXBzZWQ6ITAsc3VmZml4Oi9eLj8kL30sYykpLHIuYWRkQmluZGluZyh7a2V5OmUua2V5cy5CQUNLU1BBQ0V9LHtjb2xsYXBzZWQ6ITF9LGYpLHIuYWRkQmluZGluZyh7a2V5OmUua2V5cy5ERUxFVEV9LHtjb2xsYXBzZWQ6ITF9LGYpLHIuYWRkQmluZGluZyh7a2V5OmUua2V5cy5CQUNLU1BBQ0UsYWx0S2V5Om51bGwsY3RybEtleTpudWxsLG1ldGFLZXk6bnVsbCxzaGlmdEtleTpudWxsfSx7Y29sbGFwc2VkOiEwLG9mZnNldDowfSx1KSxyLmxpc3RlbigpLHJ9cmV0dXJuIGEoZSx0KSxnKGUsbnVsbCxbe2tleToibWF0Y2giLHZhbHVlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIGU9eShlKSwhWyJhbHRLZXkiLCJjdHJsS2V5IiwibWV0YUtleSIsInNoaWZ0S2V5Il0uc29tZShmdW5jdGlvbihuKXtyZXR1cm4hIWVbbl0hPT10W25dJiZudWxsIT09ZVtuXX0pJiZlLmtleT09PSh0LndoaWNofHx0LmtleUNvZGUpfX1dKSxnKGUsW3trZXk6ImFkZEJpbmRpbmciLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fSxuPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp7fSxyPXkodCk7aWYobnVsbD09cnx8bnVsbD09ci5rZXkpcmV0dXJuIEkud2FybigiQXR0ZW1wdGVkIHRvIGFkZCBpbnZhbGlkIGtleWJvYXJkIGJpbmRpbmciLHIpOyJmdW5jdGlvbiI9PXR5cGVvZiBlJiYoZT17aGFuZGxlcjplfSksImZ1bmN0aW9uIj09dHlwZW9mIG4mJihuPXtoYW5kbGVyOm59KSxyPSgwLGsuZGVmYXVsdCkocixlLG4pLHRoaXMuYmluZGluZ3Nbci5rZXldPXRoaXMuYmluZGluZ3Nbci5rZXldfHxbXSx0aGlzLmJpbmRpbmdzW3Iua2V5XS5wdXNoKHIpfX0se2tleToibGlzdGVuIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5xdWlsbC5yb290LmFkZEV2ZW50TGlzdGVuZXIoImtleWRvd24iLGZ1bmN0aW9uKG4pe2lmKCFuLmRlZmF1bHRQcmV2ZW50ZWQpe3ZhciByPW4ud2hpY2h8fG4ua2V5Q29kZSxvPSh0LmJpbmRpbmdzW3JdfHxbXSkuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiBlLm1hdGNoKG4sdCl9KTtpZigwIT09by5sZW5ndGgpe3ZhciBpPXQucXVpbGwuZ2V0U2VsZWN0aW9uKCk7aWYobnVsbCE9aSYmdC5xdWlsbC5oYXNGb2N1cygpKXt2YXIgbD10LnF1aWxsLmdldExpbmUoaS5pbmRleCksYT1iKGwsMikscz1hWzBdLHU9YVsxXSxjPXQucXVpbGwuZ2V0TGVhZihpLmluZGV4KSxmPWIoYywyKSxoPWZbMF0scD1mWzFdLGQ9MD09PWkubGVuZ3RoP1toLHBdOnQucXVpbGwuZ2V0TGVhZihpLmluZGV4K2kubGVuZ3RoKSx5PWIoZCwyKSxnPXlbMF0sbT15WzFdLF89aCBpbnN0YW5jZW9mIFQuZGVmYXVsdC5UZXh0P2gudmFsdWUoKS5zbGljZSgwLHApOiIiLE89ZyBpbnN0YW5jZW9mIFQuZGVmYXVsdC5UZXh0P2cudmFsdWUoKS5zbGljZShtKToiIix4PXtjb2xsYXBzZWQ6MD09PWkubGVuZ3RoLGVtcHR5OjA9PT1pLmxlbmd0aCYmcy5sZW5ndGgoKTw9MSxmb3JtYXQ6dC5xdWlsbC5nZXRGb3JtYXQoaSksb2Zmc2V0OnUscHJlZml4Ol8sc3VmZml4Ok99O28uc29tZShmdW5jdGlvbihlKXtpZihudWxsIT1lLmNvbGxhcHNlZCYmZS5jb2xsYXBzZWQhPT14LmNvbGxhcHNlZClyZXR1cm4hMTtpZihudWxsIT1lLmVtcHR5JiZlLmVtcHR5IT09eC5lbXB0eSlyZXR1cm4hMTtpZihudWxsIT1lLm9mZnNldCYmZS5vZmZzZXQhPT14Lm9mZnNldClyZXR1cm4hMTtpZihBcnJheS5pc0FycmF5KGUuZm9ybWF0KSl7aWYoZS5mb3JtYXQuZXZlcnkoZnVuY3Rpb24odCl7cmV0dXJuIG51bGw9PXguZm9ybWF0W3RdfSkpcmV0dXJuITF9ZWxzZSBpZigib2JqZWN0Ij09PXYoZS5mb3JtYXQpJiYhT2JqZWN0LmtleXMoZS5mb3JtYXQpLmV2ZXJ5KGZ1bmN0aW9uKHQpe3JldHVybiEwPT09ZS5mb3JtYXRbdF0/bnVsbCE9eC5mb3JtYXRbdF06ITE9PT1lLmZvcm1hdFt0XT9udWxsPT14LmZvcm1hdFt0XTooMCx3LmRlZmF1bHQpKGUuZm9ybWF0W3RdLHguZm9ybWF0W3RdKX0pKXJldHVybiExO3JldHVybiEobnVsbCE9ZS5wcmVmaXgmJiFlLnByZWZpeC50ZXN0KHgucHJlZml4KSkmJighKG51bGwhPWUuc3VmZml4JiYhZS5zdWZmaXgudGVzdCh4LnN1ZmZpeCkpJiYhMCE9PWUuaGFuZGxlci5jYWxsKHQsaSx4KSl9KSYmbi5wcmV2ZW50RGVmYXVsdCgpfX19fSl9fV0pLGV9KFIuZGVmYXVsdCk7RC5rZXlzPXtCQUNLU1BBQ0U6OCxUQUI6OSxFTlRFUjoxMyxFU0NBUEU6MjcsTEVGVDozNyxVUDozOCxSSUdIVDozOSxET1dOOjQwLERFTEVURTo0Nn0sRC5ERUZBVUxUUz17YmluZGluZ3M6e2JvbGQ6ZCgiYm9sZCIpLGl0YWxpYzpkKCJpdGFsaWMiKSx1bmRlcmxpbmU6ZCgidW5kZXJsaW5lIiksaW5kZW50OntrZXk6RC5rZXlzLlRBQixmb3JtYXQ6WyJibG9ja3F1b3RlIiwiaW5kZW50IiwibGlzdCJdLGhhbmRsZXI6ZnVuY3Rpb24odCxlKXtpZihlLmNvbGxhcHNlZCYmMCE9PWUub2Zmc2V0KXJldHVybiEwO3RoaXMucXVpbGwuZm9ybWF0KCJpbmRlbnQiLCIrMSIsUy5kZWZhdWx0LnNvdXJjZXMuVVNFUil9fSxvdXRkZW50OntrZXk6RC5rZXlzLlRBQixzaGlmdEtleTohMCxmb3JtYXQ6WyJibG9ja3F1b3RlIiwiaW5kZW50IiwibGlzdCJdLGhhbmRsZXI6ZnVuY3Rpb24odCxlKXtpZihlLmNvbGxhcHNlZCYmMCE9PWUub2Zmc2V0KXJldHVybiEwO3RoaXMucXVpbGwuZm9ybWF0KCJpbmRlbnQiLCItMSIsUy5kZWZhdWx0LnNvdXJjZXMuVVNFUil9fSwib3V0ZGVudCBiYWNrc3BhY2UiOntrZXk6RC5rZXlzLkJBQ0tTUEFDRSxjb2xsYXBzZWQ6ITAsc2hpZnRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLGFsdEtleTpudWxsLGZvcm1hdDpbImluZGVudCIsImxpc3QiXSxvZmZzZXQ6MCxoYW5kbGVyOmZ1bmN0aW9uKHQsZSl7bnVsbCE9ZS5mb3JtYXQuaW5kZW50P3RoaXMucXVpbGwuZm9ybWF0KCJpbmRlbnQiLCItMSIsUy5kZWZhdWx0LnNvdXJjZXMuVVNFUik6bnVsbCE9ZS5mb3JtYXQubGlzdCYmdGhpcy5xdWlsbC5mb3JtYXQoImxpc3QiLCExLFMuZGVmYXVsdC5zb3VyY2VzLlVTRVIpfX0sImluZGVudCBjb2RlLWJsb2NrIjpwKCEwKSwib3V0ZGVudCBjb2RlLWJsb2NrIjpwKCExKSwicmVtb3ZlIHRhYiI6e2tleTpELmtleXMuVEFCLHNoaWZ0S2V5OiEwLGNvbGxhcHNlZDohMCxwcmVmaXg6L1x0JC8saGFuZGxlcjpmdW5jdGlvbih0KXt0aGlzLnF1aWxsLmRlbGV0ZVRleHQodC5pbmRleC0xLDEsUy5kZWZhdWx0LnNvdXJjZXMuVVNFUil9fSx0YWI6e2tleTpELmtleXMuVEFCLGhhbmRsZXI6ZnVuY3Rpb24odCl7dGhpcy5xdWlsbC5oaXN0b3J5LmN1dG9mZigpO3ZhciBlPShuZXcgTi5kZWZhdWx0KS5yZXRhaW4odC5pbmRleCkuZGVsZXRlKHQubGVuZ3RoKS5pbnNlcnQoIlx0Iik7dGhpcy5xdWlsbC51cGRhdGVDb250ZW50cyhlLFMuZGVmYXVsdC5zb3VyY2VzLlVTRVIpLHRoaXMucXVpbGwuaGlzdG9yeS5jdXRvZmYoKSx0aGlzLnF1aWxsLnNldFNlbGVjdGlvbih0LmluZGV4KzEsUy5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKX19LCJsaXN0IGVtcHR5IGVudGVyIjp7a2V5OkQua2V5cy5FTlRFUixjb2xsYXBzZWQ6ITAsZm9ybWF0OlsibGlzdCJdLGVtcHR5OiEwLGhhbmRsZXI6ZnVuY3Rpb24odCxlKXt0aGlzLnF1aWxsLmZvcm1hdCgibGlzdCIsITEsUy5kZWZhdWx0LnNvdXJjZXMuVVNFUiksZS5mb3JtYXQuaW5kZW50JiZ0aGlzLnF1aWxsLmZvcm1hdCgiaW5kZW50IiwhMSxTLmRlZmF1bHQuc291cmNlcy5VU0VSKX19LCJjaGVja2xpc3QgZW50ZXIiOntrZXk6RC5rZXlzLkVOVEVSLGNvbGxhcHNlZDohMCxmb3JtYXQ6e2xpc3Q6ImNoZWNrZWQifSxoYW5kbGVyOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMucXVpbGwuZ2V0TGluZSh0LmluZGV4KSxuPWIoZSwyKSxyPW5bMF0sbz1uWzFdLGk9KDAsay5kZWZhdWx0KSh7fSxyLmZvcm1hdHMoKSx7bGlzdDoiY2hlY2tlZCJ9KSxsPShuZXcgTi5kZWZhdWx0KS5yZXRhaW4odC5pbmRleCkuaW5zZXJ0KCJcbiIsaSkucmV0YWluKHIubGVuZ3RoKCktby0xKS5yZXRhaW4oMSx7bGlzdDoidW5jaGVja2VkIn0pO3RoaXMucXVpbGwudXBkYXRlQ29udGVudHMobCxTLmRlZmF1bHQuc291cmNlcy5VU0VSKSx0aGlzLnF1aWxsLnNldFNlbGVjdGlvbih0LmluZGV4KzEsUy5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKSx0aGlzLnF1aWxsLnNjcm9sbEludG9WaWV3KCl9fSwiaGVhZGVyIGVudGVyIjp7a2V5OkQua2V5cy5FTlRFUixjb2xsYXBzZWQ6ITAsZm9ybWF0OlsiaGVhZGVyIl0sc3VmZml4Oi9eJC8saGFuZGxlcjpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMucXVpbGwuZ2V0TGluZSh0LmluZGV4KSxyPWIobiwyKSxvPXJbMF0saT1yWzFdLGw9KG5ldyBOLmRlZmF1bHQpLnJldGFpbih0LmluZGV4KS5pbnNlcnQoIlxuIixlLmZvcm1hdCkucmV0YWluKG8ubGVuZ3RoKCktaS0xKS5yZXRhaW4oMSx7aGVhZGVyOm51bGx9KTt0aGlzLnF1aWxsLnVwZGF0ZUNvbnRlbnRzKGwsUy5kZWZhdWx0LnNvdXJjZXMuVVNFUiksdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24odC5pbmRleCsxLFMuZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCksdGhpcy5xdWlsbC5zY3JvbGxJbnRvVmlldygpfX0sImxpc3QgYXV0b2ZpbGwiOntrZXk6IiAiLGNvbGxhcHNlZDohMCxmb3JtYXQ6e2xpc3Q6ITF9LHByZWZpeDovXlxzKj8oXGQrXC58LXxcKnxcWyA/XF18XFt4XF0pJC8saGFuZGxlcjpmdW5jdGlvbih0LGUpe3ZhciBuPWUucHJlZml4Lmxlbmd0aCxyPXRoaXMucXVpbGwuZ2V0TGluZSh0LmluZGV4KSxvPWIociwyKSxpPW9bMF0sbD1vWzFdO2lmKGw+bilyZXR1cm4hMDt2YXIgYT12b2lkIDA7c3dpdGNoKGUucHJlZml4LnRyaW0oKSl7Y2FzZSJbXSI6Y2FzZSJbIF0iOmE9InVuY2hlY2tlZCI7YnJlYWs7Y2FzZSJbeF0iOmE9ImNoZWNrZWQiO2JyZWFrO2Nhc2UiLSI6Y2FzZSIqIjphPSJidWxsZXQiO2JyZWFrO2RlZmF1bHQ6YT0ib3JkZXJlZCJ9dGhpcy5xdWlsbC5pbnNlcnRUZXh0KHQuaW5kZXgsIiAiLFMuZGVmYXVsdC5zb3VyY2VzLlVTRVIpLHRoaXMucXVpbGwuaGlzdG9yeS5jdXRvZmYoKTt2YXIgcz0obmV3IE4uZGVmYXVsdCkucmV0YWluKHQuaW5kZXgtbCkuZGVsZXRlKG4rMSkucmV0YWluKGkubGVuZ3RoKCktMi1sKS5yZXRhaW4oMSx7bGlzdDphfSk7dGhpcy5xdWlsbC51cGRhdGVDb250ZW50cyhzLFMuZGVmYXVsdC5zb3VyY2VzLlVTRVIpLHRoaXMucXVpbGwuaGlzdG9yeS5jdXRvZmYoKSx0aGlzLnF1aWxsLnNldFNlbGVjdGlvbih0LmluZGV4LW4sUy5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKX19LCJjb2RlIGV4aXQiOntrZXk6RC5rZXlzLkVOVEVSLGNvbGxhcHNlZDohMCxmb3JtYXQ6WyJjb2RlLWJsb2NrIl0scHJlZml4Oi9cblxuJC8sc3VmZml4Oi9eXHMrJC8saGFuZGxlcjpmdW5jdGlvbih0KXt2YXIgZT10aGlzLnF1aWxsLmdldExpbmUodC5pbmRleCksbj1iKGUsMikscj1uWzBdLG89blsxXSxpPShuZXcgTi5kZWZhdWx0KS5yZXRhaW4odC5pbmRleCtyLmxlbmd0aCgpLW8tMikucmV0YWluKDEseyJjb2RlLWJsb2NrIjpudWxsfSkuZGVsZXRlKDEpO3RoaXMucXVpbGwudXBkYXRlQ29udGVudHMoaSxTLmRlZmF1bHQuc291cmNlcy5VU0VSKX19LCJlbWJlZCBsZWZ0IjpzKEQua2V5cy5MRUZULCExKSwiZW1iZWQgbGVmdCBzaGlmdCI6cyhELmtleXMuTEVGVCwhMCksImVtYmVkIHJpZ2h0IjpzKEQua2V5cy5SSUdIVCwhMSksImVtYmVkIHJpZ2h0IHNoaWZ0IjpzKEQua2V5cy5SSUdIVCwhMCl9fSxlLmRlZmF1bHQ9RCxlLlNIT1JUS0VZPUJ9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dC5leHBvcnRzPXthbGlnbjp7IiI6big3NSksY2VudGVyOm4oNzYpLHJpZ2h0Om4oNzcpLGp1c3RpZnk6big3OCl9LGJhY2tncm91bmQ6big3OSksYmxvY2txdW90ZTpuKDgwKSxib2xkOm4oODEpLGNsZWFuOm4oODIpLGNvZGU6big0MCksImNvZGUtYmxvY2siOm4oNDApLGNvbG9yOm4oODMpLGRpcmVjdGlvbjp7IiI6big4NCkscnRsOm4oODUpfSxmbG9hdDp7Y2VudGVyOm4oODYpLGZ1bGw6big4NyksbGVmdDpuKDg4KSxyaWdodDpuKDg5KX0sZm9ybXVsYTpuKDkwKSxoZWFkZXI6ezE6big5MSksMjpuKDkyKX0saXRhbGljOm4oOTMpLGltYWdlOm4oOTQpLGluZGVudDp7IisxIjpuKDk1KSwiLTEiOm4oOTYpfSxsaW5rOm4oOTcpLGxpc3Q6e29yZGVyZWQ6big5OCksYnVsbGV0Om4oOTkpLGNoZWNrOm4oMTAwKX0sc2NyaXB0OntzdWI6bigxMDEpLHN1cGVyOm4oMTAyKX0sc3RyaWtlOm4oMTAzKSx1bmRlcmxpbmU6bigxMDQpLHZpZGVvOm4oMTA1KX19LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciByPW4oMSksbz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy5kb21Ob2RlPXQsdGhpcy5kb21Ob2RlW3IuREFUQV9LRVldPXtibG90OnRoaXN9fXJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsInN0YXRpY3MiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvcn0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSx0LmNyZWF0ZT1mdW5jdGlvbih0KXtpZihudWxsPT10aGlzLnRhZ05hbWUpdGhyb3cgbmV3IHIuUGFyY2htZW50RXJyb3IoIkJsb3QgZGVmaW5pdGlvbiBtaXNzaW5nIHRhZ05hbWUiKTt2YXIgZTtyZXR1cm4gQXJyYXkuaXNBcnJheSh0aGlzLnRhZ05hbWUpPygic3RyaW5nIj09dHlwZW9mIHQmJih0PXQudG9VcHBlckNhc2UoKSxwYXJzZUludCh0KS50b1N0cmluZygpPT09dCYmKHQ9cGFyc2VJbnQodCkpKSxlPSJudW1iZXIiPT10eXBlb2YgdD9kb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoaXMudGFnTmFtZVt0LTFdKTp0aGlzLnRhZ05hbWUuaW5kZXhPZih0KT4tMT9kb2N1bWVudC5jcmVhdGVFbGVtZW50KHQpOmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGhpcy50YWdOYW1lWzBdKSk6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoaXMudGFnTmFtZSksdGhpcy5jbGFzc05hbWUmJmUuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZSksZX0sdC5wcm90b3R5cGUuYXR0YWNoPWZ1bmN0aW9uKCl7bnVsbCE9dGhpcy5wYXJlbnQmJih0aGlzLnNjcm9sbD10aGlzLnBhcmVudC5zY3JvbGwpfSx0LnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuZG9tTm9kZS5jbG9uZU5vZGUoITEpO3JldHVybiByLmNyZWF0ZSh0KX0sdC5wcm90b3R5cGUuZGV0YWNoPWZ1bmN0aW9uKCl7bnVsbCE9dGhpcy5wYXJlbnQmJnRoaXMucGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpLGRlbGV0ZSB0aGlzLmRvbU5vZGVbci5EQVRBX0tFWV19LHQucHJvdG90eXBlLmRlbGV0ZUF0PWZ1bmN0aW9uKHQsZSl7dGhpcy5pc29sYXRlKHQsZSkucmVtb3ZlKCl9LHQucHJvdG90eXBlLmZvcm1hdEF0PWZ1bmN0aW9uKHQsZSxuLG8pe3ZhciBpPXRoaXMuaXNvbGF0ZSh0LGUpO2lmKG51bGwhPXIucXVlcnkobixyLlNjb3BlLkJMT1QpJiZvKWkud3JhcChuLG8pO2Vsc2UgaWYobnVsbCE9ci5xdWVyeShuLHIuU2NvcGUuQVRUUklCVVRFKSl7dmFyIGw9ci5jcmVhdGUodGhpcy5zdGF0aWNzLnNjb3BlKTtpLndyYXAobCksbC5mb3JtYXQobixvKX19LHQucHJvdG90eXBlLmluc2VydEF0PWZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1udWxsPT1uP3IuY3JlYXRlKCJ0ZXh0IixlKTpyLmNyZWF0ZShlLG4pLGk9dGhpcy5zcGxpdCh0KTt0aGlzLnBhcmVudC5pbnNlcnRCZWZvcmUobyxpKX0sdC5wcm90b3R5cGUuaW5zZXJ0SW50bz1mdW5jdGlvbih0LGUpe3ZvaWQgMD09PWUmJihlPW51bGwpLG51bGwhPXRoaXMucGFyZW50JiZ0aGlzLnBhcmVudC5jaGlsZHJlbi5yZW1vdmUodGhpcyk7dmFyIG49bnVsbDt0LmNoaWxkcmVuLmluc2VydEJlZm9yZSh0aGlzLGUpLG51bGwhPWUmJihuPWUuZG9tTm9kZSksdGhpcy5kb21Ob2RlLnBhcmVudE5vZGU9PXQuZG9tTm9kZSYmdGhpcy5kb21Ob2RlLm5leHRTaWJsaW5nPT1ufHx0LmRvbU5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuZG9tTm9kZSxuKSx0aGlzLnBhcmVudD10LHRoaXMuYXR0YWNoKCl9LHQucHJvdG90eXBlLmlzb2xhdGU9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLnNwbGl0KHQpO3JldHVybiBuLnNwbGl0KGUpLG59LHQucHJvdG90eXBlLmxlbmd0aD1mdW5jdGlvbigpe3JldHVybiAxfSx0LnByb3RvdHlwZS5vZmZzZXQ9ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PXRoaXMucGFyZW50KSxudWxsPT10aGlzLnBhcmVudHx8dGhpcz09dD8wOnRoaXMucGFyZW50LmNoaWxkcmVuLm9mZnNldCh0aGlzKSt0aGlzLnBhcmVudC5vZmZzZXQodCl9LHQucHJvdG90eXBlLm9wdGltaXplPWZ1bmN0aW9uKHQpe251bGwhPXRoaXMuZG9tTm9kZVtyLkRBVEFfS0VZXSYmZGVsZXRlIHRoaXMuZG9tTm9kZVtyLkRBVEFfS0VZXS5tdXRhdGlvbnN9LHQucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbigpe251bGwhPXRoaXMuZG9tTm9kZS5wYXJlbnROb2RlJiZ0aGlzLmRvbU5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmRvbU5vZGUpLHRoaXMuZGV0YWNoKCl9LHQucHJvdG90eXBlLnJlcGxhY2U9ZnVuY3Rpb24odCl7bnVsbCE9dC5wYXJlbnQmJih0LnBhcmVudC5pbnNlcnRCZWZvcmUodGhpcyx0Lm5leHQpLHQucmVtb3ZlKCkpfSx0LnByb3RvdHlwZS5yZXBsYWNlV2l0aD1mdW5jdGlvbih0LGUpe3ZhciBuPSJzdHJpbmciPT10eXBlb2YgdD9yLmNyZWF0ZSh0LGUpOnQ7cmV0dXJuIG4ucmVwbGFjZSh0aGlzKSxufSx0LnByb3RvdHlwZS5zcGxpdD1mdW5jdGlvbih0LGUpe3JldHVybiAwPT09dD90aGlzOnRoaXMubmV4dH0sdC5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKHQsZSl7fSx0LnByb3RvdHlwZS53cmFwPWZ1bmN0aW9uKHQsZSl7dmFyIG49InN0cmluZyI9PXR5cGVvZiB0P3IuY3JlYXRlKHQsZSk6dDtyZXR1cm4gbnVsbCE9dGhpcy5wYXJlbnQmJnRoaXMucGFyZW50Lmluc2VydEJlZm9yZShuLHRoaXMubmV4dCksbi5hcHBlbmRDaGlsZCh0aGlzKSxufSx0LmJsb3ROYW1lPSJhYnN0cmFjdCIsdH0oKTtlLmRlZmF1bHQ9b30sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHI9bigxMSksbz1uKDI5KSxpPW4oMzApLGw9bigxKSxhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXt0aGlzLmF0dHJpYnV0ZXM9e30sdGhpcy5kb21Ob2RlPXQsdGhpcy5idWlsZCgpfXJldHVybiB0LnByb3RvdHlwZS5hdHRyaWJ1dGU9ZnVuY3Rpb24odCxlKXtlP3QuYWRkKHRoaXMuZG9tTm9kZSxlKSYmKG51bGwhPXQudmFsdWUodGhpcy5kb21Ob2RlKT90aGlzLmF0dHJpYnV0ZXNbdC5hdHRyTmFtZV09dDpkZWxldGUgdGhpcy5hdHRyaWJ1dGVzW3QuYXR0ck5hbWVdKToodC5yZW1vdmUodGhpcy5kb21Ob2RlKSxkZWxldGUgdGhpcy5hdHRyaWJ1dGVzW3QuYXR0ck5hbWVdKX0sdC5wcm90b3R5cGUuYnVpbGQ9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuYXR0cmlidXRlcz17fTt2YXIgZT1yLmRlZmF1bHQua2V5cyh0aGlzLmRvbU5vZGUpLG49by5kZWZhdWx0LmtleXModGhpcy5kb21Ob2RlKSxhPWkuZGVmYXVsdC5rZXlzKHRoaXMuZG9tTm9kZSk7ZS5jb25jYXQobikuY29uY2F0KGEpLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIG49bC5xdWVyeShlLGwuU2NvcGUuQVRUUklCVVRFKTtuIGluc3RhbmNlb2Ygci5kZWZhdWx0JiYodC5hdHRyaWJ1dGVzW24uYXR0ck5hbWVdPW4pfSl9LHQucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztPYmplY3Qua2V5cyh0aGlzLmF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24obil7dmFyIHI9ZS5hdHRyaWJ1dGVzW25dLnZhbHVlKGUuZG9tTm9kZSk7dC5mb3JtYXQobixyKX0pfSx0LnByb3RvdHlwZS5tb3ZlPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7dGhpcy5jb3B5KHQpLE9iamVjdC5rZXlzKHRoaXMuYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbih0KXtlLmF0dHJpYnV0ZXNbdF0ucmVtb3ZlKGUuZG9tTm9kZSl9KSx0aGlzLmF0dHJpYnV0ZXM9e319LHQucHJvdG90eXBlLnZhbHVlcz1mdW5jdGlvbigpe3ZhciB0PXRoaXM7cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuYXR0cmlidXRlcykucmVkdWNlKGZ1bmN0aW9uKGUsbil7cmV0dXJuIGVbbl09dC5hdHRyaWJ1dGVzW25dLnZhbHVlKHQuZG9tTm9kZSksZX0se30pfSx0fSgpO2UuZGVmYXVsdD1hfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIodCxlKXtyZXR1cm4odC5nZXRBdHRyaWJ1dGUoImNsYXNzIil8fCIiKS5zcGxpdCgvXHMrLykuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiAwPT09dC5pbmRleE9mKGUrIi0iKX0pfXZhciBvPXRoaXMmJnRoaXMuX19leHRlbmRzfHxmdW5jdGlvbigpe3ZhciB0PU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbih0LGUpe3QuX19wcm90b19fPWV9fHxmdW5jdGlvbih0LGUpe2Zvcih2YXIgbiBpbiBlKWUuaGFzT3duUHJvcGVydHkobikmJih0W25dPWVbbl0pfTtyZXR1cm4gZnVuY3Rpb24oZSxuKXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfXQoZSxuKSxlLnByb3RvdHlwZT1udWxsPT09bj9PYmplY3QuY3JlYXRlKG4pOihyLnByb3RvdHlwZT1uLnByb3RvdHlwZSxuZXcgcil9fSgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgaT1uKDExKSxsPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gbnVsbCE9PXQmJnQuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybiBvKGUsdCksZS5rZXlzPWZ1bmN0aW9uKHQpe3JldHVybih0LmdldEF0dHJpYnV0ZSgiY2xhc3MiKXx8IiIpLnNwbGl0KC9ccysvKS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQuc3BsaXQoIi0iKS5zbGljZSgwLC0xKS5qb2luKCItIil9KX0sZS5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKHQsZSl7cmV0dXJuISF0aGlzLmNhbkFkZCh0LGUpJiYodGhpcy5yZW1vdmUodCksdC5jbGFzc0xpc3QuYWRkKHRoaXMua2V5TmFtZSsiLSIrZSksITApfSxlLnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24odCl7cih0LHRoaXMua2V5TmFtZSkuZm9yRWFjaChmdW5jdGlvbihlKXt0LmNsYXNzTGlzdC5yZW1vdmUoZSl9KSwwPT09dC5jbGFzc0xpc3QubGVuZ3RoJiZ0LnJlbW92ZUF0dHJpYnV0ZSgiY2xhc3MiKX0sZS5wcm90b3R5cGUudmFsdWU9ZnVuY3Rpb24odCl7dmFyIGU9cih0LHRoaXMua2V5TmFtZSlbMF18fCIiLG49ZS5zbGljZSh0aGlzLmtleU5hbWUubGVuZ3RoKzEpO3JldHVybiB0aGlzLmNhbkFkZCh0LG4pP246IiJ9LGV9KGkuZGVmYXVsdCk7ZS5kZWZhdWx0PWx9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcih0KXt2YXIgZT10LnNwbGl0KCItIiksbj1lLnNsaWNlKDEpLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdFswXS50b1VwcGVyQ2FzZSgpK3Quc2xpY2UoMSl9KS5qb2luKCIiKTtyZXR1cm4gZVswXStufXZhciBvPXRoaXMmJnRoaXMuX19leHRlbmRzfHxmdW5jdGlvbigpe3ZhciB0PU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbih0LGUpe3QuX19wcm90b19fPWV9fHxmdW5jdGlvbih0LGUpe2Zvcih2YXIgbiBpbiBlKWUuaGFzT3duUHJvcGVydHkobikmJih0W25dPWVbbl0pfTtyZXR1cm4gZnVuY3Rpb24oZSxuKXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfXQoZSxuKSxlLnByb3RvdHlwZT1udWxsPT09bj9PYmplY3QuY3JlYXRlKG4pOihyLnByb3RvdHlwZT1uLnByb3RvdHlwZSxuZXcgcil9fSgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgaT1uKDExKSxsPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gbnVsbCE9PXQmJnQuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybiBvKGUsdCksZS5rZXlzPWZ1bmN0aW9uKHQpe3JldHVybih0LmdldEF0dHJpYnV0ZSgic3R5bGUiKXx8IiIpLnNwbGl0KCI7IikubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LnNwbGl0KCI6IilbMF0udHJpbSgpfSl9LGUucHJvdG90eXBlLmFkZD1mdW5jdGlvbih0LGUpe3JldHVybiEhdGhpcy5jYW5BZGQodCxlKSYmKHQuc3R5bGVbcih0aGlzLmtleU5hbWUpXT1lLCEwKX0sZS5wcm90b3R5cGUucmVtb3ZlPWZ1bmN0aW9uKHQpe3Quc3R5bGVbcih0aGlzLmtleU5hbWUpXT0iIix0LmdldEF0dHJpYnV0ZSgic3R5bGUiKXx8dC5yZW1vdmVBdHRyaWJ1dGUoInN0eWxlIil9LGUucHJvdG90eXBlLnZhbHVlPWZ1bmN0aW9uKHQpe3ZhciBlPXQuc3R5bGVbcih0aGlzLmtleU5hbWUpXTtyZXR1cm4gdGhpcy5jYW5BZGQodCxlKT9lOiIifSxlfShpLmRlZmF1bHQpO2UuZGVmYXVsdD1sfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWZ1bmN0aW9uIG8odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1mdW5jdGlvbiBpKHQsZSl7aWYoIXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTtyZXR1cm4hZXx8Im9iamVjdCIhPXR5cGVvZiBlJiYiZnVuY3Rpb24iIT10eXBlb2YgZT90OmV9ZnVuY3Rpb24gbCh0LGUpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIrdHlwZW9mIGUpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLGUmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHQsZSk6dC5fX3Byb3RvX189ZSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe3ZhciBuPVtdLHI9ITAsbz0hMSxpPXZvaWQgMDt0cnl7Zm9yKHZhciBsLGE9dFtTeW1ib2wuaXRlcmF0b3JdKCk7IShyPShsPWEubmV4dCgpKS5kb25lKSYmKG4ucHVzaChsLnZhbHVlKSwhZXx8bi5sZW5ndGghPT1lKTtyPSEwKTt9Y2F0Y2godCl7bz0hMCxpPXR9ZmluYWxseXt0cnl7IXImJmEucmV0dXJuJiZhLnJldHVybigpfWZpbmFsbHl7aWYobyl0aHJvdyBpfX1yZXR1cm4gbn1yZXR1cm4gZnVuY3Rpb24oZSxuKXtpZihBcnJheS5pc0FycmF5KGUpKXJldHVybiBlO2lmKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoZSkpcmV0dXJuIHQoZSxuKTt0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIil9fSgpLHM9ZnVuY3Rpb24gdChlLG4scil7bnVsbD09PWUmJihlPUZ1bmN0aW9uLnByb3RvdHlwZSk7dmFyIG89T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLG4pO2lmKHZvaWQgMD09PW8pe3ZhciBpPU9iamVjdC5nZXRQcm90b3R5cGVPZihlKTtyZXR1cm4gbnVsbD09PWk/dm9pZCAwOnQoaSxuLHIpfWlmKCJ2YWx1ZSJpbiBvKXJldHVybiBvLnZhbHVlO3ZhciBsPW8uZ2V0O2lmKHZvaWQgMCE9PWwpcmV0dXJuIGwuY2FsbChyKX0sdT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LHIua2V5LHIpfX1yZXR1cm4gZnVuY3Rpb24oZSxuLHIpe3JldHVybiBuJiZ0KGUucHJvdG90eXBlLG4pLHImJnQoZSxyKSxlfX0oKSxjPW4oMCksZj1yKGMpLGg9big4KSxwPXIoaCksZD1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKHQsbil7byh0aGlzLGUpO3ZhciByPWkodGhpcywoZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlKSkuY2FsbCh0aGlzLHQpKTtyZXR1cm4gci5zZWxlY3Rpb249bixyLnRleHROb2RlPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGUuQ09OVEVOVFMpLHIuZG9tTm9kZS5hcHBlbmRDaGlsZChyLnRleHROb2RlKSxyLl9sZW5ndGg9MCxyfXJldHVybiBsKGUsdCksdShlLG51bGwsW3trZXk6InZhbHVlIix2YWx1ZTpmdW5jdGlvbigpe319XSksdShlLFt7a2V5OiJkZXRhY2giLHZhbHVlOmZ1bmN0aW9uKCl7bnVsbCE9dGhpcy5wYXJlbnQmJnRoaXMucGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpfX0se2tleToiZm9ybWF0Iix2YWx1ZTpmdW5jdGlvbih0LG4pe2lmKDAhPT10aGlzLl9sZW5ndGgpcmV0dXJuIHMoZS5wcm90b3R5cGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZS5wcm90b3R5cGUpLCJmb3JtYXQiLHRoaXMpLmNhbGwodGhpcyx0LG4pO2Zvcih2YXIgcj10aGlzLG89MDtudWxsIT1yJiZyLnN0YXRpY3Muc2NvcGUhPT1mLmRlZmF1bHQuU2NvcGUuQkxPQ0tfQkxPVDspbys9ci5vZmZzZXQoci5wYXJlbnQpLHI9ci5wYXJlbnQ7bnVsbCE9ciYmKHRoaXMuX2xlbmd0aD1lLkNPTlRFTlRTLmxlbmd0aCxyLm9wdGltaXplKCksci5mb3JtYXRBdChvLGUuQ09OVEVOVFMubGVuZ3RoLHQsbiksdGhpcy5fbGVuZ3RoPTApfX0se2tleToiaW5kZXgiLHZhbHVlOmZ1bmN0aW9uKHQsbil7cmV0dXJuIHQ9PT10aGlzLnRleHROb2RlPzA6cyhlLnByb3RvdHlwZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlLnByb3RvdHlwZSksImluZGV4Iix0aGlzKS5jYWxsKHRoaXMsdCxuKX19LHtrZXk6Imxlbmd0aCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbGVuZ3RofX0se2tleToicG9zaXRpb24iLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuW3RoaXMudGV4dE5vZGUsdGhpcy50ZXh0Tm9kZS5kYXRhLmxlbmd0aF19fSx7a2V5OiJyZW1vdmUiLHZhbHVlOmZ1bmN0aW9uKCl7cyhlLnByb3RvdHlwZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlLnByb3RvdHlwZSksInJlbW92ZSIsdGhpcykuY2FsbCh0aGlzKSx0aGlzLnBhcmVudD1udWxsfX0se2tleToicmVzdG9yZSIsdmFsdWU6ZnVuY3Rpb24oKXtpZighdGhpcy5zZWxlY3Rpb24uY29tcG9zaW5nJiZudWxsIT10aGlzLnBhcmVudCl7dmFyIHQ9dGhpcy50ZXh0Tm9kZSxuPXRoaXMuc2VsZWN0aW9uLmdldE5hdGl2ZVJhbmdlKCkscj12b2lkIDAsbz12b2lkIDAsaT12b2lkIDA7aWYobnVsbCE9biYmbi5zdGFydC5ub2RlPT09dCYmbi5lbmQubm9kZT09PXQpe3ZhciBsPVt0LG4uc3RhcnQub2Zmc2V0LG4uZW5kLm9mZnNldF07cj1sWzBdLG89bFsxXSxpPWxbMl19Zm9yKDtudWxsIT10aGlzLmRvbU5vZGUubGFzdENoaWxkJiZ0aGlzLmRvbU5vZGUubGFzdENoaWxkIT09dGhpcy50ZXh0Tm9kZTspdGhpcy5kb21Ob2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuZG9tTm9kZS5sYXN0Q2hpbGQsdGhpcy5kb21Ob2RlKTtpZih0aGlzLnRleHROb2RlLmRhdGEhPT1lLkNPTlRFTlRTKXt2YXIgcz10aGlzLnRleHROb2RlLmRhdGEuc3BsaXQoZS5DT05URU5UUykuam9pbigiIik7dGhpcy5uZXh0IGluc3RhbmNlb2YgcC5kZWZhdWx0PyhyPXRoaXMubmV4dC5kb21Ob2RlLHRoaXMubmV4dC5pbnNlcnRBdCgwLHMpLHRoaXMudGV4dE5vZGUuZGF0YT1lLkNPTlRFTlRTKToodGhpcy50ZXh0Tm9kZS5kYXRhPXMsdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKGYuZGVmYXVsdC5jcmVhdGUodGhpcy50ZXh0Tm9kZSksdGhpcyksdGhpcy50ZXh0Tm9kZT1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShlLkNPTlRFTlRTKSx0aGlzLmRvbU5vZGUuYXBwZW5kQ2hpbGQodGhpcy50ZXh0Tm9kZSkpfWlmKHRoaXMucmVtb3ZlKCksbnVsbCE9byl7dmFyIHU9W28saV0ubWFwKGZ1bmN0aW9uKHQpe3JldHVybiBNYXRoLm1heCgwLE1hdGgubWluKHIuZGF0YS5sZW5ndGgsdC0xKSl9KSxjPWEodSwyKTtyZXR1cm4gbz1jWzBdLGk9Y1sxXSx7c3RhcnROb2RlOnIsc3RhcnRPZmZzZXQ6byxlbmROb2RlOnIsZW5kT2Zmc2V0Oml9fX19fSx7a2V5OiJ1cGRhdGUiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcztpZih0LnNvbWUoZnVuY3Rpb24odCl7cmV0dXJuImNoYXJhY3RlckRhdGEiPT09dC50eXBlJiZ0LnRhcmdldD09PW4udGV4dE5vZGV9KSl7dmFyIHI9dGhpcy5yZXN0b3JlKCk7ciYmKGUucmFuZ2U9cil9fX0se2tleToidmFsdWUiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIiJ9fV0pLGV9KGYuZGVmYXVsdC5FbWJlZCk7ZC5ibG90TmFtZT0iY3Vyc29yIixkLmNsYXNzTmFtZT0icWwtY3Vyc29yIixkLnRhZ05hbWU9InNwYW4iLGQuQ09OVEVOVFM9Ilx1ZmVmZiIsZS5kZWZhdWx0PWR9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LHIua2V5LHIpfX1yZXR1cm4gZnVuY3Rpb24oZSxuLHIpe3JldHVybiBuJiZ0KGUucHJvdG90eXBlLG4pLHImJnQoZSxyKSxlfX0oKSxpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlLG4pe3IodGhpcyx0KSx0aGlzLnF1aWxsPWUsdGhpcy5vcHRpb25zPW4sdGhpcy5tb2R1bGVzPXt9fXJldHVybiBvKHQsW3trZXk6ImluaXQiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztPYmplY3Qua2V5cyh0aGlzLm9wdGlvbnMubW9kdWxlcykuZm9yRWFjaChmdW5jdGlvbihlKXtudWxsPT10Lm1vZHVsZXNbZV0mJnQuYWRkTW9kdWxlKGUpfSl9fSx7a2V5OiJhZGRNb2R1bGUiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMucXVpbGwuY29uc3RydWN0b3IuaW1wb3J0KCJtb2R1bGVzLyIrdCk7cmV0dXJuIHRoaXMubW9kdWxlc1t0XT1uZXcgZSh0aGlzLnF1aWxsLHRoaXMub3B0aW9ucy5tb2R1bGVzW3RdfHx7fSksdGhpcy5tb2R1bGVzW3RdfX1dKSx0fSgpO2kuREVGQVVMVFM9e21vZHVsZXM6e319LGkudGhlbWVzPXtkZWZhdWx0Oml9LGUuZGVmYXVsdD1pfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWZ1bmN0aW9uIG8odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1mdW5jdGlvbiBpKHQsZSl7aWYoIXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTtyZXR1cm4hZXx8Im9iamVjdCIhPXR5cGVvZiBlJiYiZnVuY3Rpb24iIT10eXBlb2YgZT90OmV9ZnVuY3Rpb24gbCh0LGUpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIrdHlwZW9mIGUpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLGUmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHQsZSk6dC5fX3Byb3RvX189ZSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsci5rZXkscil9fXJldHVybiBmdW5jdGlvbihlLG4scil7cmV0dXJuIG4mJnQoZS5wcm90b3R5cGUsbiksciYmdChlLHIpLGV9fSgpLHM9ZnVuY3Rpb24gdChlLG4scil7bnVsbD09PWUmJihlPUZ1bmN0aW9uLnByb3RvdHlwZSk7dmFyIG89T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLG4pO2lmKHZvaWQgMD09PW8pe3ZhciBpPU9iamVjdC5nZXRQcm90b3R5cGVPZihlKTtyZXR1cm4gbnVsbD09PWk/dm9pZCAwOnQoaSxuLHIpfWlmKCJ2YWx1ZSJpbiBvKXJldHVybiBvLnZhbHVlO3ZhciBsPW8uZ2V0O2lmKHZvaWQgMCE9PWwpcmV0dXJuIGwuY2FsbChyKX0sdT1uKDApLGM9cih1KSxmPW4oOCksaD1yKGYpLHA9Ilx1ZmVmZiIsZD1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKHQpe28odGhpcyxlKTt2YXIgbj1pKHRoaXMsKGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSkpLmNhbGwodGhpcyx0KSk7cmV0dXJuIG4uY29udGVudE5vZGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3BhbiIpLG4uY29udGVudE5vZGUuc2V0QXR0cmlidXRlKCJjb250ZW50ZWRpdGFibGUiLCExKSxbXS5zbGljZS5jYWxsKG4uZG9tTm9kZS5jaGlsZE5vZGVzKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe24uY29udGVudE5vZGUuYXBwZW5kQ2hpbGQodCl9KSxuLmxlZnRHdWFyZD1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShwKSxuLnJpZ2h0R3VhcmQ9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocCksbi5kb21Ob2RlLmFwcGVuZENoaWxkKG4ubGVmdEd1YXJkKSxuLmRvbU5vZGUuYXBwZW5kQ2hpbGQobi5jb250ZW50Tm9kZSksbi5kb21Ob2RlLmFwcGVuZENoaWxkKG4ucmlnaHRHdWFyZCksbn1yZXR1cm4gbChlLHQpLGEoZSxbe2tleToiaW5kZXgiLHZhbHVlOmZ1bmN0aW9uKHQsbil7cmV0dXJuIHQ9PT10aGlzLmxlZnRHdWFyZD8wOnQ9PT10aGlzLnJpZ2h0R3VhcmQ/MTpzKGUucHJvdG90eXBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUucHJvdG90eXBlKSwiaW5kZXgiLHRoaXMpLmNhbGwodGhpcyx0LG4pfX0se2tleToicmVzdG9yZSIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dm9pZCAwLG49dm9pZCAwLHI9dC5kYXRhLnNwbGl0KHApLmpvaW4oIiIpO2lmKHQ9PT10aGlzLmxlZnRHdWFyZClpZih0aGlzLnByZXYgaW5zdGFuY2VvZiBoLmRlZmF1bHQpe3ZhciBvPXRoaXMucHJldi5sZW5ndGgoKTt0aGlzLnByZXYuaW5zZXJ0QXQobyxyKSxlPXtzdGFydE5vZGU6dGhpcy5wcmV2LmRvbU5vZGUsc3RhcnRPZmZzZXQ6bytyLmxlbmd0aH19ZWxzZSBuPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHIpLHRoaXMucGFyZW50Lmluc2VydEJlZm9yZShjLmRlZmF1bHQuY3JlYXRlKG4pLHRoaXMpLGU9e3N0YXJ0Tm9kZTpuLHN0YXJ0T2Zmc2V0OnIubGVuZ3RofTtlbHNlIHQ9PT10aGlzLnJpZ2h0R3VhcmQmJih0aGlzLm5leHQgaW5zdGFuY2VvZiBoLmRlZmF1bHQ/KHRoaXMubmV4dC5pbnNlcnRBdCgwLHIpLGU9e3N0YXJ0Tm9kZTp0aGlzLm5leHQuZG9tTm9kZSxzdGFydE9mZnNldDpyLmxlbmd0aH0pOihuPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHIpLHRoaXMucGFyZW50Lmluc2VydEJlZm9yZShjLmRlZmF1bHQuY3JlYXRlKG4pLHRoaXMubmV4dCksZT17c3RhcnROb2RlOm4sc3RhcnRPZmZzZXQ6ci5sZW5ndGh9KSk7cmV0dXJuIHQuZGF0YT1wLGV9fSx7a2V5OiJ1cGRhdGUiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpczt0LmZvckVhY2goZnVuY3Rpb24odCl7aWYoImNoYXJhY3RlckRhdGEiPT09dC50eXBlJiYodC50YXJnZXQ9PT1uLmxlZnRHdWFyZHx8dC50YXJnZXQ9PT1uLnJpZ2h0R3VhcmQpKXt2YXIgcj1uLnJlc3RvcmUodC50YXJnZXQpO3ImJihlLnJhbmdlPXIpfX0pfX1dKSxlfShjLmRlZmF1bHQuRW1iZWQpO2UuZGVmYXVsdD1kfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxlLkFsaWduU3R5bGU9ZS5BbGlnbkNsYXNzPWUuQWxpZ25BdHRyaWJ1dGU9dm9pZCAwO3ZhciByPW4oMCksbz1mdW5jdGlvbih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19KHIpLGk9e3Njb3BlOm8uZGVmYXVsdC5TY29wZS5CTE9DSyx3aGl0ZWxpc3Q6WyJyaWdodCIsImNlbnRlciIsImp1c3RpZnkiXX0sbD1uZXcgby5kZWZhdWx0LkF0dHJpYnV0b3IuQXR0cmlidXRlKCJhbGlnbiIsImFsaWduIixpKSxhPW5ldyBvLmRlZmF1bHQuQXR0cmlidXRvci5DbGFzcygiYWxpZ24iLCJxbC1hbGlnbiIsaSkscz1uZXcgby5kZWZhdWx0LkF0dHJpYnV0b3IuU3R5bGUoImFsaWduIiwidGV4dC1hbGlnbiIsaSk7ZS5BbGlnbkF0dHJpYnV0ZT1sLGUuQWxpZ25DbGFzcz1hLGUuQWxpZ25TdHlsZT1zfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxlLkJhY2tncm91bmRTdHlsZT1lLkJhY2tncm91bmRDbGFzcz12b2lkIDA7dmFyIHI9bigwKSxvPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX0ociksaT1uKDI0KSxsPW5ldyBvLmRlZmF1bHQuQXR0cmlidXRvci5DbGFzcygiYmFja2dyb3VuZCIsInFsLWJnIix7c2NvcGU6by5kZWZhdWx0LlNjb3BlLklOTElORX0pLGE9bmV3IGkuQ29sb3JBdHRyaWJ1dG9yKCJiYWNrZ3JvdW5kIiwiYmFja2dyb3VuZC1jb2xvciIse3Njb3BlOm8uZGVmYXVsdC5TY29wZS5JTkxJTkV9KTtlLkJhY2tncm91bmRDbGFzcz1sLGUuQmFja2dyb3VuZFN0eWxlPWF9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLGUuRGlyZWN0aW9uU3R5bGU9ZS5EaXJlY3Rpb25DbGFzcz1lLkRpcmVjdGlvbkF0dHJpYnV0ZT12b2lkIDA7dmFyIHI9bigwKSxvPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX0ociksaT17c2NvcGU6by5kZWZhdWx0LlNjb3BlLkJMT0NLLHdoaXRlbGlzdDpbInJ0bCJdfSxsPW5ldyBvLmRlZmF1bHQuQXR0cmlidXRvci5BdHRyaWJ1dGUoImRpcmVjdGlvbiIsImRpciIsaSksYT1uZXcgby5kZWZhdWx0LkF0dHJpYnV0b3IuQ2xhc3MoImRpcmVjdGlvbiIsInFsLWRpcmVjdGlvbiIsaSkscz1uZXcgby5kZWZhdWx0LkF0dHJpYnV0b3IuU3R5bGUoImRpcmVjdGlvbiIsImRpcmVjdGlvbiIsaSk7ZS5EaXJlY3Rpb25BdHRyaWJ1dGU9bCxlLkRpcmVjdGlvbkNsYXNzPWEsZS5EaXJlY3Rpb25TdHlsZT1zfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1mdW5jdGlvbiBvKHQsZSl7aWYoIXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTtyZXR1cm4hZXx8Im9iamVjdCIhPXR5cGVvZiBlJiYiZnVuY3Rpb24iIT10eXBlb2YgZT90OmV9ZnVuY3Rpb24gaSh0LGUpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIrdHlwZW9mIGUpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLGUmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHQsZSk6dC5fX3Byb3RvX189ZSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLGUuRm9udENsYXNzPWUuRm9udFN0eWxlPXZvaWQgMDt2YXIgbD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LHIua2V5LHIpfX1yZXR1cm4gZnVuY3Rpb24oZSxuLHIpe3JldHVybiBuJiZ0KGUucHJvdG90eXBlLG4pLHImJnQoZSxyKSxlfX0oKSxhPWZ1bmN0aW9uIHQoZSxuLHIpe251bGw9PT1lJiYoZT1GdW5jdGlvbi5wcm90b3R5cGUpO3ZhciBvPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxuKTtpZih2b2lkIDA9PT1vKXt2YXIgaT1PYmplY3QuZ2V0UHJvdG90eXBlT2YoZSk7cmV0dXJuIG51bGw9PT1pP3ZvaWQgMDp0KGksbixyKX1pZigidmFsdWUiaW4gbylyZXR1cm4gby52YWx1ZTt2YXIgbD1vLmdldDtpZih2b2lkIDAhPT1sKXJldHVybiBsLmNhbGwocil9LHM9bigwKSx1PWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX0ocyksYz17c2NvcGU6dS5kZWZhdWx0LlNjb3BlLklOTElORSx3aGl0ZWxpc3Q6WyJzZXJpZiIsIm1vbm9zcGFjZSJdfSxmPW5ldyB1LmRlZmF1bHQuQXR0cmlidXRvci5DbGFzcygiZm9udCIsInFsLWZvbnQiLGMpLGg9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3JldHVybiByKHRoaXMsZSksbyh0aGlzLChlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpKS5hcHBseSh0aGlzLGFyZ3VtZW50cykpfXJldHVybiBpKGUsdCksbChlLFt7a2V5OiJ2YWx1ZSIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIGEoZS5wcm90b3R5cGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZS5wcm90b3R5cGUpLCJ2YWx1ZSIsdGhpcykuY2FsbCh0aGlzLHQpLnJlcGxhY2UoL1siJ10vZywiIil9fV0pLGV9KHUuZGVmYXVsdC5BdHRyaWJ1dG9yLlN0eWxlKSxwPW5ldyBoKCJmb250IiwiZm9udC1mYW1pbHkiLGMpO2UuRm9udFN0eWxlPXAsZS5Gb250Q2xhc3M9Zn0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZS5TaXplU3R5bGU9ZS5TaXplQ2xhc3M9dm9pZCAwO3ZhciByPW4oMCksbz1mdW5jdGlvbih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19KHIpLGk9bmV3IG8uZGVmYXVsdC5BdHRyaWJ1dG9yLkNsYXNzKCJzaXplIiwicWwtc2l6ZSIse3Njb3BlOm8uZGVmYXVsdC5TY29wZS5JTkxJTkUsd2hpdGVsaXN0Olsic21hbGwiLCJsYXJnZSIsImh1Z2UiXX0pLGw9bmV3IG8uZGVmYXVsdC5BdHRyaWJ1dG9yLlN0eWxlKCJzaXplIiwiZm9udC1zaXplIix7c2NvcGU6by5kZWZhdWx0LlNjb3BlLklOTElORSx3aGl0ZWxpc3Q6WyIxMHB4IiwiMThweCIsIjMycHgiXX0pO2UuU2l6ZUNsYXNzPWksZS5TaXplU3R5bGU9bH0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9ZnVuY3Rpb24gbyh0LGUpe2lmKCF0KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7cmV0dXJuIWV8fCJvYmplY3QiIT10eXBlb2YgZSYmImZ1bmN0aW9uIiE9dHlwZW9mIGU/dDplfWZ1bmN0aW9uIGkodCxlKXtpZigiZnVuY3Rpb24iIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAiK3R5cGVvZiBlKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxlJiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZih0LGUpOnQuX19wcm90b19fPWUpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LHIua2V5LHIpfX1yZXR1cm4gZnVuY3Rpb24oZSxuLHIpe3JldHVybiBuJiZ0KGUucHJvdG90eXBlLG4pLHImJnQoZSxyKSxlfX0oKSxhPWZ1bmN0aW9uIHQoZSxuLHIpe251bGw9PT1lJiYoZT1GdW5jdGlvbi5wcm90b3R5cGUpO3ZhciBvPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxuKTtpZih2b2lkIDA9PT1vKXt2YXIgaT1PYmplY3QuZ2V0UHJvdG90eXBlT2YoZSk7cmV0dXJuIG51bGw9PT1pP3ZvaWQgMDp0KGksbixyKX1pZigidmFsdWUiaW4gbylyZXR1cm4gby52YWx1ZTt2YXIgbD1vLmdldDtpZih2b2lkIDAhPT1sKXJldHVybiBsLmNhbGwocil9LHM9big1KSx1PWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX0ocyksYz1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7cmV0dXJuIHIodGhpcyxlKSxvKHRoaXMsKGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSkpLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9cmV0dXJuIGkoZSx0KSxsKGUsW3trZXk6Im9wdGltaXplIix2YWx1ZTpmdW5jdGlvbih0KXthKGUucHJvdG90eXBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUucHJvdG90eXBlKSwib3B0aW1pemUiLHRoaXMpLmNhbGwodGhpcyx0KSx0aGlzLmRvbU5vZGUudGFnTmFtZSE9PXRoaXMuc3RhdGljcy50YWdOYW1lWzBdJiZ0aGlzLnJlcGxhY2VXaXRoKHRoaXMuc3RhdGljcy5ibG90TmFtZSl9fV0sW3trZXk6ImNyZWF0ZSIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gYShlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpLCJjcmVhdGUiLHRoaXMpLmNhbGwodGhpcyl9fSx7a2V5OiJmb3JtYXRzIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiEwfX1dKSxlfSh1LmRlZmF1bHQpO2MuYmxvdE5hbWU9ImJvbGQiLGMudGFnTmFtZT1bIlNUUk9ORyIsIkIiXSxlLmRlZmF1bHQ9Y30sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9Jzxzdmcgdmlld2JveD0iMCAwIDE4IDE4Ij4gPHBvbHlsaW5lIGNsYXNzPSJxbC1ldmVuIHFsLXN0cm9rZSIgcG9pbnRzPSI1IDcgMyA5IDUgMTEiPjwvcG9seWxpbmU+IDxwb2x5bGluZSBjbGFzcz0icWwtZXZlbiBxbC1zdHJva2UiIHBvaW50cz0iMTMgNyAxNSA5IDEzIDExIj48L3BvbHlsaW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MTAgeDI9OCB5MT01IHkyPTEzPjwvbGluZT4gPC9zdmc+J30sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9ZnVuY3Rpb24gbyh0LGUpe2lmKCF0KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7cmV0dXJuIWV8fCJvYmplY3QiIT10eXBlb2YgZSYmImZ1bmN0aW9uIiE9dHlwZW9mIGU/dDplfWZ1bmN0aW9uIGkodCxlKXtpZigiZnVuY3Rpb24iIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAiK3R5cGVvZiBlKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxlJiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZih0LGUpOnQuX19wcm90b19fPWUpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LHIua2V5LHIpfX1yZXR1cm4gZnVuY3Rpb24oZSxuLHIpe3JldHVybiBuJiZ0KGUucHJvdG90eXBlLG4pLHImJnQoZSxyKSxlfX0oKSxhPWZ1bmN0aW9uIHQoZSxuLHIpe251bGw9PT1lJiYoZT1GdW5jdGlvbi5wcm90b3R5cGUpO3ZhciBvPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxuKTtpZih2b2lkIDA9PT1vKXt2YXIgaT1PYmplY3QuZ2V0UHJvdG90eXBlT2YoZSk7cmV0dXJuIG51bGw9PT1pP3ZvaWQgMDp0KGksbixyKX1pZigidmFsdWUiaW4gbylyZXR1cm4gby52YWx1ZTt2YXIgbD1vLmdldDtpZih2b2lkIDAhPT1sKXJldHVybiBsLmNhbGwocil9LHM9bigxNiksdT1mdW5jdGlvbih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19KHMpLGM9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSh0LG4pe3IodGhpcyxlKTt2YXIgaT1vKHRoaXMsKGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSkpLmNhbGwodGhpcyx0KSk7cmV0dXJuIGkubGFiZWwuaW5uZXJIVE1MPW4saS5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgicWwtY29sb3ItcGlja2VyIiksW10uc2xpY2UuY2FsbChpLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCIucWwtcGlja2VyLWl0ZW0iKSwwLDcpLmZvckVhY2goZnVuY3Rpb24odCl7dC5jbGFzc0xpc3QuYWRkKCJxbC1wcmltYXJ5Iil9KSxpfXJldHVybiBpKGUsdCksbChlLFt7a2V5OiJidWlsZEl0ZW0iLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBuPWEoZS5wcm90b3R5cGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZS5wcm90b3R5cGUpLCJidWlsZEl0ZW0iLHRoaXMpLmNhbGwodGhpcyx0KTtyZXR1cm4gbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9dC5nZXRBdHRyaWJ1dGUoInZhbHVlIil8fCIiLG59fSx7a2V5OiJzZWxlY3RJdGVtIix2YWx1ZTpmdW5jdGlvbih0LG4pe2EoZS5wcm90b3R5cGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZS5wcm90b3R5cGUpLCJzZWxlY3RJdGVtIix0aGlzKS5jYWxsKHRoaXMsdCxuKTt2YXIgcj10aGlzLmxhYmVsLnF1ZXJ5U2VsZWN0b3IoIi5xbC1jb2xvci1sYWJlbCIpLG89dD90LmdldEF0dHJpYnV0ZSgiZGF0YS12YWx1ZSIpfHwiIjoiIjtyJiYoImxpbmUiPT09ci50YWdOYW1lP3Iuc3R5bGUuc3Ryb2tlPW86ci5zdHlsZS5maWxsPW8pfX1dKSxlfSh1LmRlZmF1bHQpO2UuZGVmYXVsdD1jfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1mdW5jdGlvbiBvKHQsZSl7aWYoIXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTtyZXR1cm4hZXx8Im9iamVjdCIhPXR5cGVvZiBlJiYiZnVuY3Rpb24iIT10eXBlb2YgZT90OmV9ZnVuY3Rpb24gaSh0LGUpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIrdHlwZW9mIGUpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLGUmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHQsZSk6dC5fX3Byb3RvX189ZSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBsPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsci5rZXkscil9fXJldHVybiBmdW5jdGlvbihlLG4scil7cmV0dXJuIG4mJnQoZS5wcm90b3R5cGUsbiksciYmdChlLHIpLGV9fSgpLGE9ZnVuY3Rpb24gdChlLG4scil7bnVsbD09PWUmJihlPUZ1bmN0aW9uLnByb3RvdHlwZSk7dmFyIG89T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLG4pO2lmKHZvaWQgMD09PW8pe3ZhciBpPU9iamVjdC5nZXRQcm90b3R5cGVPZihlKTtyZXR1cm4gbnVsbD09PWk/dm9pZCAwOnQoaSxuLHIpfWlmKCJ2YWx1ZSJpbiBvKXJldHVybiBvLnZhbHVlO3ZhciBsPW8uZ2V0O2lmKHZvaWQgMCE9PWwpcmV0dXJuIGwuY2FsbChyKX0scz1uKDE2KSx1PWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX0ocyksYz1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKHQsbil7cih0aGlzLGUpO3ZhciBpPW8odGhpcywoZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlKSkuY2FsbCh0aGlzLHQpKTtyZXR1cm4gaS5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgicWwtaWNvbi1waWNrZXIiKSxbXS5mb3JFYWNoLmNhbGwoaS5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgiLnFsLXBpY2tlci1pdGVtIiksZnVuY3Rpb24odCl7dC5pbm5lckhUTUw9blt0LmdldEF0dHJpYnV0ZSgiZGF0YS12YWx1ZSIpfHwiIl19KSxpLmRlZmF1bHRJdGVtPWkuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoIi5xbC1zZWxlY3RlZCIpLGkuc2VsZWN0SXRlbShpLmRlZmF1bHRJdGVtKSxpfXJldHVybiBpKGUsdCksbChlLFt7a2V5OiJzZWxlY3RJdGVtIix2YWx1ZTpmdW5jdGlvbih0LG4pe2EoZS5wcm90b3R5cGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZS5wcm90b3R5cGUpLCJzZWxlY3RJdGVtIix0aGlzKS5jYWxsKHRoaXMsdCxuKSx0PXR8fHRoaXMuZGVmYXVsdEl0ZW0sdGhpcy5sYWJlbC5pbm5lckhUTUw9dC5pbm5lckhUTUx9fV0pLGV9KHUuZGVmYXVsdCk7ZS5kZWZhdWx0PWN9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LHIua2V5LHIpfX1yZXR1cm4gZnVuY3Rpb24oZSxuLHIpe3JldHVybiBuJiZ0KGUucHJvdG90eXBlLG4pLHImJnQoZSxyKSxlfX0oKSxpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlLG4pe3ZhciBvPXRoaXM7cih0aGlzLHQpLHRoaXMucXVpbGw9ZSx0aGlzLmJvdW5kc0NvbnRhaW5lcj1ufHxkb2N1bWVudC5ib2R5LHRoaXMucm9vdD1lLmFkZENvbnRhaW5lcigicWwtdG9vbHRpcCIpLHRoaXMucm9vdC5pbm5lckhUTUw9dGhpcy5jb25zdHJ1Y3Rvci5URU1QTEFURSx0aGlzLnF1aWxsLnJvb3Q9PT10aGlzLnF1aWxsLnNjcm9sbGluZ0NvbnRhaW5lciYmdGhpcy5xdWlsbC5yb290LmFkZEV2ZW50TGlzdGVuZXIoInNjcm9sbCIsZnVuY3Rpb24oKXtvLnJvb3Quc3R5bGUubWFyZ2luVG9wPS0xKm8ucXVpbGwucm9vdC5zY3JvbGxUb3ArInB4In0pLHRoaXMuaGlkZSgpfXJldHVybiBvKHQsW3trZXk6ImhpZGUiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5yb290LmNsYXNzTGlzdC5hZGQoInFsLWhpZGRlbiIpfX0se2tleToicG9zaXRpb24iLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXQubGVmdCt0LndpZHRoLzItdGhpcy5yb290Lm9mZnNldFdpZHRoLzIsbj10LmJvdHRvbSt0aGlzLnF1aWxsLnJvb3Quc2Nyb2xsVG9wO3RoaXMucm9vdC5zdHlsZS5sZWZ0PWUrInB4Iix0aGlzLnJvb3Quc3R5bGUudG9wPW4rInB4Iix0aGlzLnJvb3QuY2xhc3NMaXN0LnJlbW92ZSgicWwtZmxpcCIpO3ZhciByPXRoaXMuYm91bmRzQ29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLG89dGhpcy5yb290LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGk9MDtpZihvLnJpZ2h0PnIucmlnaHQmJihpPXIucmlnaHQtby5yaWdodCx0aGlzLnJvb3Quc3R5bGUubGVmdD1lK2krInB4Iiksby5sZWZ0PHIubGVmdCYmKGk9ci5sZWZ0LW8ubGVmdCx0aGlzLnJvb3Quc3R5bGUubGVmdD1lK2krInB4Iiksby5ib3R0b20+ci5ib3R0b20pe3ZhciBsPW8uYm90dG9tLW8udG9wLGE9dC5ib3R0b20tdC50b3ArbDt0aGlzLnJvb3Quc3R5bGUudG9wPW4tYSsicHgiLHRoaXMucm9vdC5jbGFzc0xpc3QuYWRkKCJxbC1mbGlwIil9cmV0dXJuIGl9fSx7a2V5OiJzaG93Iix2YWx1ZTpmdW5jdGlvbigpe3RoaXMucm9vdC5jbGFzc0xpc3QucmVtb3ZlKCJxbC1lZGl0aW5nIiksdGhpcy5yb290LmNsYXNzTGlzdC5yZW1vdmUoInFsLWhpZGRlbiIpfX1dKSx0fSgpO2UuZGVmYXVsdD1pfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWZ1bmN0aW9uIG8odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1mdW5jdGlvbiBpKHQsZSl7aWYoIXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTtyZXR1cm4hZXx8Im9iamVjdCIhPXR5cGVvZiBlJiYiZnVuY3Rpb24iIT10eXBlb2YgZT90OmV9ZnVuY3Rpb24gbCh0LGUpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIrdHlwZW9mIGUpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLGUmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHQsZSk6dC5fX3Byb3RvX189ZSl9ZnVuY3Rpb24gYSh0KXt2YXIgZT10Lm1hdGNoKC9eKD86KGh0dHBzPyk6XC9cLyk/KD86KD86d3d3fG0pXC4pP3lvdXR1YmVcLmNvbVwvd2F0Y2guKnY9KFthLXpBLVowLTlfLV0rKS8pfHx0Lm1hdGNoKC9eKD86KGh0dHBzPyk6XC9cLyk/KD86KD86d3d3fG0pXC4pP3lvdXR1XC5iZVwvKFthLXpBLVowLTlfLV0rKS8pO3JldHVybiBlPyhlWzFdfHwiaHR0cHMiKSsiOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLyIrZVsyXSsiP3Nob3dpbmZvPTAiOihlPXQubWF0Y2goL14oPzooaHR0cHM/KTpcL1wvKT8oPzp3d3dcLik/dmltZW9cLmNvbVwvKFxkKykvKSk/KGVbMV18fCJodHRwcyIpKyI6Ly9wbGF5ZXIudmltZW8uY29tL3ZpZGVvLyIrZVsyXSsiLyI6dH1mdW5jdGlvbiBzKHQsZSl7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0mJmFyZ3VtZW50c1syXTtlLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgib3B0aW9uIik7ZT09PW4/ci5zZXRBdHRyaWJ1dGUoInNlbGVjdGVkIiwic2VsZWN0ZWQiKTpyLnNldEF0dHJpYnV0ZSgidmFsdWUiLGUpLHQuYXBwZW5kQ2hpbGQocil9KX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PWUuQmFzZVRvb2x0aXA9dm9pZCAwO3ZhciB1PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsci5rZXkscil9fXJldHVybiBmdW5jdGlvbihlLG4scil7cmV0dXJuIG4mJnQoZS5wcm90b3R5cGUsbiksciYmdChlLHIpLGV9fSgpLGM9ZnVuY3Rpb24gdChlLG4scil7bnVsbD09PWUmJihlPUZ1bmN0aW9uLnByb3RvdHlwZSk7dmFyIG89T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLG4pO2lmKHZvaWQgMD09PW8pe3ZhciBpPU9iamVjdC5nZXRQcm90b3R5cGVPZihlKTtyZXR1cm4gbnVsbD09PWk/dm9pZCAwOnQoaSxuLHIpfWlmKCJ2YWx1ZSJpbiBvKXJldHVybiBvLnZhbHVlO3ZhciBsPW8uZ2V0O2lmKHZvaWQgMCE9PWwpcmV0dXJuIGwuY2FsbChyKX0sZj1uKDIpLGg9cihmKSxwPW4oNCksZD1yKHApLHk9big5KSx2PXIoeSksYj1uKDI1KSxnPXIoYiksbT1uKDMyKSxfPXIobSksTz1uKDQxKSx3PXIoTykseD1uKDQyKSxrPXIoeCksRT1uKDE2KSxOPXIoRSksaj1uKDQzKSxBPXIoaikscT1bITEsImNlbnRlciIsInJpZ2h0IiwianVzdGlmeSJdLFQ9WyIjMDAwMDAwIiwiI2U2MDAwMCIsIiNmZjk5MDAiLCIjZmZmZjAwIiwiIzAwOGEwMCIsIiMwMDY2Y2MiLCIjOTkzM2ZmIiwiI2ZmZmZmZiIsIiNmYWNjY2MiLCIjZmZlYmNjIiwiI2ZmZmZjYyIsIiNjY2U4Y2MiLCIjY2NlMGY1IiwiI2ViZDZmZiIsIiNiYmJiYmIiLCIjZjA2NjY2IiwiI2ZmYzI2NiIsIiNmZmZmNjYiLCIjNjZiOTY2IiwiIzY2YTNlMCIsIiNjMjg1ZmYiLCIjODg4ODg4IiwiI2ExMDAwMCIsIiNiMjZiMDAiLCIjYjJiMjAwIiwiIzAwNjEwMCIsIiMwMDQ3YjIiLCIjNmIyNGIyIiwiIzQ0NDQ0NCIsIiM1YzAwMDAiLCIjNjYzZDAwIiwiIzY2NjYwMCIsIiMwMDM3MDAiLCIjMDAyOTY2IiwiIzNkMTQ2NiJdLFA9WyExLCJzZXJpZiIsIm1vbm9zcGFjZSJdLFM9WyIxIiwiMiIsIjMiLCExXSxDPVsic21hbGwiLCExLCJsYXJnZSIsImh1Z2UiXSxMPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUodCxuKXtvKHRoaXMsZSk7dmFyIHI9aSh0aGlzLChlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpKS5jYWxsKHRoaXMsdCxuKSksbD1mdW5jdGlvbiBlKG4pe2lmKCFkb2N1bWVudC5ib2R5LmNvbnRhaW5zKHQucm9vdCkpcmV0dXJuIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcigiY2xpY2siLGUpO251bGw9PXIudG9vbHRpcHx8ci50b29sdGlwLnJvb3QuY29udGFpbnMobi50YXJnZXQpfHxkb2N1bWVudC5hY3RpdmVFbGVtZW50PT09ci50b29sdGlwLnRleHRib3h8fHIucXVpbGwuaGFzRm9jdXMoKXx8ci50b29sdGlwLmhpZGUoKSxudWxsIT1yLnBpY2tlcnMmJnIucGlja2Vycy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QuY29udGFpbmVyLmNvbnRhaW5zKG4udGFyZ2V0KXx8dC5jbG9zZSgpfSl9O3JldHVybiB0LmVtaXR0ZXIubGlzdGVuRE9NKCJjbGljayIsZG9jdW1lbnQuYm9keSxsKSxyfXJldHVybiBsKGUsdCksdShlLFt7a2V5OiJhZGRNb2R1bGUiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBuPWMoZS5wcm90b3R5cGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZS5wcm90b3R5cGUpLCJhZGRNb2R1bGUiLHRoaXMpLmNhbGwodGhpcyx0KTtyZXR1cm4idG9vbGJhciI9PT10JiZ0aGlzLmV4dGVuZFRvb2xiYXIobiksbn19LHtrZXk6ImJ1aWxkQnV0dG9ucyIsdmFsdWU6ZnVuY3Rpb24odCxlKXt0LmZvckVhY2goZnVuY3Rpb24odCl7KHQuZ2V0QXR0cmlidXRlKCJjbGFzcyIpfHwiIikuc3BsaXQoL1xzKy8pLmZvckVhY2goZnVuY3Rpb24obil7aWYobi5zdGFydHNXaXRoKCJxbC0iKSYmKG49bi5zbGljZSgicWwtIi5sZW5ndGgpLG51bGwhPWVbbl0pKWlmKCJkaXJlY3Rpb24iPT09bil0LmlubmVySFRNTD1lW25dWyIiXStlW25dLnJ0bDtlbHNlIGlmKCJzdHJpbmciPT10eXBlb2YgZVtuXSl0LmlubmVySFRNTD1lW25dO2Vsc2V7dmFyIHI9dC52YWx1ZXx8IiI7bnVsbCE9ciYmZVtuXVtyXSYmKHQuaW5uZXJIVE1MPWVbbl1bcl0pfX0pfSl9fSx7a2V5OiJidWlsZFBpY2tlcnMiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpczt0aGlzLnBpY2tlcnM9dC5tYXAoZnVuY3Rpb24odCl7aWYodC5jbGFzc0xpc3QuY29udGFpbnMoInFsLWFsaWduIikpcmV0dXJuIG51bGw9PXQucXVlcnlTZWxlY3Rvcigib3B0aW9uIikmJnModCxxKSxuZXcgay5kZWZhdWx0KHQsZS5hbGlnbik7aWYodC5jbGFzc0xpc3QuY29udGFpbnMoInFsLWJhY2tncm91bmQiKXx8dC5jbGFzc0xpc3QuY29udGFpbnMoInFsLWNvbG9yIikpe3ZhciBuPXQuY2xhc3NMaXN0LmNvbnRhaW5zKCJxbC1iYWNrZ3JvdW5kIik/ImJhY2tncm91bmQiOiJjb2xvciI7cmV0dXJuIG51bGw9PXQucXVlcnlTZWxlY3Rvcigib3B0aW9uIikmJnModCxULCJiYWNrZ3JvdW5kIj09PW4/IiNmZmZmZmYiOiIjMDAwMDAwIiksbmV3IHcuZGVmYXVsdCh0LGVbbl0pfXJldHVybiBudWxsPT10LnF1ZXJ5U2VsZWN0b3IoIm9wdGlvbiIpJiYodC5jbGFzc0xpc3QuY29udGFpbnMoInFsLWZvbnQiKT9zKHQsUCk6dC5jbGFzc0xpc3QuY29udGFpbnMoInFsLWhlYWRlciIpP3ModCxTKTp0LmNsYXNzTGlzdC5jb250YWlucygicWwtc2l6ZSIpJiZzKHQsQykpLG5ldyBOLmRlZmF1bHQodCl9KTt2YXIgcj1mdW5jdGlvbigpe24ucGlja2Vycy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QudXBkYXRlKCl9KX07dGhpcy5xdWlsbC5vbih2LmRlZmF1bHQuZXZlbnRzLkVESVRPUl9DSEFOR0Uscil9fV0pLGV9KF8uZGVmYXVsdCk7TC5ERUZBVUxUUz0oMCxoLmRlZmF1bHQpKCEwLHt9LF8uZGVmYXVsdC5ERUZBVUxUUyx7bW9kdWxlczp7dG9vbGJhcjp7aGFuZGxlcnM6e2Zvcm11bGE6ZnVuY3Rpb24oKXt0aGlzLnF1aWxsLnRoZW1lLnRvb2x0aXAuZWRpdCgiZm9ybXVsYSIpfSxpbWFnZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCJpbnB1dC5xbC1pbWFnZVt0eXBlPWZpbGVdIik7bnVsbD09ZSYmKGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaW5wdXQiKSxlLnNldEF0dHJpYnV0ZSgidHlwZSIsImZpbGUiKSxlLnNldEF0dHJpYnV0ZSgiYWNjZXB0IiwiaW1hZ2UvcG5nLCBpbWFnZS9naWYsIGltYWdlL2pwZWcsIGltYWdlL2JtcCwgaW1hZ2UveC1pY29uIiksZS5jbGFzc0xpc3QuYWRkKCJxbC1pbWFnZSIpLGUuYWRkRXZlbnRMaXN0ZW5lcigiY2hhbmdlIixmdW5jdGlvbigpe2lmKG51bGwhPWUuZmlsZXMmJm51bGwhPWUuZmlsZXNbMF0pe3ZhciBuPW5ldyBGaWxlUmVhZGVyO24ub25sb2FkPWZ1bmN0aW9uKG4pe3ZhciByPXQucXVpbGwuZ2V0U2VsZWN0aW9uKCEwKTt0LnF1aWxsLnVwZGF0ZUNvbnRlbnRzKChuZXcgZC5kZWZhdWx0KS5yZXRhaW4oci5pbmRleCkuZGVsZXRlKHIubGVuZ3RoKS5pbnNlcnQoe2ltYWdlOm4udGFyZ2V0LnJlc3VsdH0pLHYuZGVmYXVsdC5zb3VyY2VzLlVTRVIpLHQucXVpbGwuc2V0U2VsZWN0aW9uKHIuaW5kZXgrMSx2LmRlZmF1bHQuc291cmNlcy5TSUxFTlQpLGUudmFsdWU9IiJ9LG4ucmVhZEFzRGF0YVVSTChlLmZpbGVzWzBdKX19KSx0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChlKSksZS5jbGljaygpfSx2aWRlbzpmdW5jdGlvbigpe3RoaXMucXVpbGwudGhlbWUudG9vbHRpcC5lZGl0KCJ2aWRlbyIpfX19fX0pO3ZhciBNPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUodCxuKXtvKHRoaXMsZSk7dmFyIHI9aSh0aGlzLChlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpKS5jYWxsKHRoaXMsdCxuKSk7cmV0dXJuIHIudGV4dGJveD1yLnJvb3QucXVlcnlTZWxlY3RvcignaW5wdXRbdHlwZT0idGV4dCJdJyksci5saXN0ZW4oKSxyfXJldHVybiBsKGUsdCksdShlLFt7a2V5OiJsaXN0ZW4iLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLnRleHRib3guYWRkRXZlbnRMaXN0ZW5lcigia2V5ZG93biIsZnVuY3Rpb24oZSl7Zy5kZWZhdWx0Lm1hdGNoKGUsImVudGVyIik/KHQuc2F2ZSgpLGUucHJldmVudERlZmF1bHQoKSk6Zy5kZWZhdWx0Lm1hdGNoKGUsImVzY2FwZSIpJiYodC5jYW5jZWwoKSxlLnByZXZlbnREZWZhdWx0KCkpfSl9fSx7a2V5OiJjYW5jZWwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5oaWRlKCl9fSx7a2V5OiJlZGl0Iix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXToibGluayIsZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06bnVsbDt0aGlzLnJvb3QuY2xhc3NMaXN0LnJlbW92ZSgicWwtaGlkZGVuIiksdGhpcy5yb290LmNsYXNzTGlzdC5hZGQoInFsLWVkaXRpbmciKSxudWxsIT1lP3RoaXMudGV4dGJveC52YWx1ZT1lOnQhPT10aGlzLnJvb3QuZ2V0QXR0cmlidXRlKCJkYXRhLW1vZGUiKSYmKHRoaXMudGV4dGJveC52YWx1ZT0iIiksdGhpcy5wb3NpdGlvbih0aGlzLnF1aWxsLmdldEJvdW5kcyh0aGlzLnF1aWxsLnNlbGVjdGlvbi5zYXZlZFJhbmdlKSksdGhpcy50ZXh0Ym94LnNlbGVjdCgpLHRoaXMudGV4dGJveC5zZXRBdHRyaWJ1dGUoInBsYWNlaG9sZGVyIix0aGlzLnRleHRib3guZ2V0QXR0cmlidXRlKCJkYXRhLSIrdCl8fCIiKSx0aGlzLnJvb3Quc2V0QXR0cmlidXRlKCJkYXRhLW1vZGUiLHQpfX0se2tleToicmVzdG9yZUZvY3VzIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMucXVpbGwuc2Nyb2xsaW5nQ29udGFpbmVyLnNjcm9sbFRvcDt0aGlzLnF1aWxsLmZvY3VzKCksdGhpcy5xdWlsbC5zY3JvbGxpbmdDb250YWluZXIuc2Nyb2xsVG9wPXR9fSx7a2V5OiJzYXZlIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMudGV4dGJveC52YWx1ZTtzd2l0Y2godGhpcy5yb290LmdldEF0dHJpYnV0ZSgiZGF0YS1tb2RlIikpe2Nhc2UibGluayI6dmFyIGU9dGhpcy5xdWlsbC5yb290LnNjcm9sbFRvcDt0aGlzLmxpbmtSYW5nZT8odGhpcy5xdWlsbC5mb3JtYXRUZXh0KHRoaXMubGlua1JhbmdlLCJsaW5rIix0LHYuZGVmYXVsdC5zb3VyY2VzLlVTRVIpLGRlbGV0ZSB0aGlzLmxpbmtSYW5nZSk6KHRoaXMucmVzdG9yZUZvY3VzKCksdGhpcy5xdWlsbC5mb3JtYXQoImxpbmsiLHQsdi5kZWZhdWx0LnNvdXJjZXMuVVNFUikpLHRoaXMucXVpbGwucm9vdC5zY3JvbGxUb3A9ZTticmVhaztjYXNlInZpZGVvIjp0PWEodCk7Y2FzZSJmb3JtdWxhIjppZighdClicmVhazt2YXIgbj10aGlzLnF1aWxsLmdldFNlbGVjdGlvbighMCk7aWYobnVsbCE9bil7dmFyIHI9bi5pbmRleCtuLmxlbmd0aDt0aGlzLnF1aWxsLmluc2VydEVtYmVkKHIsdGhpcy5yb290LmdldEF0dHJpYnV0ZSgiZGF0YS1tb2RlIiksdCx2LmRlZmF1bHQuc291cmNlcy5VU0VSKSwiZm9ybXVsYSI9PT10aGlzLnJvb3QuZ2V0QXR0cmlidXRlKCJkYXRhLW1vZGUiKSYmdGhpcy5xdWlsbC5pbnNlcnRUZXh0KHIrMSwiICIsdi5kZWZhdWx0LnNvdXJjZXMuVVNFUiksdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24ocisyLHYuZGVmYXVsdC5zb3VyY2VzLlVTRVIpfX10aGlzLnRleHRib3gudmFsdWU9IiIsdGhpcy5oaWRlKCl9fV0pLGV9KEEuZGVmYXVsdCk7ZS5CYXNlVG9vbHRpcD1NLGUuZGVmYXVsdD1MfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbz1uKDQ2KSxpPXIobyksbD1uKDM0KSxhPW4oMzYpLHM9big2MiksdT1uKDYzKSxjPXIodSksZj1uKDY0KSxoPXIoZikscD1uKDY1KSxkPXIocCkseT1uKDM1KSx2PW4oMjQpLGI9bigzNyksZz1uKDM4KSxtPW4oMzkpLF89cihtKSxPPW4oNjYpLHc9cihPKSx4PW4oMTUpLGs9cih4KSxFPW4oNjcpLE49cihFKSxqPW4oNjgpLEE9cihqKSxxPW4oNjkpLFQ9cihxKSxQPW4oNzApLFM9cihQKSxDPW4oNzEpLEw9cihDKSxNPW4oMTMpLFI9cihNKSxJPW4oNzIpLEI9cihJKSxEPW4oNzMpLFU9cihEKSxGPW4oNzQpLEg9cihGKSxLPW4oMjYpLHo9cihLKSxaPW4oMTYpLFY9cihaKSxXPW4oNDEpLEc9cihXKSxZPW4oNDIpLFg9cihZKSwkPW4oNDMpLFE9cigkKSxKPW4oMTA3KSx0dD1yKEopLGV0PW4oMTA4KSxudD1yKGV0KTtpLmRlZmF1bHQucmVnaXN0ZXIoeyJhdHRyaWJ1dG9ycy9hdHRyaWJ1dGUvZGlyZWN0aW9uIjphLkRpcmVjdGlvbkF0dHJpYnV0ZSwiYXR0cmlidXRvcnMvY2xhc3MvYWxpZ24iOmwuQWxpZ25DbGFzcywiYXR0cmlidXRvcnMvY2xhc3MvYmFja2dyb3VuZCI6eS5CYWNrZ3JvdW5kQ2xhc3MsImF0dHJpYnV0b3JzL2NsYXNzL2NvbG9yIjp2LkNvbG9yQ2xhc3MsImF0dHJpYnV0b3JzL2NsYXNzL2RpcmVjdGlvbiI6YS5EaXJlY3Rpb25DbGFzcywiYXR0cmlidXRvcnMvY2xhc3MvZm9udCI6Yi5Gb250Q2xhc3MsImF0dHJpYnV0b3JzL2NsYXNzL3NpemUiOmcuU2l6ZUNsYXNzLCJhdHRyaWJ1dG9ycy9zdHlsZS9hbGlnbiI6bC5BbGlnblN0eWxlLCJhdHRyaWJ1dG9ycy9zdHlsZS9iYWNrZ3JvdW5kIjp5LkJhY2tncm91bmRTdHlsZSwiYXR0cmlidXRvcnMvc3R5bGUvY29sb3IiOnYuQ29sb3JTdHlsZSwiYXR0cmlidXRvcnMvc3R5bGUvZGlyZWN0aW9uIjphLkRpcmVjdGlvblN0eWxlLCJhdHRyaWJ1dG9ycy9zdHlsZS9mb250IjpiLkZvbnRTdHlsZSwiYXR0cmlidXRvcnMvc3R5bGUvc2l6ZSI6Zy5TaXplU3R5bGV9LCEwKSxpLmRlZmF1bHQucmVnaXN0ZXIoeyJmb3JtYXRzL2FsaWduIjpsLkFsaWduQ2xhc3MsImZvcm1hdHMvZGlyZWN0aW9uIjphLkRpcmVjdGlvbkNsYXNzLCJmb3JtYXRzL2luZGVudCI6cy5JbmRlbnRDbGFzcywiZm9ybWF0cy9iYWNrZ3JvdW5kIjp5LkJhY2tncm91bmRTdHlsZSwiZm9ybWF0cy9jb2xvciI6di5Db2xvclN0eWxlLCJmb3JtYXRzL2ZvbnQiOmIuRm9udENsYXNzLCJmb3JtYXRzL3NpemUiOmcuU2l6ZUNsYXNzLCJmb3JtYXRzL2Jsb2NrcXVvdGUiOmMuZGVmYXVsdCwiZm9ybWF0cy9jb2RlLWJsb2NrIjpSLmRlZmF1bHQsImZvcm1hdHMvaGVhZGVyIjpoLmRlZmF1bHQsImZvcm1hdHMvbGlzdCI6ZC5kZWZhdWx0LCJmb3JtYXRzL2JvbGQiOl8uZGVmYXVsdCwiZm9ybWF0cy9jb2RlIjpNLkNvZGUsImZvcm1hdHMvaXRhbGljIjp3LmRlZmF1bHQsImZvcm1hdHMvbGluayI6ay5kZWZhdWx0LCJmb3JtYXRzL3NjcmlwdCI6Ti5kZWZhdWx0LCJmb3JtYXRzL3N0cmlrZSI6QS5kZWZhdWx0LCJmb3JtYXRzL3VuZGVybGluZSI6VC5kZWZhdWx0LCJmb3JtYXRzL2ltYWdlIjpTLmRlZmF1bHQsImZvcm1hdHMvdmlkZW8iOkwuZGVmYXVsdCwiZm9ybWF0cy9saXN0L2l0ZW0iOnAuTGlzdEl0ZW0sIm1vZHVsZXMvZm9ybXVsYSI6Qi5kZWZhdWx0LCJtb2R1bGVzL3N5bnRheCI6VS5kZWZhdWx0LCJtb2R1bGVzL3Rvb2xiYXIiOkguZGVmYXVsdCwidGhlbWVzL2J1YmJsZSI6dHQuZGVmYXVsdCwidGhlbWVzL3Nub3ciOm50LmRlZmF1bHQsInVpL2ljb25zIjp6LmRlZmF1bHQsInVpL3BpY2tlciI6Vi5kZWZhdWx0LCJ1aS9pY29uLXBpY2tlciI6WC5kZWZhdWx0LCJ1aS9jb2xvci1waWNrZXIiOkcuZGVmYXVsdCwidWkvdG9vbHRpcCI6US5kZWZhdWx0fSwhMCksZS5kZWZhdWx0PWkuZGVmYXVsdH0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG89bigwKSxpPXIobyksbD1uKDYpLGE9cihsKSxzPW4oMyksdT1yKHMpLGM9bigxNCksZj1yKGMpLGg9bigyMykscD1yKGgpLGQ9bigzMSkseT1yKGQpLHY9bigzMyksYj1yKHYpLGc9big1KSxtPXIoZyksXz1uKDU5KSxPPXIoXyksdz1uKDgpLHg9cih3KSxrPW4oNjApLEU9cihrKSxOPW4oNjEpLGo9cihOKSxBPW4oMjUpLHE9cihBKTthLmRlZmF1bHQucmVnaXN0ZXIoeyJibG90cy9ibG9jayI6dS5kZWZhdWx0LCJibG90cy9ibG9jay9lbWJlZCI6cy5CbG9ja0VtYmVkLCJibG90cy9icmVhayI6Zi5kZWZhdWx0LCJibG90cy9jb250YWluZXIiOnAuZGVmYXVsdCwiYmxvdHMvY3Vyc29yIjp5LmRlZmF1bHQsImJsb3RzL2VtYmVkIjpiLmRlZmF1bHQsImJsb3RzL2lubGluZSI6bS5kZWZhdWx0LCJibG90cy9zY3JvbGwiOk8uZGVmYXVsdCwiYmxvdHMvdGV4dCI6eC5kZWZhdWx0LCJtb2R1bGVzL2NsaXBib2FyZCI6RS5kZWZhdWx0LCJtb2R1bGVzL2hpc3RvcnkiOmouZGVmYXVsdCwibW9kdWxlcy9rZXlib2FyZCI6cS5kZWZhdWx0fSksaS5kZWZhdWx0LnJlZ2lzdGVyKHUuZGVmYXVsdCxmLmRlZmF1bHQseS5kZWZhdWx0LG0uZGVmYXVsdCxPLmRlZmF1bHQseC5kZWZhdWx0KSxlLmRlZmF1bHQ9YS5kZWZhdWx0fSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgcj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt0aGlzLmhlYWQ9dGhpcy50YWlsPW51bGwsdGhpcy5sZW5ndGg9MH1yZXR1cm4gdC5wcm90b3R5cGUuYXBwZW5kPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PVtdLGU9MDtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXRbZV09YXJndW1lbnRzW2VdO3RoaXMuaW5zZXJ0QmVmb3JlKHRbMF0sbnVsbCksdC5sZW5ndGg+MSYmdGhpcy5hcHBlbmQuYXBwbHkodGhpcyx0LnNsaWNlKDEpKX0sdC5wcm90b3R5cGUuY29udGFpbnM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlLG49dGhpcy5pdGVyYXRvcigpO2U9bigpOylpZihlPT09dClyZXR1cm4hMDtyZXR1cm4hMX0sdC5wcm90b3R5cGUuaW5zZXJ0QmVmb3JlPWZ1bmN0aW9uKHQsZSl7dCYmKHQubmV4dD1lLG51bGwhPWU/KHQucHJldj1lLnByZXYsbnVsbCE9ZS5wcmV2JiYoZS5wcmV2Lm5leHQ9dCksZS5wcmV2PXQsZT09PXRoaXMuaGVhZCYmKHRoaXMuaGVhZD10KSk6bnVsbCE9dGhpcy50YWlsPyh0aGlzLnRhaWwubmV4dD10LHQucHJldj10aGlzLnRhaWwsdGhpcy50YWlsPXQpOih0LnByZXY9bnVsbCx0aGlzLmhlYWQ9dGhpcy50YWlsPXQpLHRoaXMubGVuZ3RoKz0xKX0sdC5wcm90b3R5cGUub2Zmc2V0PWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wLG49dGhpcy5oZWFkO251bGwhPW47KXtpZihuPT09dClyZXR1cm4gZTtlKz1uLmxlbmd0aCgpLG49bi5uZXh0fXJldHVybi0xfSx0LnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24odCl7dGhpcy5jb250YWlucyh0KSYmKG51bGwhPXQucHJldiYmKHQucHJldi5uZXh0PXQubmV4dCksbnVsbCE9dC5uZXh0JiYodC5uZXh0LnByZXY9dC5wcmV2KSx0PT09dGhpcy5oZWFkJiYodGhpcy5oZWFkPXQubmV4dCksdD09PXRoaXMudGFpbCYmKHRoaXMudGFpbD10LnByZXYpLHRoaXMubGVuZ3RoLT0xKX0sdC5wcm90b3R5cGUuaXRlcmF0b3I9ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PXRoaXMuaGVhZCksZnVuY3Rpb24oKXt2YXIgZT10O3JldHVybiBudWxsIT10JiYodD10Lm5leHQpLGV9fSx0LnByb3RvdHlwZS5maW5kPWZ1bmN0aW9uKHQsZSl7dm9pZCAwPT09ZSYmKGU9ITEpO2Zvcih2YXIgbixyPXRoaXMuaXRlcmF0b3IoKTtuPXIoKTspe3ZhciBvPW4ubGVuZ3RoKCk7aWYodDxvfHxlJiZ0PT09byYmKG51bGw9PW4ubmV4dHx8MCE9PW4ubmV4dC5sZW5ndGgoKSkpcmV0dXJuW24sdF07dC09b31yZXR1cm5bbnVsbCwwXX0sdC5wcm90b3R5cGUuZm9yRWFjaD1mdW5jdGlvbih0KXtmb3IodmFyIGUsbj10aGlzLml0ZXJhdG9yKCk7ZT1uKCk7KXQoZSl9LHQucHJvdG90eXBlLmZvckVhY2hBdD1mdW5jdGlvbih0LGUsbil7aWYoIShlPD0wKSlmb3IodmFyIHIsbz10aGlzLmZpbmQodCksaT1vWzBdLGw9b1sxXSxhPXQtbCxzPXRoaXMuaXRlcmF0b3IoaSk7KHI9cygpKSYmYTx0K2U7KXt2YXIgdT1yLmxlbmd0aCgpO3Q+YT9uKHIsdC1hLE1hdGgubWluKGUsYSt1LXQpKTpuKHIsMCxNYXRoLm1pbih1LHQrZS1hKSksYSs9dX19LHQucHJvdG90eXBlLm1hcD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5yZWR1Y2UoZnVuY3Rpb24oZSxuKXtyZXR1cm4gZS5wdXNoKHQobikpLGV9LFtdKX0sdC5wcm90b3R5cGUucmVkdWNlPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuLHI9dGhpcy5pdGVyYXRvcigpO249cigpOyllPXQoZSxuKTtyZXR1cm4gZX0sdH0oKTtlLmRlZmF1bHQ9cn0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8ZnVuY3Rpb24oKXt2YXIgdD1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24odCxlKXt0Ll9fcHJvdG9fXz1lfXx8ZnVuY3Rpb24odCxlKXtmb3IodmFyIG4gaW4gZSllLmhhc093blByb3BlcnR5KG4pJiYodFtuXT1lW25dKX07cmV0dXJuIGZ1bmN0aW9uKGUsbil7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX10KGUsbiksZS5wcm90b3R5cGU9bnVsbD09PW4/T2JqZWN0LmNyZWF0ZShuKTooci5wcm90b3R5cGU9bi5wcm90b3R5cGUsbmV3IHIpfX0oKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG89bigxNyksaT1uKDEpLGw9e2F0dHJpYnV0ZXM6ITAsY2hhcmFjdGVyRGF0YTohMCxjaGFyYWN0ZXJEYXRhT2xkVmFsdWU6ITAsY2hpbGRMaXN0OiEwLHN1YnRyZWU6ITB9LGE9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZShlKXt2YXIgbj10LmNhbGwodGhpcyxlKXx8dGhpcztyZXR1cm4gbi5zY3JvbGw9bixuLm9ic2VydmVyPW5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uKHQpe24udXBkYXRlKHQpfSksbi5vYnNlcnZlci5vYnNlcnZlKG4uZG9tTm9kZSxsKSxuLmF0dGFjaCgpLG59cmV0dXJuIHIoZSx0KSxlLnByb3RvdHlwZS5kZXRhY2g9ZnVuY3Rpb24oKXt0LnByb3RvdHlwZS5kZXRhY2guY2FsbCh0aGlzKSx0aGlzLm9ic2VydmVyLmRpc2Nvbm5lY3QoKX0sZS5wcm90b3R5cGUuZGVsZXRlQXQ9ZnVuY3Rpb24oZSxuKXt0aGlzLnVwZGF0ZSgpLDA9PT1lJiZuPT09dGhpcy5sZW5ndGgoKT90aGlzLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24odCl7dC5yZW1vdmUoKX0pOnQucHJvdG90eXBlLmRlbGV0ZUF0LmNhbGwodGhpcyxlLG4pfSxlLnByb3RvdHlwZS5mb3JtYXRBdD1mdW5jdGlvbihlLG4scixvKXt0aGlzLnVwZGF0ZSgpLHQucHJvdG90eXBlLmZvcm1hdEF0LmNhbGwodGhpcyxlLG4scixvKX0sZS5wcm90b3R5cGUuaW5zZXJ0QXQ9ZnVuY3Rpb24oZSxuLHIpe3RoaXMudXBkYXRlKCksdC5wcm90b3R5cGUuaW5zZXJ0QXQuY2FsbCh0aGlzLGUsbixyKX0sZS5wcm90b3R5cGUub3B0aW1pemU9ZnVuY3Rpb24oZSxuKXt2YXIgcj10aGlzO3ZvaWQgMD09PWUmJihlPVtdKSx2b2lkIDA9PT1uJiYobj17fSksdC5wcm90b3R5cGUub3B0aW1pemUuY2FsbCh0aGlzLG4pO2Zvcih2YXIgbD1bXS5zbGljZS5jYWxsKHRoaXMub2JzZXJ2ZXIudGFrZVJlY29yZHMoKSk7bC5sZW5ndGg+MDspZS5wdXNoKGwucG9wKCkpO2Zvcih2YXIgYT1mdW5jdGlvbih0LGUpe3ZvaWQgMD09PWUmJihlPSEwKSxudWxsIT10JiZ0IT09ciYmbnVsbCE9dC5kb21Ob2RlLnBhcmVudE5vZGUmJihudWxsPT10LmRvbU5vZGVbaS5EQVRBX0tFWV0ubXV0YXRpb25zJiYodC5kb21Ob2RlW2kuREFUQV9LRVldLm11dGF0aW9ucz1bXSksZSYmYSh0LnBhcmVudCkpfSxzPWZ1bmN0aW9uKHQpe251bGwhPXQuZG9tTm9kZVtpLkRBVEFfS0VZXSYmbnVsbCE9dC5kb21Ob2RlW2kuREFUQV9LRVldLm11dGF0aW9ucyYmKHQgaW5zdGFuY2VvZiBvLmRlZmF1bHQmJnQuY2hpbGRyZW4uZm9yRWFjaChzKSx0Lm9wdGltaXplKG4pKX0sdT1lLGM9MDt1Lmxlbmd0aD4wO2MrPTEpe2lmKGM+PTEwMCl0aHJvdyBuZXcgRXJyb3IoIltQYXJjaG1lbnRdIE1heGltdW0gb3B0aW1pemUgaXRlcmF0aW9ucyByZWFjaGVkIik7Zm9yKHUuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZT1pLmZpbmQodC50YXJnZXQsITApO251bGwhPWUmJihlLmRvbU5vZGU9PT10LnRhcmdldCYmKCJjaGlsZExpc3QiPT09dC50eXBlPyhhKGkuZmluZCh0LnByZXZpb3VzU2libGluZywhMSkpLFtdLmZvckVhY2guY2FsbCh0LmFkZGVkTm9kZXMsZnVuY3Rpb24odCl7dmFyIGU9aS5maW5kKHQsITEpO2EoZSwhMSksZSBpbnN0YW5jZW9mIG8uZGVmYXVsdCYmZS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKHQpe2EodCwhMSl9KX0pKToiYXR0cmlidXRlcyI9PT10LnR5cGUmJmEoZS5wcmV2KSksYShlKSl9KSx0aGlzLmNoaWxkcmVuLmZvckVhY2gocyksdT1bXS5zbGljZS5jYWxsKHRoaXMub2JzZXJ2ZXIudGFrZVJlY29yZHMoKSksbD11LnNsaWNlKCk7bC5sZW5ndGg+MDspZS5wdXNoKGwucG9wKCkpfX0sZS5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKGUsbil7dmFyIHI9dGhpczt2b2lkIDA9PT1uJiYobj17fSksZT1lfHx0aGlzLm9ic2VydmVyLnRha2VSZWNvcmRzKCksZS5tYXAoZnVuY3Rpb24odCl7dmFyIGU9aS5maW5kKHQudGFyZ2V0LCEwKTtyZXR1cm4gbnVsbD09ZT9udWxsOm51bGw9PWUuZG9tTm9kZVtpLkRBVEFfS0VZXS5tdXRhdGlvbnM/KGUuZG9tTm9kZVtpLkRBVEFfS0VZXS5tdXRhdGlvbnM9W3RdLGUpOihlLmRvbU5vZGVbaS5EQVRBX0tFWV0ubXV0YXRpb25zLnB1c2godCksbnVsbCl9KS5mb3JFYWNoKGZ1bmN0aW9uKHQpe251bGwhPXQmJnQhPT1yJiZudWxsIT10LmRvbU5vZGVbaS5EQVRBX0tFWV0mJnQudXBkYXRlKHQuZG9tTm9kZVtpLkRBVEFfS0VZXS5tdXRhdGlvbnN8fFtdLG4pfSksbnVsbCE9dGhpcy5kb21Ob2RlW2kuREFUQV9LRVldLm11dGF0aW9ucyYmdC5wcm90b3R5cGUudXBkYXRlLmNhbGwodGhpcyx0aGlzLmRvbU5vZGVbaS5EQVRBX0tFWV0ubXV0YXRpb25zLG4pLHRoaXMub3B0aW1pemUoZSxuKX0sZS5ibG90TmFtZT0ic2Nyb2xsIixlLmRlZmF1bHRDaGlsZD0iYmxvY2siLGUuc2NvcGU9aS5TY29wZS5CTE9DS19CTE9ULGUudGFnTmFtZT0iRElWIixlfShvLmRlZmF1bHQpO2UuZGVmYXVsdD1hfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIodCxlKXtpZihPYmplY3Qua2V5cyh0KS5sZW5ndGghPT1PYmplY3Qua2V5cyhlKS5sZW5ndGgpcmV0dXJuITE7Zm9yKHZhciBuIGluIHQpaWYodFtuXSE9PWVbbl0pcmV0dXJuITE7cmV0dXJuITB9dmFyIG89dGhpcyYmdGhpcy5fX2V4dGVuZHN8fGZ1bmN0aW9uKCl7dmFyIHQ9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKHQsZSl7dC5fX3Byb3RvX189ZX18fGZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuIGluIGUpZS5oYXNPd25Qcm9wZXJ0eShuKSYmKHRbbl09ZVtuXSl9O3JldHVybiBmdW5jdGlvbihlLG4pe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9dChlLG4pLGUucHJvdG90eXBlPW51bGw9PT1uP09iamVjdC5jcmVhdGUobik6KHIucHJvdG90eXBlPW4ucHJvdG90eXBlLG5ldyByKX19KCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBpPW4oMTgpLGw9bigxKSxhPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gbnVsbCE9PXQmJnQuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybiBvKGUsdCksZS5mb3JtYXRzPWZ1bmN0aW9uKG4pe2lmKG4udGFnTmFtZSE9PWUudGFnTmFtZSlyZXR1cm4gdC5mb3JtYXRzLmNhbGwodGhpcyxuKX0sZS5wcm90b3R5cGUuZm9ybWF0PWZ1bmN0aW9uKG4scil7dmFyIG89dGhpcztuIT09dGhpcy5zdGF0aWNzLmJsb3ROYW1lfHxyP3QucHJvdG90eXBlLmZvcm1hdC5jYWxsKHRoaXMsbixyKToodGhpcy5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QgaW5zdGFuY2VvZiBpLmRlZmF1bHR8fCh0PXQud3JhcChlLmJsb3ROYW1lLCEwKSksby5hdHRyaWJ1dGVzLmNvcHkodCl9KSx0aGlzLnVud3JhcCgpKX0sZS5wcm90b3R5cGUuZm9ybWF0QXQ9ZnVuY3Rpb24oZSxuLHIsbyl7aWYobnVsbCE9dGhpcy5mb3JtYXRzKClbcl18fGwucXVlcnkocixsLlNjb3BlLkFUVFJJQlVURSkpe3RoaXMuaXNvbGF0ZShlLG4pLmZvcm1hdChyLG8pfWVsc2UgdC5wcm90b3R5cGUuZm9ybWF0QXQuY2FsbCh0aGlzLGUsbixyLG8pfSxlLnByb3RvdHlwZS5vcHRpbWl6ZT1mdW5jdGlvbihuKXt0LnByb3RvdHlwZS5vcHRpbWl6ZS5jYWxsKHRoaXMsbik7dmFyIG89dGhpcy5mb3JtYXRzKCk7aWYoMD09PU9iamVjdC5rZXlzKG8pLmxlbmd0aClyZXR1cm4gdGhpcy51bndyYXAoKTt2YXIgaT10aGlzLm5leHQ7aSBpbnN0YW5jZW9mIGUmJmkucHJldj09PXRoaXMmJnIobyxpLmZvcm1hdHMoKSkmJihpLm1vdmVDaGlsZHJlbih0aGlzKSxpLnJlbW92ZSgpKX0sZS5ibG90TmFtZT0iaW5saW5lIixlLnNjb3BlPWwuU2NvcGUuSU5MSU5FX0JMT1QsZS50YWdOYW1lPSJTUEFOIixlfShpLmRlZmF1bHQpO2UuZGVmYXVsdD1hfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO3ZhciByPXRoaXMmJnRoaXMuX19leHRlbmRzfHxmdW5jdGlvbigpe3ZhciB0PU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbih0LGUpe3QuX19wcm90b19fPWV9fHxmdW5jdGlvbih0LGUpe2Zvcih2YXIgbiBpbiBlKWUuaGFzT3duUHJvcGVydHkobikmJih0W25dPWVbbl0pfTtyZXR1cm4gZnVuY3Rpb24oZSxuKXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfXQoZSxuKSxlLnByb3RvdHlwZT1udWxsPT09bj9PYmplY3QuY3JlYXRlKG4pOihyLnByb3RvdHlwZT1uLnByb3RvdHlwZSxuZXcgcil9fSgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbz1uKDE4KSxpPW4oMSksbD1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7cmV0dXJuIG51bGwhPT10JiZ0LmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4gcihlLHQpLGUuZm9ybWF0cz1mdW5jdGlvbihuKXt2YXIgcj1pLnF1ZXJ5KGUuYmxvdE5hbWUpLnRhZ05hbWU7aWYobi50YWdOYW1lIT09cilyZXR1cm4gdC5mb3JtYXRzLmNhbGwodGhpcyxuKX0sZS5wcm90b3R5cGUuZm9ybWF0PWZ1bmN0aW9uKG4scil7bnVsbCE9aS5xdWVyeShuLGkuU2NvcGUuQkxPQ0spJiYobiE9PXRoaXMuc3RhdGljcy5ibG90TmFtZXx8cj90LnByb3RvdHlwZS5mb3JtYXQuY2FsbCh0aGlzLG4scik6dGhpcy5yZXBsYWNlV2l0aChlLmJsb3ROYW1lKSl9LGUucHJvdG90eXBlLmZvcm1hdEF0PWZ1bmN0aW9uKGUsbixyLG8pe251bGwhPWkucXVlcnkocixpLlNjb3BlLkJMT0NLKT90aGlzLmZvcm1hdChyLG8pOnQucHJvdG90eXBlLmZvcm1hdEF0LmNhbGwodGhpcyxlLG4scixvKX0sZS5wcm90b3R5cGUuaW5zZXJ0QXQ9ZnVuY3Rpb24oZSxuLHIpe2lmKG51bGw9PXJ8fG51bGwhPWkucXVlcnkobixpLlNjb3BlLklOTElORSkpdC5wcm90b3R5cGUuaW5zZXJ0QXQuY2FsbCh0aGlzLGUsbixyKTtlbHNle3ZhciBvPXRoaXMuc3BsaXQoZSksbD1pLmNyZWF0ZShuLHIpO28ucGFyZW50Lmluc2VydEJlZm9yZShsLG8pfX0sZS5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKGUsbil7bmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvVHJpZGVudC8pP3RoaXMuYnVpbGQoKTp0LnByb3RvdHlwZS51cGRhdGUuY2FsbCh0aGlzLGUsbil9LGUuYmxvdE5hbWU9ImJsb2NrIixlLnNjb3BlPWkuU2NvcGUuQkxPQ0tfQkxPVCxlLnRhZ05hbWU9IlAiLGV9KG8uZGVmYXVsdCk7ZS5kZWZhdWx0PWx9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dmFyIHI9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fGZ1bmN0aW9uKCl7dmFyIHQ9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKHQsZSl7dC5fX3Byb3RvX189ZX18fGZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuIGluIGUpZS5oYXNPd25Qcm9wZXJ0eShuKSYmKHRbbl09ZVtuXSl9O3JldHVybiBmdW5jdGlvbihlLG4pe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9dChlLG4pLGUucHJvdG90eXBlPW51bGw9PT1uP09iamVjdC5jcmVhdGUobik6KHIucHJvdG90eXBlPW4ucHJvdG90eXBlLG5ldyByKX19KCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMTkpLGk9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3JldHVybiBudWxsIT09dCYmdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuIHIoZSx0KSxlLmZvcm1hdHM9ZnVuY3Rpb24odCl7fSxlLnByb3RvdHlwZS5mb3JtYXQ9ZnVuY3Rpb24oZSxuKXt0LnByb3RvdHlwZS5mb3JtYXRBdC5jYWxsKHRoaXMsMCx0aGlzLmxlbmd0aCgpLGUsbil9LGUucHJvdG90eXBlLmZvcm1hdEF0PWZ1bmN0aW9uKGUsbixyLG8pezA9PT1lJiZuPT09dGhpcy5sZW5ndGgoKT90aGlzLmZvcm1hdChyLG8pOnQucHJvdG90eXBlLmZvcm1hdEF0LmNhbGwodGhpcyxlLG4scixvKX0sZS5wcm90b3R5cGUuZm9ybWF0cz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnN0YXRpY3MuZm9ybWF0cyh0aGlzLmRvbU5vZGUpfSxlfShvLmRlZmF1bHQpO2UuZGVmYXVsdD1pfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO3ZhciByPXRoaXMmJnRoaXMuX19leHRlbmRzfHxmdW5jdGlvbigpe3ZhciB0PU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbih0LGUpe3QuX19wcm90b19fPWV9fHxmdW5jdGlvbih0LGUpe2Zvcih2YXIgbiBpbiBlKWUuaGFzT3duUHJvcGVydHkobikmJih0W25dPWVbbl0pfTtyZXR1cm4gZnVuY3Rpb24oZSxuKXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfXQoZSxuKSxlLnByb3RvdHlwZT1udWxsPT09bj9PYmplY3QuY3JlYXRlKG4pOihyLnByb3RvdHlwZT1uLnByb3RvdHlwZSxuZXcgcil9fSgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbz1uKDE5KSxpPW4oMSksbD1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKGUpe3ZhciBuPXQuY2FsbCh0aGlzLGUpfHx0aGlzO3JldHVybiBuLnRleHQ9bi5zdGF0aWNzLnZhbHVlKG4uZG9tTm9kZSksbn1yZXR1cm4gcihlLHQpLGUuY3JlYXRlPWZ1bmN0aW9uKHQpe3JldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0KX0sZS52YWx1ZT1mdW5jdGlvbih0KXt2YXIgZT10LmRhdGE7cmV0dXJuIGUubm9ybWFsaXplJiYoZT1lLm5vcm1hbGl6ZSgpKSxlfSxlLnByb3RvdHlwZS5kZWxldGVBdD1mdW5jdGlvbih0LGUpe3RoaXMuZG9tTm9kZS5kYXRhPXRoaXMudGV4dD10aGlzLnRleHQuc2xpY2UoMCx0KSt0aGlzLnRleHQuc2xpY2UodCtlKX0sZS5wcm90b3R5cGUuaW5kZXg9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5kb21Ob2RlPT09dD9lOi0xfSxlLnByb3RvdHlwZS5pbnNlcnRBdD1mdW5jdGlvbihlLG4scil7bnVsbD09cj8odGhpcy50ZXh0PXRoaXMudGV4dC5zbGljZSgwLGUpK24rdGhpcy50ZXh0LnNsaWNlKGUpLHRoaXMuZG9tTm9kZS5kYXRhPXRoaXMudGV4dCk6dC5wcm90b3R5cGUuaW5zZXJ0QXQuY2FsbCh0aGlzLGUsbixyKX0sZS5wcm90b3R5cGUubGVuZ3RoPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGV4dC5sZW5ndGh9LGUucHJvdG90eXBlLm9wdGltaXplPWZ1bmN0aW9uKG4pe3QucHJvdG90eXBlLm9wdGltaXplLmNhbGwodGhpcyxuKSx0aGlzLnRleHQ9dGhpcy5zdGF0aWNzLnZhbHVlKHRoaXMuZG9tTm9kZSksMD09PXRoaXMudGV4dC5sZW5ndGg/dGhpcy5yZW1vdmUoKTp0aGlzLm5leHQgaW5zdGFuY2VvZiBlJiZ0aGlzLm5leHQucHJldj09PXRoaXMmJih0aGlzLmluc2VydEF0KHRoaXMubGVuZ3RoKCksdGhpcy5uZXh0LnZhbHVlKCkpLHRoaXMubmV4dC5yZW1vdmUoKSl9LGUucHJvdG90eXBlLnBvc2l0aW9uPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPSExKSxbdGhpcy5kb21Ob2RlLHRdfSxlLnByb3RvdHlwZS5zcGxpdD1mdW5jdGlvbih0LGUpe2lmKHZvaWQgMD09PWUmJihlPSExKSwhZSl7aWYoMD09PXQpcmV0dXJuIHRoaXM7aWYodD09PXRoaXMubGVuZ3RoKCkpcmV0dXJuIHRoaXMubmV4dH12YXIgbj1pLmNyZWF0ZSh0aGlzLmRvbU5vZGUuc3BsaXRUZXh0KHQpKTtyZXR1cm4gdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKG4sdGhpcy5uZXh0KSx0aGlzLnRleHQ9dGhpcy5zdGF0aWNzLnZhbHVlKHRoaXMuZG9tTm9kZSksbn0sZS5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpczt0LnNvbWUoZnVuY3Rpb24odCl7cmV0dXJuImNoYXJhY3RlckRhdGEiPT09dC50eXBlJiZ0LnRhcmdldD09PW4uZG9tTm9kZX0pJiYodGhpcy50ZXh0PXRoaXMuc3RhdGljcy52YWx1ZSh0aGlzLmRvbU5vZGUpKX0sZS5wcm90b3R5cGUudmFsdWU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50ZXh0fSxlLmJsb3ROYW1lPSJ0ZXh0IixlLnNjb3BlPWkuU2NvcGUuSU5MSU5FX0JMT1QsZX0oby5kZWZhdWx0KTtlLmRlZmF1bHQ9bH0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTtpZihyLmNsYXNzTGlzdC50b2dnbGUoInRlc3QtY2xhc3MiLCExKSxyLmNsYXNzTGlzdC5jb250YWlucygidGVzdC1jbGFzcyIpKXt2YXIgbz1ET01Ub2tlbkxpc3QucHJvdG90eXBlLnRvZ2dsZTtET01Ub2tlbkxpc3QucHJvdG90eXBlLnRvZ2dsZT1mdW5jdGlvbih0LGUpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPjEmJiF0aGlzLmNvbnRhaW5zKHQpPT0hZT9lOm8uY2FsbCh0aGlzLHQpfX1TdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGh8fChTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGg9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZT1lfHwwLHRoaXMuc3Vic3RyKGUsdC5sZW5ndGgpPT09dH0pLFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGh8fChTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy50b1N0cmluZygpOygibnVtYmVyIiE9dHlwZW9mIGV8fCFpc0Zpbml0ZShlKXx8TWF0aC5mbG9vcihlKSE9PWV8fGU+bi5sZW5ndGgpJiYoZT1uLmxlbmd0aCksZS09dC5sZW5ndGg7dmFyIHI9bi5pbmRleE9mKHQsZSk7cmV0dXJuLTEhPT1yJiZyPT09ZX0pLEFycmF5LnByb3RvdHlwZS5maW5kfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCJmaW5kIix7dmFsdWU6ZnVuY3Rpb24odCl7aWYobnVsbD09PXRoaXMpdGhyb3cgbmV3IFR5cGVFcnJvcigiQXJyYXkucHJvdG90eXBlLmZpbmQgY2FsbGVkIG9uIG51bGwgb3IgdW5kZWZpbmVkIik7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcigicHJlZGljYXRlIG11c3QgYmUgYSBmdW5jdGlvbiIpO2Zvcih2YXIgZSxuPU9iamVjdCh0aGlzKSxyPW4ubGVuZ3RoPj4+MCxvPWFyZ3VtZW50c1sxXSxpPTA7aTxyO2krKylpZihlPW5baV0sdC5jYWxsKG8sZSxpLG4pKXJldHVybiBlfX0pLGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIkRPTUNvbnRlbnRMb2FkZWQiLGZ1bmN0aW9uKCl7ZG9jdW1lbnQuZXhlY0NvbW1hbmQoImVuYWJsZU9iamVjdFJlc2l6aW5nIiwhMSwhMSksZG9jdW1lbnQuZXhlY0NvbW1hbmQoImF1dG9VcmxEZXRlY3QiLCExLCExKX0pfSxmdW5jdGlvbih0LGUpe2Z1bmN0aW9uIG4odCxlLG4pe2lmKHQ9PWUpcmV0dXJuIHQ/W1t2LHRdXTpbXTsobjwwfHx0Lmxlbmd0aDxuKSYmKG49bnVsbCk7dmFyIG89bCh0LGUpLGk9dC5zdWJzdHJpbmcoMCxvKTt0PXQuc3Vic3RyaW5nKG8pLGU9ZS5zdWJzdHJpbmcobyksbz1hKHQsZSk7dmFyIHM9dC5zdWJzdHJpbmcodC5sZW5ndGgtbyk7dD10LnN1YnN0cmluZygwLHQubGVuZ3RoLW8pLGU9ZS5zdWJzdHJpbmcoMCxlLmxlbmd0aC1vKTt2YXIgYz1yKHQsZSk7cmV0dXJuIGkmJmMudW5zaGlmdChbdixpXSkscyYmYy5wdXNoKFt2LHNdKSx1KGMpLG51bGwhPW4mJihjPWYoYyxuKSksYz1oKGMpfWZ1bmN0aW9uIHIodCxlKXt2YXIgcjtpZighdClyZXR1cm5bW3ksZV1dO2lmKCFlKXJldHVybltbZCx0XV07dmFyIGk9dC5sZW5ndGg+ZS5sZW5ndGg/dDplLGw9dC5sZW5ndGg+ZS5sZW5ndGg/ZTp0LGE9aS5pbmRleE9mKGwpO2lmKC0xIT1hKXJldHVybiByPVtbeSxpLnN1YnN0cmluZygwLGEpXSxbdixsXSxbeSxpLnN1YnN0cmluZyhhK2wubGVuZ3RoKV1dLHQubGVuZ3RoPmUubGVuZ3RoJiYoclswXVswXT1yWzJdWzBdPWQpLHI7aWYoMT09bC5sZW5ndGgpcmV0dXJuW1tkLHRdLFt5LGVdXTt2YXIgdT1zKHQsZSk7aWYodSl7dmFyIGM9dVswXSxmPXVbMV0saD11WzJdLHA9dVszXSxiPXVbNF0sZz1uKGMsaCksbT1uKGYscCk7cmV0dXJuIGcuY29uY2F0KFtbdixiXV0sbSl9cmV0dXJuIG8odCxlKX1mdW5jdGlvbiBvKHQsZSl7Zm9yKHZhciBuPXQubGVuZ3RoLHI9ZS5sZW5ndGgsbz1NYXRoLmNlaWwoKG4rcikvMiksbD1vLGE9MipvLHM9bmV3IEFycmF5KGEpLHU9bmV3IEFycmF5KGEpLGM9MDtjPGE7YysrKXNbY109LTEsdVtjXT0tMTtzW2wrMV09MCx1W2wrMV09MDtmb3IodmFyIGY9bi1yLGg9ZiUyIT0wLHA9MCx2PTAsYj0wLGc9MCxtPTA7bTxvO20rKyl7Zm9yKHZhciBfPS1tK3A7Xzw9bS12O18rPTIpe3ZhciBPLHc9bCtfO089Xz09LW18fF8hPW0mJnNbdy0xXTxzW3crMV0/c1t3KzFdOnNbdy0xXSsxO2Zvcih2YXIgeD1PLV87TzxuJiZ4PHImJnQuY2hhckF0KE8pPT1lLmNoYXJBdCh4KTspTysrLHgrKztpZihzW3ddPU8sTz5uKXYrPTI7ZWxzZSBpZih4PnIpcCs9MjtlbHNlIGlmKGgpe3ZhciBrPWwrZi1fO2lmKGs+PTAmJms8YSYmLTEhPXVba10pe3ZhciBFPW4tdVtrXTtpZihPPj1FKXJldHVybiBpKHQsZSxPLHgpfX19Zm9yKHZhciBOPS1tK2I7Tjw9bS1nO04rPTIpe3ZhciBFLGs9bCtOO0U9Tj09LW18fE4hPW0mJnVbay0xXTx1W2srMV0/dVtrKzFdOnVbay0xXSsxO2Zvcih2YXIgaj1FLU47RTxuJiZqPHImJnQuY2hhckF0KG4tRS0xKT09ZS5jaGFyQXQoci1qLTEpOylFKyssaisrO2lmKHVba109RSxFPm4pZys9MjtlbHNlIGlmKGo+ciliKz0yO2Vsc2UgaWYoIWgpe3ZhciB3PWwrZi1OO2lmKHc+PTAmJnc8YSYmLTEhPXNbd10pe3ZhciBPPXNbd10seD1sK08tdztpZihFPW4tRSxPPj1FKXJldHVybiBpKHQsZSxPLHgpfX19fXJldHVybltbZCx0XSxbeSxlXV19ZnVuY3Rpb24gaSh0LGUscixvKXt2YXIgaT10LnN1YnN0cmluZygwLHIpLGw9ZS5zdWJzdHJpbmcoMCxvKSxhPXQuc3Vic3RyaW5nKHIpLHM9ZS5zdWJzdHJpbmcobyksdT1uKGksbCksYz1uKGEscyk7cmV0dXJuIHUuY29uY2F0KGMpfWZ1bmN0aW9uIGwodCxlKXtpZighdHx8IWV8fHQuY2hhckF0KDApIT1lLmNoYXJBdCgwKSlyZXR1cm4gMDtmb3IodmFyIG49MCxyPU1hdGgubWluKHQubGVuZ3RoLGUubGVuZ3RoKSxvPXIsaT0wO248bzspdC5zdWJzdHJpbmcoaSxvKT09ZS5zdWJzdHJpbmcoaSxvKT8obj1vLGk9bik6cj1vLG89TWF0aC5mbG9vcigoci1uKS8yK24pO3JldHVybiBvfWZ1bmN0aW9uIGEodCxlKXtpZighdHx8IWV8fHQuY2hhckF0KHQubGVuZ3RoLTEpIT1lLmNoYXJBdChlLmxlbmd0aC0xKSlyZXR1cm4gMDtmb3IodmFyIG49MCxyPU1hdGgubWluKHQubGVuZ3RoLGUubGVuZ3RoKSxvPXIsaT0wO248bzspdC5zdWJzdHJpbmcodC5sZW5ndGgtbyx0Lmxlbmd0aC1pKT09ZS5zdWJzdHJpbmcoZS5sZW5ndGgtbyxlLmxlbmd0aC1pKT8obj1vLGk9bik6cj1vLG89TWF0aC5mbG9vcigoci1uKS8yK24pO3JldHVybiBvfWZ1bmN0aW9uIHModCxlKXtmdW5jdGlvbiBuKHQsZSxuKXtmb3IodmFyIHIsbyxpLHMsdT10LnN1YnN0cmluZyhuLG4rTWF0aC5mbG9vcih0Lmxlbmd0aC80KSksYz0tMSxmPSIiOy0xIT0oYz1lLmluZGV4T2YodSxjKzEpKTspe3ZhciBoPWwodC5zdWJzdHJpbmcobiksZS5zdWJzdHJpbmcoYykpLHA9YSh0LnN1YnN0cmluZygwLG4pLGUuc3Vic3RyaW5nKDAsYykpO2YubGVuZ3RoPHAraCYmKGY9ZS5zdWJzdHJpbmcoYy1wLGMpK2Uuc3Vic3RyaW5nKGMsYytoKSxyPXQuc3Vic3RyaW5nKDAsbi1wKSxvPXQuc3Vic3RyaW5nKG4raCksaT1lLnN1YnN0cmluZygwLGMtcCkscz1lLnN1YnN0cmluZyhjK2gpKX1yZXR1cm4gMipmLmxlbmd0aD49dC5sZW5ndGg/W3IsbyxpLHMsZl06bnVsbH12YXIgcj10Lmxlbmd0aD5lLmxlbmd0aD90OmUsbz10Lmxlbmd0aD5lLmxlbmd0aD9lOnQ7aWYoci5sZW5ndGg8NHx8MipvLmxlbmd0aDxyLmxlbmd0aClyZXR1cm4gbnVsbDt2YXIgaSxzPW4ocixvLE1hdGguY2VpbChyLmxlbmd0aC80KSksdT1uKHIsbyxNYXRoLmNlaWwoci5sZW5ndGgvMikpO2lmKCFzJiYhdSlyZXR1cm4gbnVsbDtpPXU/cyYmc1s0XS5sZW5ndGg+dVs0XS5sZW5ndGg/czp1OnM7dmFyIGMsZixoLHA7cmV0dXJuIHQubGVuZ3RoPmUubGVuZ3RoPyhjPWlbMF0sZj1pWzFdLGg9aVsyXSxwPWlbM10pOihoPWlbMF0scD1pWzFdLGM9aVsyXSxmPWlbM10pLFtjLGYsaCxwLGlbNF1dfWZ1bmN0aW9uIHUodCl7dC5wdXNoKFt2LCIiXSk7Zm9yKHZhciBlLG49MCxyPTAsbz0wLGk9IiIscz0iIjtuPHQubGVuZ3RoOylzd2l0Y2godFtuXVswXSl7Y2FzZSB5Om8rKyxzKz10W25dWzFdLG4rKzticmVhaztjYXNlIGQ6cisrLGkrPXRbbl1bMV0sbisrO2JyZWFrO2Nhc2UgdjpyK28+MT8oMCE9PXImJjAhPT1vJiYoZT1sKHMsaSksMCE9PWUmJihuLXItbz4wJiZ0W24tci1vLTFdWzBdPT12P3Rbbi1yLW8tMV1bMV0rPXMuc3Vic3RyaW5nKDAsZSk6KHQuc3BsaWNlKDAsMCxbdixzLnN1YnN0cmluZygwLGUpXSksbisrKSxzPXMuc3Vic3RyaW5nKGUpLGk9aS5zdWJzdHJpbmcoZSkpLDAhPT0oZT1hKHMsaSkpJiYodFtuXVsxXT1zLnN1YnN0cmluZyhzLmxlbmd0aC1lKSt0W25dWzFdLHM9cy5zdWJzdHJpbmcoMCxzLmxlbmd0aC1lKSxpPWkuc3Vic3RyaW5nKDAsaS5sZW5ndGgtZSkpKSwwPT09cj90LnNwbGljZShuLW8scitvLFt5LHNdKTowPT09bz90LnNwbGljZShuLXIscitvLFtkLGldKTp0LnNwbGljZShuLXItbyxyK28sW2QsaV0sW3ksc10pLG49bi1yLW8rKHI/MTowKSsobz8xOjApKzEpOjAhPT1uJiZ0W24tMV1bMF09PXY/KHRbbi0xXVsxXSs9dFtuXVsxXSx0LnNwbGljZShuLDEpKTpuKyssbz0wLHI9MCxpPSIiLHM9IiJ9IiI9PT10W3QubGVuZ3RoLTFdWzFdJiZ0LnBvcCgpO3ZhciBjPSExO2ZvcihuPTE7bjx0Lmxlbmd0aC0xOyl0W24tMV1bMF09PXYmJnRbbisxXVswXT09diYmKHRbbl1bMV0uc3Vic3RyaW5nKHRbbl1bMV0ubGVuZ3RoLXRbbi0xXVsxXS5sZW5ndGgpPT10W24tMV1bMV0/KHRbbl1bMV09dFtuLTFdWzFdK3Rbbl1bMV0uc3Vic3RyaW5nKDAsdFtuXVsxXS5sZW5ndGgtdFtuLTFdWzFdLmxlbmd0aCksdFtuKzFdWzFdPXRbbi0xXVsxXSt0W24rMV1bMV0sdC5zcGxpY2Uobi0xLDEpLGM9ITApOnRbbl1bMV0uc3Vic3RyaW5nKDAsdFtuKzFdWzFdLmxlbmd0aCk9PXRbbisxXVsxXSYmKHRbbi0xXVsxXSs9dFtuKzFdWzFdLHRbbl1bMV09dFtuXVsxXS5zdWJzdHJpbmcodFtuKzFdWzFdLmxlbmd0aCkrdFtuKzFdWzFdLHQuc3BsaWNlKG4rMSwxKSxjPSEwKSksbisrO2MmJnUodCl9ZnVuY3Rpb24gYyh0LGUpe2lmKDA9PT1lKXJldHVyblt2LHRdO2Zvcih2YXIgbj0wLHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG89dFtyXTtpZihvWzBdPT09ZHx8b1swXT09PXYpe3ZhciBpPW4rb1sxXS5sZW5ndGg7aWYoZT09PWkpcmV0dXJuW3IrMSx0XTtpZihlPGkpe3Q9dC5zbGljZSgpO3ZhciBsPWUtbixhPVtvWzBdLG9bMV0uc2xpY2UoMCxsKV0scz1bb1swXSxvWzFdLnNsaWNlKGwpXTtyZXR1cm4gdC5zcGxpY2UociwxLGEscyksW3IrMSx0XX1uPWl9fXRocm93IG5ldyBFcnJvcigiY3Vyc29yX3BvcyBpcyBvdXQgb2YgYm91bmRzISIpfWZ1bmN0aW9uIGYodCxlKXt2YXIgbj1jKHQsZSkscj1uWzFdLG89blswXSxpPXJbb10sbD1yW28rMV07aWYobnVsbD09aSlyZXR1cm4gdDtpZihpWzBdIT09dilyZXR1cm4gdDtpZihudWxsIT1sJiZpWzFdK2xbMV09PT1sWzFdK2lbMV0pcmV0dXJuIHIuc3BsaWNlKG8sMixsLGkpLHAocixvLDIpO2lmKG51bGwhPWwmJjA9PT1sWzFdLmluZGV4T2YoaVsxXSkpe3Iuc3BsaWNlKG8sMixbbFswXSxpWzFdXSxbMCxpWzFdXSk7dmFyIGE9bFsxXS5zbGljZShpWzFdLmxlbmd0aCk7cmV0dXJuIGEubGVuZ3RoPjAmJnIuc3BsaWNlKG8rMiwwLFtsWzBdLGFdKSxwKHIsbywzKX1yZXR1cm4gdH1mdW5jdGlvbiBoKHQpe2Zvcih2YXIgZT0hMSxuPWZ1bmN0aW9uKHQpe3JldHVybiB0LmNoYXJDb2RlQXQoMCk+PTU2MzIwJiZ0LmNoYXJDb2RlQXQoMCk8PTU3MzQzfSxyPTI7cjx0Lmxlbmd0aDtyKz0xKXRbci0yXVswXT09PXYmJmZ1bmN0aW9uKHQpe3JldHVybiB0LmNoYXJDb2RlQXQodC5sZW5ndGgtMSk+PTU1Mjk2JiZ0LmNoYXJDb2RlQXQodC5sZW5ndGgtMSk8PTU2MzE5fSh0W3ItMl1bMV0pJiZ0W3ItMV1bMF09PT1kJiZuKHRbci0xXVsxXSkmJnRbcl1bMF09PT15JiZuKHRbcl1bMV0pJiYoZT0hMCx0W3ItMV1bMV09dFtyLTJdWzFdLnNsaWNlKC0xKSt0W3ItMV1bMV0sdFtyXVsxXT10W3ItMl1bMV0uc2xpY2UoLTEpK3Rbcl1bMV0sdFtyLTJdWzFdPXRbci0yXVsxXS5zbGljZSgwLC0xKSk7aWYoIWUpcmV0dXJuIHQ7Zm9yKHZhciBvPVtdLHI9MDtyPHQubGVuZ3RoO3IrPTEpdFtyXVsxXS5sZW5ndGg+MCYmby5wdXNoKHRbcl0pO3JldHVybiBvfWZ1bmN0aW9uIHAodCxlLG4pe2Zvcih2YXIgcj1lK24tMTtyPj0wJiZyPj1lLTE7ci0tKWlmKHIrMTx0Lmxlbmd0aCl7dmFyIG89dFtyXSxpPXRbcisxXTtvWzBdPT09aVsxXSYmdC5zcGxpY2UociwyLFtvWzBdLG9bMV0raVsxXV0pfXJldHVybiB0fXZhciBkPS0xLHk9MSx2PTAsYj1uO2IuSU5TRVJUPXksYi5ERUxFVEU9ZCxiLkVRVUFMPXYsdC5leHBvcnRzPWJ9LGZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gbih0KXt2YXIgZT1bXTtmb3IodmFyIG4gaW4gdCllLnB1c2gobik7cmV0dXJuIGV9ZT10LmV4cG9ydHM9ImZ1bmN0aW9uIj09dHlwZW9mIE9iamVjdC5rZXlzP09iamVjdC5rZXlzOm4sZS5zaGltPW59LGZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gbih0KXtyZXR1cm4iW29iamVjdCBBcmd1bWVudHNdIj09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpfWZ1bmN0aW9uIHIodCl7cmV0dXJuIHQmJiJvYmplY3QiPT10eXBlb2YgdCYmIm51bWJlciI9PXR5cGVvZiB0Lmxlbmd0aCYmT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsImNhbGxlZSIpJiYhT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHQsImNhbGxlZSIpfHwhMX12YXIgbz0iW29iamVjdCBBcmd1bWVudHNdIj09ZnVuY3Rpb24oKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50cyl9KCk7ZT10LmV4cG9ydHM9bz9uOnIsZS5zdXBwb3J0ZWQ9bixlLnVuc3VwcG9ydGVkPXJ9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZnVuY3Rpb24gbyh0LGUsbil7cmV0dXJuIGUgaW4gdD9PYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHt2YWx1ZTpuLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6dFtlXT1uLHR9ZnVuY3Rpb24gaSh0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfWZ1bmN0aW9uIGwodCxlKXtyZXR1cm4gT2JqZWN0LmtleXMoZSkucmVkdWNlKGZ1bmN0aW9uKG4scil7cmV0dXJuIG51bGw9PXRbcl0/bjooZVtyXT09PXRbcl0/bltyXT1lW3JdOkFycmF5LmlzQXJyYXkoZVtyXSk/ZVtyXS5pbmRleE9mKHRbcl0pPDAmJihuW3JdPWVbcl0uY29uY2F0KFt0W3JdXSkpOm5bcl09W2Vbcl0sdFtyXV0sbil9LHt9KX1mdW5jdGlvbiBhKHQpe3JldHVybiB0LnJlZHVjZShmdW5jdGlvbih0LGUpe2lmKDE9PT1lLmluc2VydCl7dmFyIG49KDAsTi5kZWZhdWx0KShlLmF0dHJpYnV0ZXMpO3JldHVybiBkZWxldGUgbi5pbWFnZSx0Lmluc2VydCh7aW1hZ2U6ZS5hdHRyaWJ1dGVzLmltYWdlfSxuKX1pZihudWxsPT1lLmF0dHJpYnV0ZXN8fCEwIT09ZS5hdHRyaWJ1dGVzLmxpc3QmJiEwIT09ZS5hdHRyaWJ1dGVzLmJ1bGxldHx8KGU9KDAsTi5kZWZhdWx0KShlKSxlLmF0dHJpYnV0ZXMubGlzdD9lLmF0dHJpYnV0ZXMubGlzdD0ib3JkZXJlZCI6KGUuYXR0cmlidXRlcy5saXN0PSJidWxsZXQiLGRlbGV0ZSBlLmF0dHJpYnV0ZXMuYnVsbGV0KSksInN0cmluZyI9PXR5cGVvZiBlLmluc2VydCl7dmFyIHI9ZS5pbnNlcnQucmVwbGFjZSgvXHJcbi9nLCJcbiIpLnJlcGxhY2UoL1xyL2csIlxuIik7cmV0dXJuIHQuaW5zZXJ0KHIsZS5hdHRyaWJ1dGVzKX1yZXR1cm4gdC5wdXNoKGUpfSxuZXcgaC5kZWZhdWx0KX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIHM9ImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmInN5bWJvbCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/InN5bWJvbCI6dHlwZW9mIHR9LHU9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7dmFyIG49W10scj0hMCxvPSExLGk9dm9pZCAwO3RyeXtmb3IodmFyIGwsYT10W1N5bWJvbC5pdGVyYXRvcl0oKTshKHI9KGw9YS5uZXh0KCkpLmRvbmUpJiYobi5wdXNoKGwudmFsdWUpLCFlfHxuLmxlbmd0aCE9PWUpO3I9ITApO31jYXRjaCh0KXtvPSEwLGk9dH1maW5hbGx5e3RyeXshciYmYS5yZXR1cm4mJmEucmV0dXJuKCl9ZmluYWxseXtpZihvKXRocm93IGl9fXJldHVybiBufXJldHVybiBmdW5jdGlvbihlLG4pe2lmKEFycmF5LmlzQXJyYXkoZSkpcmV0dXJuIGU7aWYoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChlKSlyZXR1cm4gdChlLG4pO3Rocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKX19KCksYz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LHIua2V5LHIpfX1yZXR1cm4gZnVuY3Rpb24oZSxuLHIpe3JldHVybiBuJiZ0KGUucHJvdG90eXBlLG4pLHImJnQoZSxyKSxlfX0oKSxmPW4oNCksaD1yKGYpLHA9bigyMCksZD1yKHApLHk9bigwKSx2PXIoeSksYj1uKDEzKSxnPXIoYiksbT1uKDMxKSxfPXIobSksTz1uKDMpLHc9cihPKSx4PW4oMTQpLGs9cih4KSxFPW4oMjEpLE49cihFKSxqPW4oMTIpLEE9cihqKSxxPW4oMiksVD1yKHEpLFA9L15bIC1+XSokLyxTPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXtpKHRoaXMsdCksdGhpcy5zY3JvbGw9ZSx0aGlzLmRlbHRhPXRoaXMuZ2V0RGVsdGEoKX1yZXR1cm4gYyh0LFt7a2V5OiJhcHBseURlbHRhIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLG49ITE7dGhpcy5zY3JvbGwudXBkYXRlKCk7dmFyIHI9dGhpcy5zY3JvbGwubGVuZ3RoKCk7cmV0dXJuIHRoaXMuc2Nyb2xsLmJhdGNoU3RhcnQoKSx0PWEodCksdC5yZWR1Y2UoZnVuY3Rpb24odCxvKXt2YXIgaT1vLnJldGFpbnx8by5kZWxldGV8fG8uaW5zZXJ0Lmxlbmd0aHx8MSxsPW8uYXR0cmlidXRlc3x8e307aWYobnVsbCE9by5pbnNlcnQpe2lmKCJzdHJpbmciPT10eXBlb2Ygby5pbnNlcnQpe3ZhciBhPW8uaW5zZXJ0O2EuZW5kc1dpdGgoIlxuIikmJm4mJihuPSExLGE9YS5zbGljZSgwLC0xKSksdD49ciYmIWEuZW5kc1dpdGgoIlxuIikmJihuPSEwKSxlLnNjcm9sbC5pbnNlcnRBdCh0LGEpO3ZhciBjPWUuc2Nyb2xsLmxpbmUodCksZj11KGMsMiksaD1mWzBdLHA9ZlsxXSx5PSgwLFQuZGVmYXVsdCkoe30sKDAsTy5idWJibGVGb3JtYXRzKShoKSk7aWYoaCBpbnN0YW5jZW9mIHcuZGVmYXVsdCl7dmFyIGI9aC5kZXNjZW5kYW50KHYuZGVmYXVsdC5MZWFmLHApLGc9dShiLDEpLG09Z1swXTt5PSgwLFQuZGVmYXVsdCkoeSwoMCxPLmJ1YmJsZUZvcm1hdHMpKG0pKX1sPWQuZGVmYXVsdC5hdHRyaWJ1dGVzLmRpZmYoeSxsKXx8e319ZWxzZSBpZigib2JqZWN0Ij09PXMoby5pbnNlcnQpKXt2YXIgXz1PYmplY3Qua2V5cyhvLmluc2VydClbMF07aWYobnVsbD09XylyZXR1cm4gdDtlLnNjcm9sbC5pbnNlcnRBdCh0LF8sby5pbnNlcnRbX10pfXIrPWl9cmV0dXJuIE9iamVjdC5rZXlzKGwpLmZvckVhY2goZnVuY3Rpb24obil7ZS5zY3JvbGwuZm9ybWF0QXQodCxpLG4sbFtuXSl9KSx0K2l9LDApLHQucmVkdWNlKGZ1bmN0aW9uKHQsbil7cmV0dXJuIm51bWJlciI9PXR5cGVvZiBuLmRlbGV0ZT8oZS5zY3JvbGwuZGVsZXRlQXQodCxuLmRlbGV0ZSksdCk6dCsobi5yZXRhaW58fG4uaW5zZXJ0Lmxlbmd0aHx8MSl9LDApLHRoaXMuc2Nyb2xsLmJhdGNoRW5kKCksdGhpcy51cGRhdGUodCl9fSx7a2V5OiJkZWxldGVUZXh0Iix2YWx1ZTpmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLnNjcm9sbC5kZWxldGVBdCh0LGUpLHRoaXMudXBkYXRlKChuZXcgaC5kZWZhdWx0KS5yZXRhaW4odCkuZGVsZXRlKGUpKX19LHtrZXk6ImZvcm1hdExpbmUiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcyxyPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp7fTtyZXR1cm4gdGhpcy5zY3JvbGwudXBkYXRlKCksT2JqZWN0LmtleXMocikuZm9yRWFjaChmdW5jdGlvbihvKXtpZihudWxsPT1uLnNjcm9sbC53aGl0ZWxpc3R8fG4uc2Nyb2xsLndoaXRlbGlzdFtvXSl7dmFyIGk9bi5zY3JvbGwubGluZXModCxNYXRoLm1heChlLDEpKSxsPWU7aS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciBpPWUubGVuZ3RoKCk7aWYoZSBpbnN0YW5jZW9mIGcuZGVmYXVsdCl7dmFyIGE9dC1lLm9mZnNldChuLnNjcm9sbCkscz1lLm5ld2xpbmVJbmRleChhK2wpLWErMTtlLmZvcm1hdEF0KGEscyxvLHJbb10pfWVsc2UgZS5mb3JtYXQobyxyW29dKTtsLT1pfSl9fSksdGhpcy5zY3JvbGwub3B0aW1pemUoKSx0aGlzLnVwZGF0ZSgobmV3IGguZGVmYXVsdCkucmV0YWluKHQpLnJldGFpbihlLCgwLE4uZGVmYXVsdCkocikpKX19LHtrZXk6ImZvcm1hdFRleHQiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcyxyPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp7fTtyZXR1cm4gT2JqZWN0LmtleXMocikuZm9yRWFjaChmdW5jdGlvbihvKXtuLnNjcm9sbC5mb3JtYXRBdCh0LGUsbyxyW29dKX0pLHRoaXMudXBkYXRlKChuZXcgaC5kZWZhdWx0KS5yZXRhaW4odCkucmV0YWluKGUsKDAsTi5kZWZhdWx0KShyKSkpfX0se2tleToiZ2V0Q29udGVudHMiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuZGVsdGEuc2xpY2UodCx0K2UpfX0se2tleToiZ2V0RGVsdGEiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2Nyb2xsLmxpbmVzKCkucmVkdWNlKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuY29uY2F0KGUuZGVsdGEoKSl9LG5ldyBoLmRlZmF1bHQpfX0se2tleToiZ2V0Rm9ybWF0Iix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MCxuPVtdLHI9W107MD09PWU/dGhpcy5zY3JvbGwucGF0aCh0KS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBlPXUodCwxKSxvPWVbMF07byBpbnN0YW5jZW9mIHcuZGVmYXVsdD9uLnB1c2gobyk6byBpbnN0YW5jZW9mIHYuZGVmYXVsdC5MZWFmJiZyLnB1c2gobyl9KToobj10aGlzLnNjcm9sbC5saW5lcyh0LGUpLHI9dGhpcy5zY3JvbGwuZGVzY2VuZGFudHModi5kZWZhdWx0LkxlYWYsdCxlKSk7dmFyIG89W24scl0ubWFwKGZ1bmN0aW9uKHQpe2lmKDA9PT10Lmxlbmd0aClyZXR1cm57fTtmb3IodmFyIGU9KDAsTy5idWJibGVGb3JtYXRzKSh0LnNoaWZ0KCkpO09iamVjdC5rZXlzKGUpLmxlbmd0aD4wOyl7dmFyIG49dC5zaGlmdCgpO2lmKG51bGw9PW4pcmV0dXJuIGU7ZT1sKCgwLE8uYnViYmxlRm9ybWF0cykobiksZSl9cmV0dXJuIGV9KTtyZXR1cm4gVC5kZWZhdWx0LmFwcGx5KFQuZGVmYXVsdCxvKX19LHtrZXk6ImdldFRleHQiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuZ2V0Q29udGVudHModCxlKS5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuInN0cmluZyI9PXR5cGVvZiB0Lmluc2VydH0pLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC5pbnNlcnR9KS5qb2luKCIiKX19LHtrZXk6Imluc2VydEVtYmVkIix2YWx1ZTpmdW5jdGlvbih0LGUsbil7cmV0dXJuIHRoaXMuc2Nyb2xsLmluc2VydEF0KHQsZSxuKSx0aGlzLnVwZGF0ZSgobmV3IGguZGVmYXVsdCkucmV0YWluKHQpLmluc2VydChvKHt9LGUsbikpKX19LHtrZXk6Imluc2VydFRleHQiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcyxyPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp7fTtyZXR1cm4gZT1lLnJlcGxhY2UoL1xyXG4vZywiXG4iKS5yZXBsYWNlKC9cci9nLCJcbiIpLHRoaXMuc2Nyb2xsLmluc2VydEF0KHQsZSksT2JqZWN0LmtleXMocikuZm9yRWFjaChmdW5jdGlvbihvKXtuLnNjcm9sbC5mb3JtYXRBdCh0LGUubGVuZ3RoLG8scltvXSl9KSx0aGlzLnVwZGF0ZSgobmV3IGguZGVmYXVsdCkucmV0YWluKHQpLmluc2VydChlLCgwLE4uZGVmYXVsdCkocikpKX19LHtrZXk6ImlzQmxhbmsiLHZhbHVlOmZ1bmN0aW9uKCl7aWYoMD09dGhpcy5zY3JvbGwuY2hpbGRyZW4ubGVuZ3RoKXJldHVybiEwO2lmKHRoaXMuc2Nyb2xsLmNoaWxkcmVuLmxlbmd0aD4xKXJldHVybiExO3ZhciB0PXRoaXMuc2Nyb2xsLmNoaWxkcmVuLmhlYWQ7cmV0dXJuIHQuc3RhdGljcy5ibG90TmFtZT09PXcuZGVmYXVsdC5ibG90TmFtZSYmKCEodC5jaGlsZHJlbi5sZW5ndGg+MSkmJnQuY2hpbGRyZW4uaGVhZCBpbnN0YW5jZW9mIGsuZGVmYXVsdCl9fSx7a2V5OiJyZW1vdmVGb3JtYXQiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5nZXRUZXh0KHQsZSkscj10aGlzLnNjcm9sbC5saW5lKHQrZSksbz11KHIsMiksaT1vWzBdLGw9b1sxXSxhPTAscz1uZXcgaC5kZWZhdWx0O251bGwhPWkmJihhPWkgaW5zdGFuY2VvZiBnLmRlZmF1bHQ/aS5uZXdsaW5lSW5kZXgobCktbCsxOmkubGVuZ3RoKCktbCxzPWkuZGVsdGEoKS5zbGljZShsLGwrYS0xKS5pbnNlcnQoIlxuIikpO3ZhciBjPXRoaXMuZ2V0Q29udGVudHModCxlK2EpLGY9Yy5kaWZmKChuZXcgaC5kZWZhdWx0KS5pbnNlcnQobikuY29uY2F0KHMpKSxwPShuZXcgaC5kZWZhdWx0KS5yZXRhaW4odCkuY29uY2F0KGYpO3JldHVybiB0aGlzLmFwcGx5RGVsdGEocCl9fSx7a2V5OiJ1cGRhdGUiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpbXSxuPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp2b2lkIDAscj10aGlzLmRlbHRhO2lmKDE9PT1lLmxlbmd0aCYmImNoYXJhY3RlckRhdGEiPT09ZVswXS50eXBlJiZlWzBdLnRhcmdldC5kYXRhLm1hdGNoKFApJiZ2LmRlZmF1bHQuZmluZChlWzBdLnRhcmdldCkpe3ZhciBvPXYuZGVmYXVsdC5maW5kKGVbMF0udGFyZ2V0KSxpPSgwLE8uYnViYmxlRm9ybWF0cykobyksbD1vLm9mZnNldCh0aGlzLnNjcm9sbCksYT1lWzBdLm9sZFZhbHVlLnJlcGxhY2UoXy5kZWZhdWx0LkNPTlRFTlRTLCIiKSxzPShuZXcgaC5kZWZhdWx0KS5pbnNlcnQoYSksdT0obmV3IGguZGVmYXVsdCkuaW5zZXJ0KG8udmFsdWUoKSk7dD0obmV3IGguZGVmYXVsdCkucmV0YWluKGwpLmNvbmNhdChzLmRpZmYodSxuKSkucmVkdWNlKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGUuaW5zZXJ0P3QuaW5zZXJ0KGUuaW5zZXJ0LGkpOnQucHVzaChlKX0sbmV3IGguZGVmYXVsdCksdGhpcy5kZWx0YT1yLmNvbXBvc2UodCl9ZWxzZSB0aGlzLmRlbHRhPXRoaXMuZ2V0RGVsdGEoKSx0JiYoMCxBLmRlZmF1bHQpKHIuY29tcG9zZSh0KSx0aGlzLmRlbHRhKXx8KHQ9ci5kaWZmKHRoaXMuZGVsdGEsbikpO3JldHVybiB0fX1dKSx0fSgpO2UuZGVmYXVsdD1TfSxmdW5jdGlvbih0LGUpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBuKCl7fWZ1bmN0aW9uIHIodCxlLG4pe3RoaXMuZm49dCx0aGlzLmNvbnRleHQ9ZSx0aGlzLm9uY2U9bnx8ITF9ZnVuY3Rpb24gbygpe3RoaXMuX2V2ZW50cz1uZXcgbix0aGlzLl9ldmVudHNDb3VudD0wfXZhciBpPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksbD0ifiI7T2JqZWN0LmNyZWF0ZSYmKG4ucHJvdG90eXBlPU9iamVjdC5jcmVhdGUobnVsbCksKG5ldyBuKS5fX3Byb3RvX198fChsPSExKSksby5wcm90b3R5cGUuZXZlbnROYW1lcz1mdW5jdGlvbigpe3ZhciB0LGUsbj1bXTtpZigwPT09dGhpcy5fZXZlbnRzQ291bnQpcmV0dXJuIG47Zm9yKGUgaW4gdD10aGlzLl9ldmVudHMpaS5jYWxsKHQsZSkmJm4ucHVzaChsP2Uuc2xpY2UoMSk6ZSk7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM/bi5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0KSk6bn0sby5wcm90b3R5cGUubGlzdGVuZXJzPWZ1bmN0aW9uKHQsZSl7dmFyIG49bD9sK3Q6dCxyPXRoaXMuX2V2ZW50c1tuXTtpZihlKXJldHVybiEhcjtpZighcilyZXR1cm5bXTtpZihyLmZuKXJldHVybltyLmZuXTtmb3IodmFyIG89MCxpPXIubGVuZ3RoLGE9bmV3IEFycmF5KGkpO288aTtvKyspYVtvXT1yW29dLmZuO3JldHVybiBhfSxvLnByb3RvdHlwZS5lbWl0PWZ1bmN0aW9uKHQsZSxuLHIsbyxpKXt2YXIgYT1sP2wrdDp0O2lmKCF0aGlzLl9ldmVudHNbYV0pcmV0dXJuITE7dmFyIHMsdSxjPXRoaXMuX2V2ZW50c1thXSxmPWFyZ3VtZW50cy5sZW5ndGg7aWYoYy5mbil7c3dpdGNoKGMub25jZSYmdGhpcy5yZW1vdmVMaXN0ZW5lcih0LGMuZm4sdm9pZCAwLCEwKSxmKXtjYXNlIDE6cmV0dXJuIGMuZm4uY2FsbChjLmNvbnRleHQpLCEwO2Nhc2UgMjpyZXR1cm4gYy5mbi5jYWxsKGMuY29udGV4dCxlKSwhMDtjYXNlIDM6cmV0dXJuIGMuZm4uY2FsbChjLmNvbnRleHQsZSxuKSwhMDtjYXNlIDQ6cmV0dXJuIGMuZm4uY2FsbChjLmNvbnRleHQsZSxuLHIpLCEwO2Nhc2UgNTpyZXR1cm4gYy5mbi5jYWxsKGMuY29udGV4dCxlLG4scixvKSwhMDtjYXNlIDY6cmV0dXJuIGMuZm4uY2FsbChjLmNvbnRleHQsZSxuLHIsbyxpKSwhMH1mb3IodT0xLHM9bmV3IEFycmF5KGYtMSk7dTxmO3UrKylzW3UtMV09YXJndW1lbnRzW3VdO2MuZm4uYXBwbHkoYy5jb250ZXh0LHMpfWVsc2V7dmFyIGgscD1jLmxlbmd0aDtmb3IodT0wO3U8cDt1Kyspc3dpdGNoKGNbdV0ub25jZSYmdGhpcy5yZW1vdmVMaXN0ZW5lcih0LGNbdV0uZm4sdm9pZCAwLCEwKSxmKXtjYXNlIDE6Y1t1XS5mbi5jYWxsKGNbdV0uY29udGV4dCk7YnJlYWs7Y2FzZSAyOmNbdV0uZm4uY2FsbChjW3VdLmNvbnRleHQsZSk7YnJlYWs7Y2FzZSAzOmNbdV0uZm4uY2FsbChjW3VdLmNvbnRleHQsZSxuKTticmVhaztjYXNlIDQ6Y1t1XS5mbi5jYWxsKGNbdV0uY29udGV4dCxlLG4scik7YnJlYWs7ZGVmYXVsdDppZighcylmb3IoaD0xLHM9bmV3IEFycmF5KGYtMSk7aDxmO2grKylzW2gtMV09YXJndW1lbnRzW2hdO2NbdV0uZm4uYXBwbHkoY1t1XS5jb250ZXh0LHMpfX1yZXR1cm4hMH0sby5wcm90b3R5cGUub249ZnVuY3Rpb24odCxlLG4pe3ZhciBvPW5ldyByKGUsbnx8dGhpcyksaT1sP2wrdDp0O3JldHVybiB0aGlzLl9ldmVudHNbaV0/dGhpcy5fZXZlbnRzW2ldLmZuP3RoaXMuX2V2ZW50c1tpXT1bdGhpcy5fZXZlbnRzW2ldLG9dOnRoaXMuX2V2ZW50c1tpXS5wdXNoKG8pOih0aGlzLl9ldmVudHNbaV09byx0aGlzLl9ldmVudHNDb3VudCsrKSx0aGlzfSxvLnByb3RvdHlwZS5vbmNlPWZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uZXcgcihlLG58fHRoaXMsITApLGk9bD9sK3Q6dDtyZXR1cm4gdGhpcy5fZXZlbnRzW2ldP3RoaXMuX2V2ZW50c1tpXS5mbj90aGlzLl9ldmVudHNbaV09W3RoaXMuX2V2ZW50c1tpXSxvXTp0aGlzLl9ldmVudHNbaV0ucHVzaChvKToodGhpcy5fZXZlbnRzW2ldPW8sdGhpcy5fZXZlbnRzQ291bnQrKyksdGhpc30sby5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI9ZnVuY3Rpb24odCxlLHIsbyl7dmFyIGk9bD9sK3Q6dDtpZighdGhpcy5fZXZlbnRzW2ldKXJldHVybiB0aGlzO2lmKCFlKXJldHVybiAwPT0tLXRoaXMuX2V2ZW50c0NvdW50P3RoaXMuX2V2ZW50cz1uZXcgbjpkZWxldGUgdGhpcy5fZXZlbnRzW2ldLHRoaXM7dmFyIGE9dGhpcy5fZXZlbnRzW2ldO2lmKGEuZm4pYS5mbiE9PWV8fG8mJiFhLm9uY2V8fHImJmEuY29udGV4dCE9PXJ8fCgwPT0tLXRoaXMuX2V2ZW50c0NvdW50P3RoaXMuX2V2ZW50cz1uZXcgbjpkZWxldGUgdGhpcy5fZXZlbnRzW2ldKTtlbHNle2Zvcih2YXIgcz0wLHU9W10sYz1hLmxlbmd0aDtzPGM7cysrKShhW3NdLmZuIT09ZXx8byYmIWFbc10ub25jZXx8ciYmYVtzXS5jb250ZXh0IT09cikmJnUucHVzaChhW3NdKTt1Lmxlbmd0aD90aGlzLl9ldmVudHNbaV09MT09PXUubGVuZ3RoP3VbMF06dTowPT0tLXRoaXMuX2V2ZW50c0NvdW50P3RoaXMuX2V2ZW50cz1uZXcgbjpkZWxldGUgdGhpcy5fZXZlbnRzW2ldfXJldHVybiB0aGlzfSxvLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnM9ZnVuY3Rpb24odCl7dmFyIGU7cmV0dXJuIHQ/KGU9bD9sK3Q6dCx0aGlzLl9ldmVudHNbZV0mJigwPT0tLXRoaXMuX2V2ZW50c0NvdW50P3RoaXMuX2V2ZW50cz1uZXcgbjpkZWxldGUgdGhpcy5fZXZlbnRzW2VdKSk6KHRoaXMuX2V2ZW50cz1uZXcgbix0aGlzLl9ldmVudHNDb3VudD0wKSx0aGlzfSxvLnByb3RvdHlwZS5vZmY9by5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIsby5wcm90b3R5cGUuYWRkTGlzdGVuZXI9by5wcm90b3R5cGUub24sby5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LG8ucHJlZml4ZWQ9bCxvLkV2ZW50RW1pdHRlcj1vLHZvaWQgMCE9PXQmJih0LmV4cG9ydHM9byl9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZnVuY3Rpb24gbyh0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfWZ1bmN0aW9uIGkodCxlKXtpZighdCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpO3JldHVybiFlfHwib2JqZWN0IiE9dHlwZW9mIGUmJiJmdW5jdGlvbiIhPXR5cGVvZiBlP3Q6ZX1mdW5jdGlvbiBsKHQsZSl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgIit0eXBlb2YgZSk7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksZSYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YodCxlKTp0Ll9fcHJvdG9fXz1lKX1mdW5jdGlvbiBhKHQpe3JldHVybiB0IGluc3RhbmNlb2Ygdi5kZWZhdWx0fHx0IGluc3RhbmNlb2YgeS5CbG9ja0VtYmVkfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgcz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXt2YXIgbj1bXSxyPSEwLG89ITEsaT12b2lkIDA7dHJ5e2Zvcih2YXIgbCxhPXRbU3ltYm9sLml0ZXJhdG9yXSgpOyEocj0obD1hLm5leHQoKSkuZG9uZSkmJihuLnB1c2gobC52YWx1ZSksIWV8fG4ubGVuZ3RoIT09ZSk7cj0hMCk7fWNhdGNoKHQpe289ITAsaT10fWZpbmFsbHl7dHJ5eyFyJiZhLnJldHVybiYmYS5yZXR1cm4oKX1maW5hbGx5e2lmKG8pdGhyb3cgaX19cmV0dXJuIG59cmV0dXJuIGZ1bmN0aW9uKGUsbil7aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gZTtpZihTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGUpKXJldHVybiB0KGUsbik7dGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpfX0oKSx1PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsci5rZXkscil9fXJldHVybiBmdW5jdGlvbihlLG4scil7cmV0dXJuIG4mJnQoZS5wcm90b3R5cGUsbiksciYmdChlLHIpLGV9fSgpLGM9ZnVuY3Rpb24gdChlLG4scil7bnVsbD09PWUmJihlPUZ1bmN0aW9uLnByb3RvdHlwZSk7dmFyIG89T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLG4pO2lmKHZvaWQgMD09PW8pe3ZhciBpPU9iamVjdC5nZXRQcm90b3R5cGVPZihlKTtyZXR1cm4gbnVsbD09PWk/dm9pZCAwOnQoaSxuLHIpfWlmKCJ2YWx1ZSJpbiBvKXJldHVybiBvLnZhbHVlO3ZhciBsPW8uZ2V0O2lmKHZvaWQgMCE9PWwpcmV0dXJuIGwuY2FsbChyKX0sZj1uKDApLGg9cihmKSxwPW4oOSksZD1yKHApLHk9bigzKSx2PXIoeSksYj1uKDE0KSxnPXIoYiksbT1uKDEzKSxfPXIobSksTz1uKDIzKSx3PXIoTykseD1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKHQsbil7byh0aGlzLGUpO3ZhciByPWkodGhpcywoZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlKSkuY2FsbCh0aGlzLHQpKTtyZXR1cm4gci5lbWl0dGVyPW4uZW1pdHRlcixBcnJheS5pc0FycmF5KG4ud2hpdGVsaXN0KSYmKHIud2hpdGVsaXN0PW4ud2hpdGVsaXN0LnJlZHVjZShmdW5jdGlvbih0LGUpe3JldHVybiB0W2VdPSEwLHR9LHt9KSksci5kb21Ob2RlLmFkZEV2ZW50TGlzdGVuZXIoIkRPTU5vZGVJbnNlcnRlZCIsZnVuY3Rpb24oKXt9KSxyLm9wdGltaXplKCksci5lbmFibGUoKSxyfXJldHVybiBsKGUsdCksdShlLFt7a2V5OiJiYXRjaFN0YXJ0Iix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuYmF0Y2g9ITB9fSx7a2V5OiJiYXRjaEVuZCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmJhdGNoPSExLHRoaXMub3B0aW1pemUoKX19LHtrZXk6ImRlbGV0ZUF0Iix2YWx1ZTpmdW5jdGlvbih0LG4pe3ZhciByPXRoaXMubGluZSh0KSxvPXMociwyKSxpPW9bMF0sbD1vWzFdLGE9dGhpcy5saW5lKHQrbiksdT1zKGEsMSksZj11WzBdO2lmKGMoZS5wcm90b3R5cGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZS5wcm90b3R5cGUpLCJkZWxldGVBdCIsdGhpcykuY2FsbCh0aGlzLHQsbiksbnVsbCE9ZiYmaSE9PWYmJmw+MCl7aWYoaSBpbnN0YW5jZW9mIHkuQmxvY2tFbWJlZHx8ZiBpbnN0YW5jZW9mIHkuQmxvY2tFbWJlZClyZXR1cm4gdm9pZCB0aGlzLm9wdGltaXplKCk7aWYoaSBpbnN0YW5jZW9mIF8uZGVmYXVsdCl7dmFyIGg9aS5uZXdsaW5lSW5kZXgoaS5sZW5ndGgoKSwhMCk7aWYoaD4tMSYmKGk9aS5zcGxpdChoKzEpKT09PWYpcmV0dXJuIHZvaWQgdGhpcy5vcHRpbWl6ZSgpfWVsc2UgaWYoZiBpbnN0YW5jZW9mIF8uZGVmYXVsdCl7dmFyIHA9Zi5uZXdsaW5lSW5kZXgoMCk7cD4tMSYmZi5zcGxpdChwKzEpfXZhciBkPWYuY2hpbGRyZW4uaGVhZCBpbnN0YW5jZW9mIGcuZGVmYXVsdD9udWxsOmYuY2hpbGRyZW4uaGVhZDtpLm1vdmVDaGlsZHJlbihmLGQpLGkucmVtb3ZlKCl9dGhpcy5vcHRpbWl6ZSgpfX0se2tleToiZW5hYmxlIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PSEoYXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0pfHxhcmd1bWVudHNbMF07dGhpcy5kb21Ob2RlLnNldEF0dHJpYnV0ZSgiY29udGVudGVkaXRhYmxlIix0KX19LHtrZXk6ImZvcm1hdEF0Iix2YWx1ZTpmdW5jdGlvbih0LG4scixvKXsobnVsbD09dGhpcy53aGl0ZWxpc3R8fHRoaXMud2hpdGVsaXN0W3JdKSYmKGMoZS5wcm90b3R5cGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZS5wcm90b3R5cGUpLCJmb3JtYXRBdCIsdGhpcykuY2FsbCh0aGlzLHQsbixyLG8pLHRoaXMub3B0aW1pemUoKSl9fSx7a2V5OiJpbnNlcnRBdCIsdmFsdWU6ZnVuY3Rpb24odCxuLHIpe2lmKG51bGw9PXJ8fG51bGw9PXRoaXMud2hpdGVsaXN0fHx0aGlzLndoaXRlbGlzdFtuXSl7aWYodD49dGhpcy5sZW5ndGgoKSlpZihudWxsPT1yfHxudWxsPT1oLmRlZmF1bHQucXVlcnkobixoLmRlZmF1bHQuU2NvcGUuQkxPQ0spKXt2YXIgbz1oLmRlZmF1bHQuY3JlYXRlKHRoaXMuc3RhdGljcy5kZWZhdWx0Q2hpbGQpO3RoaXMuYXBwZW5kQ2hpbGQobyksbnVsbD09ciYmbi5lbmRzV2l0aCgiXG4iKSYmKG49bi5zbGljZSgwLC0xKSksby5pbnNlcnRBdCgwLG4scil9ZWxzZXt2YXIgaT1oLmRlZmF1bHQuY3JlYXRlKG4scik7dGhpcy5hcHBlbmRDaGlsZChpKX1lbHNlIGMoZS5wcm90b3R5cGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZS5wcm90b3R5cGUpLCJpbnNlcnRBdCIsdGhpcykuY2FsbCh0aGlzLHQsbixyKTt0aGlzLm9wdGltaXplKCl9fX0se2tleToiaW5zZXJ0QmVmb3JlIix2YWx1ZTpmdW5jdGlvbih0LG4pe2lmKHQuc3RhdGljcy5zY29wZT09PWguZGVmYXVsdC5TY29wZS5JTkxJTkVfQkxPVCl7dmFyIHI9aC5kZWZhdWx0LmNyZWF0ZSh0aGlzLnN0YXRpY3MuZGVmYXVsdENoaWxkKTtyLmFwcGVuZENoaWxkKHQpLHQ9cn1jKGUucHJvdG90eXBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUucHJvdG90eXBlKSwiaW5zZXJ0QmVmb3JlIix0aGlzKS5jYWxsKHRoaXMsdCxuKX19LHtrZXk6ImxlYWYiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnBhdGgodCkucG9wKCl8fFtudWxsLC0xXX19LHtrZXk6ImxpbmUiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0PT09dGhpcy5sZW5ndGgoKT90aGlzLmxpbmUodC0xKTp0aGlzLmRlc2NlbmRhbnQoYSx0KX19LHtrZXk6ImxpbmVzIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTowLGU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOk51bWJlci5NQVhfVkFMVUU7cmV0dXJuIGZ1bmN0aW9uIHQoZSxuLHIpe3ZhciBvPVtdLGk9cjtyZXR1cm4gZS5jaGlsZHJlbi5mb3JFYWNoQXQobixyLGZ1bmN0aW9uKGUsbixyKXthKGUpP28ucHVzaChlKTplIGluc3RhbmNlb2YgaC5kZWZhdWx0LkNvbnRhaW5lciYmKG89by5jb25jYXQodChlLG4saSkpKSxpLT1yfSksb30odGhpcyx0LGUpfX0se2tleToib3B0aW1pemUiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOltdLG49YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9OyEwIT09dGhpcy5iYXRjaCYmKGMoZS5wcm90b3R5cGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZS5wcm90b3R5cGUpLCJvcHRpbWl6ZSIsdGhpcykuY2FsbCh0aGlzLHQsbiksdC5sZW5ndGg+MCYmdGhpcy5lbWl0dGVyLmVtaXQoZC5kZWZhdWx0LmV2ZW50cy5TQ1JPTExfT1BUSU1JWkUsdCxuKSl9fSx7a2V5OiJwYXRoIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gYyhlLnByb3RvdHlwZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlLnByb3RvdHlwZSksInBhdGgiLHRoaXMpLmNhbGwodGhpcyx0KS5zbGljZSgxKX19LHtrZXk6InVwZGF0ZSIsdmFsdWU6ZnVuY3Rpb24odCl7aWYoITAhPT10aGlzLmJhdGNoKXt2YXIgbj1kLmRlZmF1bHQuc291cmNlcy5VU0VSOyJzdHJpbmciPT10eXBlb2YgdCYmKG49dCksQXJyYXkuaXNBcnJheSh0KXx8KHQ9dGhpcy5vYnNlcnZlci50YWtlUmVjb3JkcygpKSx0Lmxlbmd0aD4wJiZ0aGlzLmVtaXR0ZXIuZW1pdChkLmRlZmF1bHQuZXZlbnRzLlNDUk9MTF9CRUZPUkVfVVBEQVRFLG4sdCksYyhlLnByb3RvdHlwZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlLnByb3RvdHlwZSksInVwZGF0ZSIsdGhpcykuY2FsbCh0aGlzLHQuY29uY2F0KFtdKSksdC5sZW5ndGg+MCYmdGhpcy5lbWl0dGVyLmVtaXQoZC5kZWZhdWx0LmV2ZW50cy5TQ1JPTExfVVBEQVRFLG4sdCl9fX1dKSxlfShoLmRlZmF1bHQuU2Nyb2xsKTt4LmJsb3ROYW1lPSJzY3JvbGwiLHguY2xhc3NOYW1lPSJxbC1lZGl0b3IiLHgudGFnTmFtZT0iRElWIix4LmRlZmF1bHRDaGlsZD0iYmxvY2siLHguYWxsb3dlZENoaWxkcmVuPVt2LmRlZmF1bHQseS5CbG9ja0VtYmVkLHcuZGVmYXVsdF0sZS5kZWZhdWx0PXh9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZnVuY3Rpb24gbyh0LGUsbil7cmV0dXJuIGUgaW4gdD9PYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHt2YWx1ZTpuLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6dFtlXT1uLHR9ZnVuY3Rpb24gaSh0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfWZ1bmN0aW9uIGwodCxlKXtpZighdCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpO3JldHVybiFlfHwib2JqZWN0IiE9dHlwZW9mIGUmJiJmdW5jdGlvbiIhPXR5cGVvZiBlP3Q6ZX1mdW5jdGlvbiBhKHQsZSl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgIit0eXBlb2YgZSk7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksZSYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YodCxlKTp0Ll9fcHJvdG9fXz1lKX1mdW5jdGlvbiBzKHQsZSxuKXtyZXR1cm4ib2JqZWN0Ij09PSh2b2lkIDA9PT1lPyJ1bmRlZmluZWQiOngoZSkpP09iamVjdC5rZXlzKGUpLnJlZHVjZShmdW5jdGlvbih0LG4pe3JldHVybiBzKHQsbixlW25dKX0sdCk6dC5yZWR1Y2UoZnVuY3Rpb24odCxyKXtyZXR1cm4gci5hdHRyaWJ1dGVzJiZyLmF0dHJpYnV0ZXNbZV0/dC5wdXNoKHIpOnQuaW5zZXJ0KHIuaW5zZXJ0LCgwLGouZGVmYXVsdCkoe30sbyh7fSxlLG4pLHIuYXR0cmlidXRlcykpfSxuZXcgcS5kZWZhdWx0KX1mdW5jdGlvbiB1KHQpe2lmKHQubm9kZVR5cGUhPT1Ob2RlLkVMRU1FTlRfTk9ERSlyZXR1cm57fTtyZXR1cm4gdFsiX19xbC1jb21wdXRlZC1zdHlsZSJdfHwodFsiX19xbC1jb21wdXRlZC1zdHlsZSJdPXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHQpKX1mdW5jdGlvbiBjKHQsZSl7Zm9yKHZhciBuPSIiLHI9dC5vcHMubGVuZ3RoLTE7cj49MCYmbi5sZW5ndGg8ZS5sZW5ndGg7LS1yKXt2YXIgbz10Lm9wc1tyXTtpZigic3RyaW5nIiE9dHlwZW9mIG8uaW5zZXJ0KWJyZWFrO249by5pbnNlcnQrbn1yZXR1cm4gbi5zbGljZSgtMSplLmxlbmd0aCk9PT1lfWZ1bmN0aW9uIGYodCl7cmV0dXJuIDAhPT10LmNoaWxkTm9kZXMubGVuZ3RoJiZbImJsb2NrIiwibGlzdC1pdGVtIl0uaW5kZXhPZih1KHQpLmRpc3BsYXkpPi0xfWZ1bmN0aW9uIGgodCxlLG4pe3JldHVybiB0Lm5vZGVUeXBlPT09dC5URVhUX05PREU/bi5yZWR1Y2UoZnVuY3Rpb24oZSxuKXtyZXR1cm4gbih0LGUpfSxuZXcgcS5kZWZhdWx0KTp0Lm5vZGVUeXBlPT09dC5FTEVNRU5UX05PREU/W10ucmVkdWNlLmNhbGwodC5jaGlsZE5vZGVzfHxbXSxmdW5jdGlvbihyLG8pe3ZhciBpPWgobyxlLG4pO3JldHVybiBvLm5vZGVUeXBlPT09dC5FTEVNRU5UX05PREUmJihpPWUucmVkdWNlKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGUobyx0KX0saSksaT0ob1tXXXx8W10pLnJlZHVjZShmdW5jdGlvbih0LGUpe3JldHVybiBlKG8sdCl9LGkpKSxyLmNvbmNhdChpKX0sbmV3IHEuZGVmYXVsdCk6bmV3IHEuZGVmYXVsdH1mdW5jdGlvbiBwKHQsZSxuKXtyZXR1cm4gcyhuLHQsITApfWZ1bmN0aW9uIGQodCxlKXt2YXIgbj1QLmRlZmF1bHQuQXR0cmlidXRvci5BdHRyaWJ1dGUua2V5cyh0KSxyPVAuZGVmYXVsdC5BdHRyaWJ1dG9yLkNsYXNzLmtleXModCksbz1QLmRlZmF1bHQuQXR0cmlidXRvci5TdHlsZS5rZXlzKHQpLGk9e307cmV0dXJuIG4uY29uY2F0KHIpLmNvbmNhdChvKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciBuPVAuZGVmYXVsdC5xdWVyeShlLFAuZGVmYXVsdC5TY29wZS5BVFRSSUJVVEUpO251bGwhPW4mJihpW24uYXR0ck5hbWVdPW4udmFsdWUodCksaVtuLmF0dHJOYW1lXSl8fChuPVlbZV0sbnVsbD09bnx8bi5hdHRyTmFtZSE9PWUmJm4ua2V5TmFtZSE9PWV8fChpW24uYXR0ck5hbWVdPW4udmFsdWUodCl8fHZvaWQgMCksbnVsbD09KG49WFtlXSl8fG4uYXR0ck5hbWUhPT1lJiZuLmtleU5hbWUhPT1lfHwobj1YW2VdLGlbbi5hdHRyTmFtZV09bi52YWx1ZSh0KXx8dm9pZCAwKSl9KSxPYmplY3Qua2V5cyhpKS5sZW5ndGg+MCYmKGU9cyhlLGkpKSxlfWZ1bmN0aW9uIHkodCxlKXt2YXIgbj1QLmRlZmF1bHQucXVlcnkodCk7aWYobnVsbD09bilyZXR1cm4gZTtpZihuLnByb3RvdHlwZSBpbnN0YW5jZW9mIFAuZGVmYXVsdC5FbWJlZCl7dmFyIHI9e30sbz1uLnZhbHVlKHQpO251bGwhPW8mJihyW24uYmxvdE5hbWVdPW8sZT0obmV3IHEuZGVmYXVsdCkuaW5zZXJ0KHIsbi5mb3JtYXRzKHQpKSl9ZWxzZSJmdW5jdGlvbiI9PXR5cGVvZiBuLmZvcm1hdHMmJihlPXMoZSxuLmJsb3ROYW1lLG4uZm9ybWF0cyh0KSkpO3JldHVybiBlfWZ1bmN0aW9uIHYodCxlKXtyZXR1cm4gYyhlLCJcbiIpfHxlLmluc2VydCgiXG4iKSxlfWZ1bmN0aW9uIGIoKXtyZXR1cm4gbmV3IHEuZGVmYXVsdH1mdW5jdGlvbiBnKHQsZSl7dmFyIG49UC5kZWZhdWx0LnF1ZXJ5KHQpO2lmKG51bGw9PW58fCJsaXN0LWl0ZW0iIT09bi5ibG90TmFtZXx8IWMoZSwiXG4iKSlyZXR1cm4gZTtmb3IodmFyIHI9LTEsbz10LnBhcmVudE5vZGU7IW8uY2xhc3NMaXN0LmNvbnRhaW5zKCJxbC1jbGlwYm9hcmQiKTspImxpc3QiPT09KFAuZGVmYXVsdC5xdWVyeShvKXx8e30pLmJsb3ROYW1lJiYocis9MSksbz1vLnBhcmVudE5vZGU7cmV0dXJuIHI8PTA/ZTplLmNvbXBvc2UoKG5ldyBxLmRlZmF1bHQpLnJldGFpbihlLmxlbmd0aCgpLTEpLnJldGFpbigxLHtpbmRlbnQ6cn0pKX1mdW5jdGlvbiBtKHQsZSl7cmV0dXJuIGMoZSwiXG4iKXx8KGYodCl8fGUubGVuZ3RoKCk+MCYmdC5uZXh0U2libGluZyYmZih0Lm5leHRTaWJsaW5nKSkmJmUuaW5zZXJ0KCJcbiIpLGV9ZnVuY3Rpb24gXyh0LGUpe2lmKGYodCkmJm51bGwhPXQubmV4dEVsZW1lbnRTaWJsaW5nJiYhYyhlLCJcblxuIikpe3ZhciBuPXQub2Zmc2V0SGVpZ2h0K3BhcnNlRmxvYXQodSh0KS5tYXJnaW5Ub3ApK3BhcnNlRmxvYXQodSh0KS5tYXJnaW5Cb3R0b20pO3QubmV4dEVsZW1lbnRTaWJsaW5nLm9mZnNldFRvcD50Lm9mZnNldFRvcCsxLjUqbiYmZS5pbnNlcnQoIlxuIil9cmV0dXJuIGV9ZnVuY3Rpb24gTyh0LGUpe3ZhciBuPXt9LHI9dC5zdHlsZXx8e307cmV0dXJuIHIuZm9udFN0eWxlJiYiaXRhbGljIj09PXUodCkuZm9udFN0eWxlJiYobi5pdGFsaWM9ITApLHIuZm9udFdlaWdodCYmKHUodCkuZm9udFdlaWdodC5zdGFydHNXaXRoKCJib2xkIil8fHBhcnNlSW50KHUodCkuZm9udFdlaWdodCk+PTcwMCkmJihuLmJvbGQ9ITApLE9iamVjdC5rZXlzKG4pLmxlbmd0aD4wJiYoZT1zKGUsbikpLHBhcnNlRmxvYXQoci50ZXh0SW5kZW50fHwwKT4wJiYoZT0obmV3IHEuZGVmYXVsdCkuaW5zZXJ0KCJcdCIpLmNvbmNhdChlKSksZX1mdW5jdGlvbiB3KHQsZSl7dmFyIG49dC5kYXRhO2lmKCJPOlAiPT09dC5wYXJlbnROb2RlLnRhZ05hbWUpcmV0dXJuIGUuaW5zZXJ0KG4udHJpbSgpKTtpZigwPT09bi50cmltKCkubGVuZ3RoJiZ0LnBhcmVudE5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCJxbC1jbGlwYm9hcmQiKSlyZXR1cm4gZTtpZighdSh0LnBhcmVudE5vZGUpLndoaXRlU3BhY2Uuc3RhcnRzV2l0aCgicHJlIikpe3ZhciByPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGU9ZS5yZXBsYWNlKC9bXlx1MDBhMF0vZywiIiksZS5sZW5ndGg8MSYmdD8iICI6ZX07bj1uLnJlcGxhY2UoL1xyXG4vZywiICIpLnJlcGxhY2UoL1xuL2csIiAiKSxuPW4ucmVwbGFjZSgvXHNccysvZyxyLmJpbmQociwhMCkpLChudWxsPT10LnByZXZpb3VzU2libGluZyYmZih0LnBhcmVudE5vZGUpfHxudWxsIT10LnByZXZpb3VzU2libGluZyYmZih0LnByZXZpb3VzU2libGluZykpJiYobj1uLnJlcGxhY2UoL15ccysvLHIuYmluZChyLCExKSkpLChudWxsPT10Lm5leHRTaWJsaW5nJiZmKHQucGFyZW50Tm9kZSl8fG51bGwhPXQubmV4dFNpYmxpbmcmJmYodC5uZXh0U2libGluZykpJiYobj1uLnJlcGxhY2UoL1xzKyQvLHIuYmluZChyLCExKSkpfXJldHVybiBlLmluc2VydChuKX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZS5tYXRjaFRleHQ9ZS5tYXRjaFNwYWNpbmc9ZS5tYXRjaE5ld2xpbmU9ZS5tYXRjaEJsb3Q9ZS5tYXRjaEF0dHJpYnV0b3I9ZS5kZWZhdWx0PXZvaWQgMDt2YXIgeD0iZnVuY3Rpb24iPT10eXBlb2YgU3ltYm9sJiYic3ltYm9sIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiYiZnVuY3Rpb24iPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT8ic3ltYm9sIjp0eXBlb2YgdH0saz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXt2YXIgbj1bXSxyPSEwLG89ITEsaT12b2lkIDA7dHJ5e2Zvcih2YXIgbCxhPXRbU3ltYm9sLml0ZXJhdG9yXSgpOyEocj0obD1hLm5leHQoKSkuZG9uZSkmJihuLnB1c2gobC52YWx1ZSksIWV8fG4ubGVuZ3RoIT09ZSk7cj0hMCk7fWNhdGNoKHQpe289ITAsaT10fWZpbmFsbHl7dHJ5eyFyJiZhLnJldHVybiYmYS5yZXR1cm4oKX1maW5hbGx5e2lmKG8pdGhyb3cgaX19cmV0dXJuIG59cmV0dXJuIGZ1bmN0aW9uKGUsbil7aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gZTtpZihTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGUpKXJldHVybiB0KGUsbik7dGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpfX0oKSxFPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsci5rZXkscil9fXJldHVybiBmdW5jdGlvbihlLG4scil7cmV0dXJuIG4mJnQoZS5wcm90b3R5cGUsbiksciYmdChlLHIpLGV9fSgpLE49bigyKSxqPXIoTiksQT1uKDQpLHE9cihBKSxUPW4oMCksUD1yKFQpLFM9big2KSxDPXIoUyksTD1uKDEwKSxNPXIoTCksUj1uKDcpLEk9cihSKSxCPW4oMzQpLEQ9bigzNSksVT1uKDEzKSxGPXIoVSksSD1uKDI0KSxLPW4oMzYpLHo9bigzNyksWj1uKDM4KSxWPSgwLE0uZGVmYXVsdCkoInF1aWxsOmNsaXBib2FyZCIpLFc9Il9fcWwtbWF0Y2hlciIsRz1bW05vZGUuVEVYVF9OT0RFLHddLFtOb2RlLlRFWFRfTk9ERSxtXSxbImJyIix2XSxbTm9kZS5FTEVNRU5UX05PREUsbV0sW05vZGUuRUxFTUVOVF9OT0RFLHldLFtOb2RlLkVMRU1FTlRfTk9ERSxfXSxbTm9kZS5FTEVNRU5UX05PREUsZF0sW05vZGUuRUxFTUVOVF9OT0RFLE9dLFsibGkiLGddLFsiYiIscC5iaW5kKHAsImJvbGQiKV0sWyJpIixwLmJpbmQocCwiaXRhbGljIildLFsic3R5bGUiLGJdXSxZPVtCLkFsaWduQXR0cmlidXRlLEsuRGlyZWN0aW9uQXR0cmlidXRlXS5yZWR1Y2UoZnVuY3Rpb24odCxlKXtyZXR1cm4gdFtlLmtleU5hbWVdPWUsdH0se30pLFg9W0IuQWxpZ25TdHlsZSxELkJhY2tncm91bmRTdHlsZSxILkNvbG9yU3R5bGUsSy5EaXJlY3Rpb25TdHlsZSx6LkZvbnRTdHlsZSxaLlNpemVTdHlsZV0ucmVkdWNlKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRbZS5rZXlOYW1lXT1lLHR9LHt9KSwkPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUodCxuKXtpKHRoaXMsZSk7dmFyIHI9bCh0aGlzLChlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpKS5jYWxsKHRoaXMsdCxuKSk7cmV0dXJuIHIucXVpbGwucm9vdC5hZGRFdmVudExpc3RlbmVyKCJwYXN0ZSIsci5vblBhc3RlLmJpbmQocikpLHIuY29udGFpbmVyPXIucXVpbGwuYWRkQ29udGFpbmVyKCJxbC1jbGlwYm9hcmQiKSxyLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoImNvbnRlbnRlZGl0YWJsZSIsITApLHIuY29udGFpbmVyLnNldEF0dHJpYnV0ZSgidGFiaW5kZXgiLC0xKSxyLm1hdGNoZXJzPVtdLEcuY29uY2F0KHIub3B0aW9ucy5tYXRjaGVycykuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZT1rKHQsMiksbz1lWzBdLGk9ZVsxXTsobi5tYXRjaFZpc3VhbHx8aSE9PV8pJiZyLmFkZE1hdGNoZXIobyxpKX0pLHJ9cmV0dXJuIGEoZSx0KSxFKGUsW3trZXk6ImFkZE1hdGNoZXIiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dGhpcy5tYXRjaGVycy5wdXNoKFt0LGVdKX19LHtrZXk6ImNvbnZlcnQiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKCJzdHJpbmciPT10eXBlb2YgdClyZXR1cm4gdGhpcy5jb250YWluZXIuaW5uZXJIVE1MPXQucmVwbGFjZSgvXD5ccj9cbiArXDwvZywiPjwiKSx0aGlzLmNvbnZlcnQoKTt2YXIgZT10aGlzLnF1aWxsLmdldEZvcm1hdCh0aGlzLnF1aWxsLnNlbGVjdGlvbi5zYXZlZFJhbmdlLmluZGV4KTtpZihlW0YuZGVmYXVsdC5ibG90TmFtZV0pe3ZhciBuPXRoaXMuY29udGFpbmVyLmlubmVyVGV4dDtyZXR1cm4gdGhpcy5jb250YWluZXIuaW5uZXJIVE1MPSIiLChuZXcgcS5kZWZhdWx0KS5pbnNlcnQobixvKHt9LEYuZGVmYXVsdC5ibG90TmFtZSxlW0YuZGVmYXVsdC5ibG90TmFtZV0pKX12YXIgcj10aGlzLnByZXBhcmVNYXRjaGluZygpLGk9ayhyLDIpLGw9aVswXSxhPWlbMV0scz1oKHRoaXMuY29udGFpbmVyLGwsYSk7cmV0dXJuIGMocywiXG4iKSYmbnVsbD09cy5vcHNbcy5vcHMubGVuZ3RoLTFdLmF0dHJpYnV0ZXMmJihzPXMuY29tcG9zZSgobmV3IHEuZGVmYXVsdCkucmV0YWluKHMubGVuZ3RoKCktMSkuZGVsZXRlKDEpKSksVi5sb2coImNvbnZlcnQiLHRoaXMuY29udGFpbmVyLmlubmVySFRNTCxzKSx0aGlzLmNvbnRhaW5lci5pbm5lckhUTUw9IiIsc319LHtrZXk6ImRhbmdlcm91c2x5UGFzdGVIVE1MIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpDLmRlZmF1bHQuc291cmNlcy5BUEk7aWYoInN0cmluZyI9PXR5cGVvZiB0KXRoaXMucXVpbGwuc2V0Q29udGVudHModGhpcy5jb252ZXJ0KHQpLGUpLHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKDAsQy5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKTtlbHNle3ZhciByPXRoaXMuY29udmVydChlKTt0aGlzLnF1aWxsLnVwZGF0ZUNvbnRlbnRzKChuZXcgcS5kZWZhdWx0KS5yZXRhaW4odCkuY29uY2F0KHIpLG4pLHRoaXMucXVpbGwuc2V0U2VsZWN0aW9uKHQrci5sZW5ndGgoKSxDLmRlZmF1bHQuc291cmNlcy5TSUxFTlQpfX19LHtrZXk6Im9uUGFzdGUiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7aWYoIXQuZGVmYXVsdFByZXZlbnRlZCYmdGhpcy5xdWlsbC5pc0VuYWJsZWQoKSl7dmFyIG49dGhpcy5xdWlsbC5nZXRTZWxlY3Rpb24oKSxyPShuZXcgcS5kZWZhdWx0KS5yZXRhaW4obi5pbmRleCksbz10aGlzLnF1aWxsLnNjcm9sbGluZ0NvbnRhaW5lci5zY3JvbGxUb3A7dGhpcy5jb250YWluZXIuZm9jdXMoKSx0aGlzLnF1aWxsLnNlbGVjdGlvbi51cGRhdGUoQy5kZWZhdWx0LnNvdXJjZXMuU0lMRU5UKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cj1yLmNvbmNhdChlLmNvbnZlcnQoKSkuZGVsZXRlKG4ubGVuZ3RoKSxlLnF1aWxsLnVwZGF0ZUNvbnRlbnRzKHIsQy5kZWZhdWx0LnNvdXJjZXMuVVNFUiksZS5xdWlsbC5zZXRTZWxlY3Rpb24oci5sZW5ndGgoKS1uLmxlbmd0aCxDLmRlZmF1bHQuc291cmNlcy5TSUxFTlQpLGUucXVpbGwuc2Nyb2xsaW5nQ29udGFpbmVyLnNjcm9sbFRvcD1vLGUucXVpbGwuZm9jdXMoKX0sMSl9fX0se2tleToicHJlcGFyZU1hdGNoaW5nIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT1bXSxuPVtdO3JldHVybiB0aGlzLm1hdGNoZXJzLmZvckVhY2goZnVuY3Rpb24ocil7dmFyIG89ayhyLDIpLGk9b1swXSxsPW9bMV07c3dpdGNoKGkpe2Nhc2UgTm9kZS5URVhUX05PREU6bi5wdXNoKGwpO2JyZWFrO2Nhc2UgTm9kZS5FTEVNRU5UX05PREU6ZS5wdXNoKGwpO2JyZWFrO2RlZmF1bHQ6W10uZm9yRWFjaC5jYWxsKHQuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoaSksZnVuY3Rpb24odCl7dFtXXT10W1ddfHxbXSx0W1ddLnB1c2gobCl9KX19KSxbZSxuXX19XSksZX0oSS5kZWZhdWx0KTskLkRFRkFVTFRTPXttYXRjaGVyczpbXSxtYXRjaFZpc3VhbDohMH0sZS5kZWZhdWx0PSQsZS5tYXRjaEF0dHJpYnV0b3I9ZCxlLm1hdGNoQmxvdD15LGUubWF0Y2hOZXdsaW5lPW0sZS5tYXRjaFNwYWNpbmc9XyxlLm1hdGNoVGV4dD13fSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWZ1bmN0aW9uIG8odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1mdW5jdGlvbiBpKHQsZSl7aWYoIXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTtyZXR1cm4hZXx8Im9iamVjdCIhPXR5cGVvZiBlJiYiZnVuY3Rpb24iIT10eXBlb2YgZT90OmV9ZnVuY3Rpb24gbCh0LGUpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIrdHlwZW9mIGUpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLGUmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHQsZSk6dC5fX3Byb3RvX189ZSl9ZnVuY3Rpb24gYSh0KXt2YXIgZT10Lm9wc1t0Lm9wcy5sZW5ndGgtMV07cmV0dXJuIG51bGwhPWUmJihudWxsIT1lLmluc2VydD8ic3RyaW5nIj09dHlwZW9mIGUuaW5zZXJ0JiZlLmluc2VydC5lbmRzV2l0aCgiXG4iKTpudWxsIT1lLmF0dHJpYnV0ZXMmJk9iamVjdC5rZXlzKGUuYXR0cmlidXRlcykuc29tZShmdW5jdGlvbih0KXtyZXR1cm4gbnVsbCE9Zi5kZWZhdWx0LnF1ZXJ5KHQsZi5kZWZhdWx0LlNjb3BlLkJMT0NLKX0pKX1mdW5jdGlvbiBzKHQpe3ZhciBlPXQucmVkdWNlKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQrPWUuZGVsZXRlfHwwfSwwKSxuPXQubGVuZ3RoKCktZTtyZXR1cm4gYSh0KSYmKG4tPTEpLG59T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLGUuZ2V0TGFzdENoYW5nZUluZGV4PWUuZGVmYXVsdD12b2lkIDA7dmFyIHU9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsInZhbHVlImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxyLmtleSxyKX19cmV0dXJuIGZ1bmN0aW9uKGUsbixyKXtyZXR1cm4gbiYmdChlLnByb3RvdHlwZSxuKSxyJiZ0KGUsciksZX19KCksYz1uKDApLGY9cihjKSxoPW4oNikscD1yKGgpLGQ9big3KSx5PXIoZCksdj1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKHQsbil7byh0aGlzLGUpO3ZhciByPWkodGhpcywoZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlKSkuY2FsbCh0aGlzLHQsbikpO3JldHVybiByLmxhc3RSZWNvcmRlZD0wLHIuaWdub3JlQ2hhbmdlPSExLHIuY2xlYXIoKSxyLnF1aWxsLm9uKHAuZGVmYXVsdC5ldmVudHMuRURJVE9SX0NIQU5HRSxmdW5jdGlvbih0LGUsbixvKXt0IT09cC5kZWZhdWx0LmV2ZW50cy5URVhUX0NIQU5HRXx8ci5pZ25vcmVDaGFuZ2V8fChyLm9wdGlvbnMudXNlck9ubHkmJm8hPT1wLmRlZmF1bHQuc291cmNlcy5VU0VSP3IudHJhbnNmb3JtKGUpOnIucmVjb3JkKGUsbikpfSksci5xdWlsbC5rZXlib2FyZC5hZGRCaW5kaW5nKHtrZXk6IloiLHNob3J0S2V5OiEwfSxyLnVuZG8uYmluZChyKSksci5xdWlsbC5rZXlib2FyZC5hZGRCaW5kaW5nKHtrZXk6IloiLHNob3J0S2V5OiEwLHNoaWZ0S2V5OiEwfSxyLnJlZG8uYmluZChyKSksL1dpbi9pLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKSYmci5xdWlsbC5rZXlib2FyZC5hZGRCaW5kaW5nKHtrZXk6IlkiLHNob3J0S2V5OiEwfSxyLnJlZG8uYmluZChyKSkscn1yZXR1cm4gbChlLHQpLHUoZSxbe2tleToiY2hhbmdlIix2YWx1ZTpmdW5jdGlvbih0LGUpe2lmKDAhPT10aGlzLnN0YWNrW3RdLmxlbmd0aCl7dmFyIG49dGhpcy5zdGFja1t0XS5wb3AoKTt0aGlzLnN0YWNrW2VdLnB1c2gobiksdGhpcy5sYXN0UmVjb3JkZWQ9MCx0aGlzLmlnbm9yZUNoYW5nZT0hMCx0aGlzLnF1aWxsLnVwZGF0ZUNvbnRlbnRzKG5bdF0scC5kZWZhdWx0LnNvdXJjZXMuVVNFUiksdGhpcy5pZ25vcmVDaGFuZ2U9ITE7dmFyIHI9cyhuW3RdKTt0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihyKX19fSx7a2V5OiJjbGVhciIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnN0YWNrPXt1bmRvOltdLHJlZG86W119fX0se2tleToiY3V0b2ZmIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMubGFzdFJlY29yZGVkPTB9fSx7a2V5OiJyZWNvcmQiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7aWYoMCE9PXQub3BzLmxlbmd0aCl7dGhpcy5zdGFjay5yZWRvPVtdO3ZhciBuPXRoaXMucXVpbGwuZ2V0Q29udGVudHMoKS5kaWZmKGUpLHI9RGF0ZS5ub3coKTtpZih0aGlzLmxhc3RSZWNvcmRlZCt0aGlzLm9wdGlvbnMuZGVsYXk+ciYmdGhpcy5zdGFjay51bmRvLmxlbmd0aD4wKXt2YXIgbz10aGlzLnN0YWNrLnVuZG8ucG9wKCk7bj1uLmNvbXBvc2Uoby51bmRvKSx0PW8ucmVkby5jb21wb3NlKHQpfWVsc2UgdGhpcy5sYXN0UmVjb3JkZWQ9cjt0aGlzLnN0YWNrLnVuZG8ucHVzaCh7cmVkbzp0LHVuZG86bn0pLHRoaXMuc3RhY2sudW5kby5sZW5ndGg+dGhpcy5vcHRpb25zLm1heFN0YWNrJiZ0aGlzLnN0YWNrLnVuZG8uc2hpZnQoKX19fSx7a2V5OiJyZWRvIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuY2hhbmdlKCJyZWRvIiwidW5kbyIpfX0se2tleToidHJhbnNmb3JtIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLnN0YWNrLnVuZG8uZm9yRWFjaChmdW5jdGlvbihlKXtlLnVuZG89dC50cmFuc2Zvcm0oZS51bmRvLCEwKSxlLnJlZG89dC50cmFuc2Zvcm0oZS5yZWRvLCEwKX0pLHRoaXMuc3RhY2sucmVkby5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UudW5kbz10LnRyYW5zZm9ybShlLnVuZG8sITApLGUucmVkbz10LnRyYW5zZm9ybShlLnJlZG8sITApfSl9fSx7a2V5OiJ1bmRvIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuY2hhbmdlKCJ1bmRvIiwicmVkbyIpfX1dKSxlfSh5LmRlZmF1bHQpO3YuREVGQVVMVFM9e2RlbGF5OjFlMyxtYXhTdGFjazoxMDAsdXNlck9ubHk6ITF9LGUuZGVmYXVsdD12LGUuZ2V0TGFzdENoYW5nZUluZGV4PXN9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfWZ1bmN0aW9uIG8odCxlKXtpZighdCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpO3JldHVybiFlfHwib2JqZWN0IiE9dHlwZW9mIGUmJiJmdW5jdGlvbiIhPXR5cGVvZiBlP3Q6ZX1mdW5jdGlvbiBpKHQsZSl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgIit0eXBlb2YgZSk7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksZSYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YodCxlKTp0Ll9fcHJvdG9fXz1lKX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZS5JbmRlbnRDbGFzcz12b2lkIDA7dmFyIGw9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsInZhbHVlImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxyLmtleSxyKX19cmV0dXJuIGZ1bmN0aW9uKGUsbixyKXtyZXR1cm4gbiYmdChlLnByb3RvdHlwZSxuKSxyJiZ0KGUsciksZX19KCksYT1mdW5jdGlvbiB0KGUsbixyKXtudWxsPT09ZSYmKGU9RnVuY3Rpb24ucHJvdG90eXBlKTt2YXIgbz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsbik7aWYodm9pZCAwPT09byl7dmFyIGk9T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpO3JldHVybiBudWxsPT09aT92b2lkIDA6dChpLG4scil9aWYoInZhbHVlImluIG8pcmV0dXJuIG8udmFsdWU7dmFyIGw9by5nZXQ7aWYodm9pZCAwIT09bClyZXR1cm4gbC5jYWxsKHIpfSxzPW4oMCksdT1mdW5jdGlvbih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19KHMpLGM9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3JldHVybiByKHRoaXMsZSksbyh0aGlzLChlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpKS5hcHBseSh0aGlzLGFyZ3VtZW50cykpfXJldHVybiBpKGUsdCksbChlLFt7a2V5OiJhZGQiLHZhbHVlOmZ1bmN0aW9uKHQsbil7aWYoIisxIj09PW58fCItMSI9PT1uKXt2YXIgcj10aGlzLnZhbHVlKHQpfHwwO249IisxIj09PW4/cisxOnItMX1yZXR1cm4gMD09PW4/KHRoaXMucmVtb3ZlKHQpLCEwKTphKGUucHJvdG90eXBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUucHJvdG90eXBlKSwiYWRkIix0aGlzKS5jYWxsKHRoaXMsdCxuKX19LHtrZXk6ImNhbkFkZCIsdmFsdWU6ZnVuY3Rpb24odCxuKXtyZXR1cm4gYShlLnByb3RvdHlwZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlLnByb3RvdHlwZSksImNhbkFkZCIsdGhpcykuY2FsbCh0aGlzLHQsbil8fGEoZS5wcm90b3R5cGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZS5wcm90b3R5cGUpLCJjYW5BZGQiLHRoaXMpLmNhbGwodGhpcyx0LHBhcnNlSW50KG4pKX19LHtrZXk6InZhbHVlIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gcGFyc2VJbnQoYShlLnByb3RvdHlwZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlLnByb3RvdHlwZSksInZhbHVlIix0aGlzKS5jYWxsKHRoaXMsdCkpfHx2b2lkIDB9fV0pLGV9KHUuZGVmYXVsdC5BdHRyaWJ1dG9yLkNsYXNzKSxmPW5ldyBjKCJpbmRlbnQiLCJxbC1pbmRlbnQiLHtzY29wZTp1LmRlZmF1bHQuU2NvcGUuQkxPQ0ssd2hpdGVsaXN0OlsxLDIsMyw0LDUsNiw3LDhdfSk7ZS5JbmRlbnRDbGFzcz1mfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1mdW5jdGlvbiBvKHQsZSl7aWYoIXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTtyZXR1cm4hZXx8Im9iamVjdCIhPXR5cGVvZiBlJiYiZnVuY3Rpb24iIT10eXBlb2YgZT90OmV9ZnVuY3Rpb24gaSh0LGUpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIrdHlwZW9mIGUpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLGUmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHQsZSk6dC5fX3Byb3RvX189ZSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBsPW4oMyksYT1mdW5jdGlvbih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19KGwpLHM9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3JldHVybiByKHRoaXMsZSksbyh0aGlzLChlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpKS5hcHBseSh0aGlzLGFyZ3VtZW50cykpfXJldHVybiBpKGUsdCksZX0oYS5kZWZhdWx0KTtzLmJsb3ROYW1lPSJibG9ja3F1b3RlIixzLnRhZ05hbWU9ImJsb2NrcXVvdGUiLGUuZGVmYXVsdD1zfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1mdW5jdGlvbiBvKHQsZSl7aWYoIXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTtyZXR1cm4hZXx8Im9iamVjdCIhPXR5cGVvZiBlJiYiZnVuY3Rpb24iIT10eXBlb2YgZT90OmV9ZnVuY3Rpb24gaSh0LGUpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIrdHlwZW9mIGUpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLGUmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHQsZSk6dC5fX3Byb3RvX189ZSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBsPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsci5rZXkscil9fXJldHVybiBmdW5jdGlvbihlLG4scil7cmV0dXJuIG4mJnQoZS5wcm90b3R5cGUsbiksciYmdChlLHIpLGV9fSgpLGE9bigzKSxzPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX0oYSksdT1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7cmV0dXJuIHIodGhpcyxlKSxvKHRoaXMsKGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSkpLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9cmV0dXJuIGkoZSx0KSxsKGUsbnVsbCxbe2tleToiZm9ybWF0cyIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGFnTmFtZS5pbmRleE9mKHQudGFnTmFtZSkrMX19XSksZX0ocy5kZWZhdWx0KTt1LmJsb3ROYW1lPSJoZWFkZXIiLHUudGFnTmFtZT1bIkgxIiwiSDIiLCJIMyIsIkg0IiwiSDUiLCJINiJdLGUuZGVmYXVsdD11fSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWZ1bmN0aW9uIG8odCxlLG4pe3JldHVybiBlIGluIHQ/T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7dmFsdWU6bixlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pOnRbZV09bix0fWZ1bmN0aW9uIGkodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1mdW5jdGlvbiBsKHQsZSl7aWYoIXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTtyZXR1cm4hZXx8Im9iamVjdCIhPXR5cGVvZiBlJiYiZnVuY3Rpb24iIT10eXBlb2YgZT90OmV9ZnVuY3Rpb24gYSh0LGUpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIrdHlwZW9mIGUpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLGUmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHQsZSk6dC5fX3Byb3RvX189ZSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLGUuZGVmYXVsdD1lLkxpc3RJdGVtPXZvaWQgMDt2YXIgcz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LHIua2V5LHIpfX1yZXR1cm4gZnVuY3Rpb24oZSxuLHIpe3JldHVybiBuJiZ0KGUucHJvdG90eXBlLG4pLHImJnQoZSxyKSxlfX0oKSx1PWZ1bmN0aW9uIHQoZSxuLHIpe251bGw9PT1lJiYoZT1GdW5jdGlvbi5wcm90b3R5cGUpO3ZhciBvPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxuKTtpZih2b2lkIDA9PT1vKXt2YXIgaT1PYmplY3QuZ2V0UHJvdG90eXBlT2YoZSk7cmV0dXJuIG51bGw9PT1pP3ZvaWQgMDp0KGksbixyKX1pZigidmFsdWUiaW4gbylyZXR1cm4gby52YWx1ZTt2YXIgbD1vLmdldDtpZih2b2lkIDAhPT1sKXJldHVybiBsLmNhbGwocil9LGM9bigwKSxmPXIoYyksaD1uKDMpLHA9cihoKSxkPW4oMjMpLHk9cihkKSx2PWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gaSh0aGlzLGUpLGwodGhpcywoZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlKSkuYXBwbHkodGhpcyxhcmd1bWVudHMpKX1yZXR1cm4gYShlLHQpLHMoZSxbe2tleToiZm9ybWF0Iix2YWx1ZTpmdW5jdGlvbih0LG4pe3QhPT1iLmJsb3ROYW1lfHxuP3UoZS5wcm90b3R5cGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZS5wcm90b3R5cGUpLCJmb3JtYXQiLHRoaXMpLmNhbGwodGhpcyx0LG4pOnRoaXMucmVwbGFjZVdpdGgoZi5kZWZhdWx0LmNyZWF0ZSh0aGlzLnN0YXRpY3Muc2NvcGUpKX19LHtrZXk6InJlbW92ZSIsdmFsdWU6ZnVuY3Rpb24oKXtudWxsPT10aGlzLnByZXYmJm51bGw9PXRoaXMubmV4dD90aGlzLnBhcmVudC5yZW1vdmUoKTp1KGUucHJvdG90eXBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUucHJvdG90eXBlKSwicmVtb3ZlIix0aGlzKS5jYWxsKHRoaXMpfX0se2tleToicmVwbGFjZVdpdGgiLHZhbHVlOmZ1bmN0aW9uKHQsbil7cmV0dXJuIHRoaXMucGFyZW50Lmlzb2xhdGUodGhpcy5vZmZzZXQodGhpcy5wYXJlbnQpLHRoaXMubGVuZ3RoKCkpLHQ9PT10aGlzLnBhcmVudC5zdGF0aWNzLmJsb3ROYW1lPyh0aGlzLnBhcmVudC5yZXBsYWNlV2l0aCh0LG4pLHRoaXMpOih0aGlzLnBhcmVudC51bndyYXAoKSx1KGUucHJvdG90eXBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUucHJvdG90eXBlKSwicmVwbGFjZVdpdGgiLHRoaXMpLmNhbGwodGhpcyx0LG4pKX19XSxbe2tleToiZm9ybWF0cyIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHQudGFnTmFtZT09PXRoaXMudGFnTmFtZT92b2lkIDA6dShlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpLCJmb3JtYXRzIix0aGlzKS5jYWxsKHRoaXMsdCl9fV0pLGV9KHAuZGVmYXVsdCk7di5ibG90TmFtZT0ibGlzdC1pdGVtIix2LnRhZ05hbWU9IkxJIjt2YXIgYj1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKHQpe2kodGhpcyxlKTt2YXIgbj1sKHRoaXMsKGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSkpLmNhbGwodGhpcyx0KSkscj1mdW5jdGlvbihlKXtpZihlLnRhcmdldC5wYXJlbnROb2RlPT09dCl7dmFyIHI9bi5zdGF0aWNzLmZvcm1hdHModCksbz1mLmRlZmF1bHQuZmluZChlLnRhcmdldCk7ImNoZWNrZWQiPT09cj9vLmZvcm1hdCgibGlzdCIsInVuY2hlY2tlZCIpOiJ1bmNoZWNrZWQiPT09ciYmby5mb3JtYXQoImxpc3QiLCJjaGVja2VkIil9fTtyZXR1cm4gdC5hZGRFdmVudExpc3RlbmVyKCJ0b3VjaHN0YXJ0IixyKSx0LmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlZG93biIsciksbn1yZXR1cm4gYShlLHQpLHMoZSxudWxsLFt7a2V5OiJjcmVhdGUiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBuPSJvcmRlcmVkIj09PXQ/Ik9MIjoiVUwiLHI9dShlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpLCJjcmVhdGUiLHRoaXMpLmNhbGwodGhpcyxuKTtyZXR1cm4iY2hlY2tlZCIhPT10JiYidW5jaGVja2VkIiE9PXR8fHIuc2V0QXR0cmlidXRlKCJkYXRhLWNoZWNrZWQiLCJjaGVja2VkIj09PXQpLHJ9fSx7a2V5OiJmb3JtYXRzIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4iT0wiPT09dC50YWdOYW1lPyJvcmRlcmVkIjoiVUwiPT09dC50YWdOYW1lP3QuaGFzQXR0cmlidXRlKCJkYXRhLWNoZWNrZWQiKT8idHJ1ZSI9PT10LmdldEF0dHJpYnV0ZSgiZGF0YS1jaGVja2VkIik/ImNoZWNrZWQiOiJ1bmNoZWNrZWQiOiJidWxsZXQiOnZvaWQgMH19XSkscyhlLFt7a2V5OiJmb3JtYXQiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dGhpcy5jaGlsZHJlbi5sZW5ndGg+MCYmdGhpcy5jaGlsZHJlbi50YWlsLmZvcm1hdCh0LGUpfX0se2tleToiZm9ybWF0cyIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gbyh7fSx0aGlzLnN0YXRpY3MuYmxvdE5hbWUsdGhpcy5zdGF0aWNzLmZvcm1hdHModGhpcy5kb21Ob2RlKSl9fSx7a2V5OiJpbnNlcnRCZWZvcmUiLHZhbHVlOmZ1bmN0aW9uKHQsbil7aWYodCBpbnN0YW5jZW9mIHYpdShlLnByb3RvdHlwZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlLnByb3RvdHlwZSksImluc2VydEJlZm9yZSIsdGhpcykuY2FsbCh0aGlzLHQsbik7ZWxzZXt2YXIgcj1udWxsPT1uP3RoaXMubGVuZ3RoKCk6bi5vZmZzZXQodGhpcyksbz10aGlzLnNwbGl0KHIpO28ucGFyZW50Lmluc2VydEJlZm9yZSh0LG8pfX19LHtrZXk6Im9wdGltaXplIix2YWx1ZTpmdW5jdGlvbih0KXt1KGUucHJvdG90eXBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUucHJvdG90eXBlKSwib3B0aW1pemUiLHRoaXMpLmNhbGwodGhpcyx0KTt2YXIgbj10aGlzLm5leHQ7bnVsbCE9biYmbi5wcmV2PT09dGhpcyYmbi5zdGF0aWNzLmJsb3ROYW1lPT09dGhpcy5zdGF0aWNzLmJsb3ROYW1lJiZuLmRvbU5vZGUudGFnTmFtZT09PXRoaXMuZG9tTm9kZS50YWdOYW1lJiZuLmRvbU5vZGUuZ2V0QXR0cmlidXRlKCJkYXRhLWNoZWNrZWQiKT09PXRoaXMuZG9tTm9kZS5nZXRBdHRyaWJ1dGUoImRhdGEtY2hlY2tlZCIpJiYobi5tb3ZlQ2hpbGRyZW4odGhpcyksbi5yZW1vdmUoKSl9fSx7a2V5OiJyZXBsYWNlIix2YWx1ZTpmdW5jdGlvbih0KXtpZih0LnN0YXRpY3MuYmxvdE5hbWUhPT10aGlzLnN0YXRpY3MuYmxvdE5hbWUpe3ZhciBuPWYuZGVmYXVsdC5jcmVhdGUodGhpcy5zdGF0aWNzLmRlZmF1bHRDaGlsZCk7dC5tb3ZlQ2hpbGRyZW4obiksdGhpcy5hcHBlbmRDaGlsZChuKX11KGUucHJvdG90eXBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUucHJvdG90eXBlKSwicmVwbGFjZSIsdGhpcykuY2FsbCh0aGlzLHQpfX1dKSxlfSh5LmRlZmF1bHQpO2IuYmxvdE5hbWU9Imxpc3QiLGIuc2NvcGU9Zi5kZWZhdWx0LlNjb3BlLkJMT0NLX0JMT1QsYi50YWdOYW1lPVsiT0wiLCJVTCJdLGIuZGVmYXVsdENoaWxkPSJsaXN0LWl0ZW0iLGIuYWxsb3dlZENoaWxkcmVuPVt2XSxlLkxpc3RJdGVtPXYsZS5kZWZhdWx0PWJ9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfWZ1bmN0aW9uIG8odCxlKXtpZighdCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpO3JldHVybiFlfHwib2JqZWN0IiE9dHlwZW9mIGUmJiJmdW5jdGlvbiIhPXR5cGVvZiBlP3Q6ZX1mdW5jdGlvbiBpKHQsZSl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgIit0eXBlb2YgZSk7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksZSYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YodCxlKTp0Ll9fcHJvdG9fXz1lKX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIGw9bigzOSksYT1mdW5jdGlvbih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19KGwpLHM9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3JldHVybiByKHRoaXMsZSksbyh0aGlzLChlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpKS5hcHBseSh0aGlzLGFyZ3VtZW50cykpfXJldHVybiBpKGUsdCksZX0oYS5kZWZhdWx0KTtzLmJsb3ROYW1lPSJpdGFsaWMiLHMudGFnTmFtZT1bIkVNIiwiSSJdLGUuZGVmYXVsdD1zfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1mdW5jdGlvbiBvKHQsZSl7aWYoIXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTtyZXR1cm4hZXx8Im9iamVjdCIhPXR5cGVvZiBlJiYiZnVuY3Rpb24iIT10eXBlb2YgZT90OmV9ZnVuY3Rpb24gaSh0LGUpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIrdHlwZW9mIGUpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLGUmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHQsZSk6dC5fX3Byb3RvX189ZSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBsPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsci5rZXkscil9fXJldHVybiBmdW5jdGlvbihlLG4scil7cmV0dXJuIG4mJnQoZS5wcm90b3R5cGUsbiksciYmdChlLHIpLGV9fSgpLGE9ZnVuY3Rpb24gdChlLG4scil7bnVsbD09PWUmJihlPUZ1bmN0aW9uLnByb3RvdHlwZSk7dmFyIG89T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLG4pO2lmKHZvaWQgMD09PW8pe3ZhciBpPU9iamVjdC5nZXRQcm90b3R5cGVPZihlKTtyZXR1cm4gbnVsbD09PWk/dm9pZCAwOnQoaSxuLHIpfWlmKCJ2YWx1ZSJpbiBvKXJldHVybiBvLnZhbHVlO3ZhciBsPW8uZ2V0O2lmKHZvaWQgMCE9PWwpcmV0dXJuIGwuY2FsbChyKX0scz1uKDUpLHU9ZnVuY3Rpb24odCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fShzKSxjPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gcih0aGlzLGUpLG8odGhpcywoZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlKSkuYXBwbHkodGhpcyxhcmd1bWVudHMpKX1yZXR1cm4gaShlLHQpLGwoZSxudWxsLFt7a2V5OiJjcmVhdGUiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiJzdXBlciI9PT10P2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInN1cCIpOiJzdWIiPT09dD9kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzdWIiKTphKGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSksImNyZWF0ZSIsdGhpcykuY2FsbCh0aGlzLHQpfX0se2tleToiZm9ybWF0cyIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIlNVQiI9PT10LnRhZ05hbWU/InN1YiI6IlNVUCI9PT10LnRhZ05hbWU/InN1cGVyIjp2b2lkIDB9fV0pLGV9KHUuZGVmYXVsdCk7Yy5ibG90TmFtZT0ic2NyaXB0IixjLnRhZ05hbWU9WyJTVUIiLCJTVVAiXSxlLmRlZmF1bHQ9Y30sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9ZnVuY3Rpb24gbyh0LGUpe2lmKCF0KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7cmV0dXJuIWV8fCJvYmplY3QiIT10eXBlb2YgZSYmImZ1bmN0aW9uIiE9dHlwZW9mIGU/dDplfWZ1bmN0aW9uIGkodCxlKXtpZigiZnVuY3Rpb24iIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAiK3R5cGVvZiBlKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxlJiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZih0LGUpOnQuX19wcm90b19fPWUpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbD1uKDUpLGE9ZnVuY3Rpb24odCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fShsKSxzPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gcih0aGlzLGUpLG8odGhpcywoZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlKSkuYXBwbHkodGhpcyxhcmd1bWVudHMpKX1yZXR1cm4gaShlLHQpLGV9KGEuZGVmYXVsdCk7cy5ibG90TmFtZT0ic3RyaWtlIixzLnRhZ05hbWU9IlMiLGUuZGVmYXVsdD1zfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1mdW5jdGlvbiBvKHQsZSl7aWYoIXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTtyZXR1cm4hZXx8Im9iamVjdCIhPXR5cGVvZiBlJiYiZnVuY3Rpb24iIT10eXBlb2YgZT90OmV9ZnVuY3Rpb24gaSh0LGUpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIrdHlwZW9mIGUpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLGUmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHQsZSk6dC5fX3Byb3RvX189ZSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBsPW4oNSksYT1mdW5jdGlvbih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19KGwpLHM9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3JldHVybiByKHRoaXMsZSksbyh0aGlzLChlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpKS5hcHBseSh0aGlzLGFyZ3VtZW50cykpfXJldHVybiBpKGUsdCksZX0oYS5kZWZhdWx0KTtzLmJsb3ROYW1lPSJ1bmRlcmxpbmUiLHMudGFnTmFtZT0iVSIsZS5kZWZhdWx0PXN9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfWZ1bmN0aW9uIG8odCxlKXtpZighdCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpO3JldHVybiFlfHwib2JqZWN0IiE9dHlwZW9mIGUmJiJmdW5jdGlvbiIhPXR5cGVvZiBlP3Q6ZX1mdW5jdGlvbiBpKHQsZSl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgIit0eXBlb2YgZSk7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksZSYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YodCxlKTp0Ll9fcHJvdG9fXz1lKX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIGw9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsInZhbHVlImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxyLmtleSxyKX19cmV0dXJuIGZ1bmN0aW9uKGUsbixyKXtyZXR1cm4gbiYmdChlLnByb3RvdHlwZSxuKSxyJiZ0KGUsciksZX19KCksYT1mdW5jdGlvbiB0KGUsbixyKXtudWxsPT09ZSYmKGU9RnVuY3Rpb24ucHJvdG90eXBlKTt2YXIgbz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsbik7aWYodm9pZCAwPT09byl7dmFyIGk9T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpO3JldHVybiBudWxsPT09aT92b2lkIDA6dChpLG4scil9aWYoInZhbHVlImluIG8pcmV0dXJuIG8udmFsdWU7dmFyIGw9by5nZXQ7aWYodm9pZCAwIT09bClyZXR1cm4gbC5jYWxsKHIpfSxzPW4oMCksdT1mdW5jdGlvbih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19KHMpLGM9bigxNSksZj1bImFsdCIsImhlaWdodCIsIndpZHRoIl0saD1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7cmV0dXJuIHIodGhpcyxlKSxvKHRoaXMsKGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSkpLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9cmV0dXJuIGkoZSx0KSxsKGUsW3trZXk6ImZvcm1hdCIsdmFsdWU6ZnVuY3Rpb24odCxuKXtmLmluZGV4T2YodCk+LTE/bj90aGlzLmRvbU5vZGUuc2V0QXR0cmlidXRlKHQsbik6dGhpcy5kb21Ob2RlLnJlbW92ZUF0dHJpYnV0ZSh0KTphKGUucHJvdG90eXBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUucHJvdG90eXBlKSwiZm9ybWF0Iix0aGlzKS5jYWxsKHRoaXMsdCxuKX19XSxbe2tleToiY3JlYXRlIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgbj1hKGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSksImNyZWF0ZSIsdGhpcykuY2FsbCh0aGlzLHQpO3JldHVybiJzdHJpbmciPT10eXBlb2YgdCYmbi5zZXRBdHRyaWJ1dGUoInNyYyIsdGhpcy5zYW5pdGl6ZSh0KSksbn19LHtrZXk6ImZvcm1hdHMiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiBmLnJlZHVjZShmdW5jdGlvbihlLG4pe3JldHVybiB0Lmhhc0F0dHJpYnV0ZShuKSYmKGVbbl09dC5nZXRBdHRyaWJ1dGUobikpLGV9LHt9KX19LHtrZXk6Im1hdGNoIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4vXC4oanBlP2d8Z2lmfHBuZykkLy50ZXN0KHQpfHwvXmRhdGE6aW1hZ2VcLy4rO2Jhc2U2NC8udGVzdCh0KX19LHtrZXk6InNhbml0aXplIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4oMCxjLnNhbml0aXplKSh0LFsiaHR0cCIsImh0dHBzIiwiZGF0YSJdKT90OiIvLzowIn19LHtrZXk6InZhbHVlIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdC5nZXRBdHRyaWJ1dGUoInNyYyIpfX1dKSxlfSh1LmRlZmF1bHQuRW1iZWQpO2guYmxvdE5hbWU9ImltYWdlIixoLnRhZ05hbWU9IklNRyIsZS5kZWZhdWx0PWh9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfWZ1bmN0aW9uIG8odCxlKXtpZighdCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpO3JldHVybiFlfHwib2JqZWN0IiE9dHlwZW9mIGUmJiJmdW5jdGlvbiIhPXR5cGVvZiBlP3Q6ZX1mdW5jdGlvbiBpKHQsZSl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgIit0eXBlb2YgZSk7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksZSYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YodCxlKTp0Ll9fcHJvdG9fXz1lKX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIGw9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsInZhbHVlImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxyLmtleSxyKX19cmV0dXJuIGZ1bmN0aW9uKGUsbixyKXtyZXR1cm4gbiYmdChlLnByb3RvdHlwZSxuKSxyJiZ0KGUsciksZX19KCksYT1mdW5jdGlvbiB0KGUsbixyKXtudWxsPT09ZSYmKGU9RnVuY3Rpb24ucHJvdG90eXBlKTt2YXIgbz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsbik7aWYodm9pZCAwPT09byl7dmFyIGk9T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpO3JldHVybiBudWxsPT09aT92b2lkIDA6dChpLG4scil9aWYoInZhbHVlImluIG8pcmV0dXJuIG8udmFsdWU7dmFyIGw9by5nZXQ7aWYodm9pZCAwIT09bClyZXR1cm4gbC5jYWxsKHIpfSxzPW4oMyksdT1uKDE1KSxjPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX0odSksZj1bImhlaWdodCIsIndpZHRoIl0saD1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7cmV0dXJuIHIodGhpcyxlKSxvKHRoaXMsKGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSkpLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9cmV0dXJuIGkoZSx0KSxsKGUsW3trZXk6ImZvcm1hdCIsdmFsdWU6ZnVuY3Rpb24odCxuKXtmLmluZGV4T2YodCk+LTE/bj90aGlzLmRvbU5vZGUuc2V0QXR0cmlidXRlKHQsbik6dGhpcy5kb21Ob2RlLnJlbW92ZUF0dHJpYnV0ZSh0KTphKGUucHJvdG90eXBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUucHJvdG90eXBlKSwiZm9ybWF0Iix0aGlzKS5jYWxsKHRoaXMsdCxuKX19XSxbe2tleToiY3JlYXRlIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgbj1hKGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSksImNyZWF0ZSIsdGhpcykuY2FsbCh0aGlzLHQpO3JldHVybiBuLnNldEF0dHJpYnV0ZSgiZnJhbWVib3JkZXIiLCIwIiksbi5zZXRBdHRyaWJ1dGUoImFsbG93ZnVsbHNjcmVlbiIsITApLG4uc2V0QXR0cmlidXRlKCJzcmMiLHRoaXMuc2FuaXRpemUodCkpLG59fSx7a2V5OiJmb3JtYXRzIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gZi5yZWR1Y2UoZnVuY3Rpb24oZSxuKXtyZXR1cm4gdC5oYXNBdHRyaWJ1dGUobikmJihlW25dPXQuZ2V0QXR0cmlidXRlKG4pKSxlfSx7fSl9fSx7a2V5OiJzYW5pdGl6ZSIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIGMuZGVmYXVsdC5zYW5pdGl6ZSh0KX19LHtrZXk6InZhbHVlIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdC5nZXRBdHRyaWJ1dGUoInNyYyIpfX1dKSxlfShzLkJsb2NrRW1iZWQpO2guYmxvdE5hbWU9InZpZGVvIixoLmNsYXNzTmFtZT0icWwtdmlkZW8iLGgudGFnTmFtZT0iSUZSQU1FIixlLmRlZmF1bHQ9aH0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1mdW5jdGlvbiBvKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9ZnVuY3Rpb24gaSh0LGUpe2lmKCF0KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7cmV0dXJuIWV8fCJvYmplY3QiIT10eXBlb2YgZSYmImZ1bmN0aW9uIiE9dHlwZW9mIGU/dDplfWZ1bmN0aW9uIGwodCxlKXtpZigiZnVuY3Rpb24iIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAiK3R5cGVvZiBlKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxlJiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZih0LGUpOnQuX19wcm90b19fPWUpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9ZS5Gb3JtdWxhQmxvdD12b2lkIDA7dmFyIGE9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsInZhbHVlImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxyLmtleSxyKX19cmV0dXJuIGZ1bmN0aW9uKGUsbixyKXtyZXR1cm4gbiYmdChlLnByb3RvdHlwZSxuKSxyJiZ0KGUsciksZX19KCkscz1mdW5jdGlvbiB0KGUsbixyKXtudWxsPT09ZSYmKGU9RnVuY3Rpb24ucHJvdG90eXBlKTt2YXIgbz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsbik7aWYodm9pZCAwPT09byl7dmFyIGk9T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpO3JldHVybiBudWxsPT09aT92b2lkIDA6dChpLG4scil9aWYoInZhbHVlImluIG8pcmV0dXJuIG8udmFsdWU7dmFyIGw9by5nZXQ7aWYodm9pZCAwIT09bClyZXR1cm4gbC5jYWxsKHIpfSx1PW4oMzMpLGM9cih1KSxmPW4oNiksaD1yKGYpLHA9big3KSxkPXIocCkseT1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7cmV0dXJuIG8odGhpcyxlKSxpKHRoaXMsKGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSkpLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9cmV0dXJuIGwoZSx0KSxhKGUsbnVsbCxbe2tleToiY3JlYXRlIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgbj1zKGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSksImNyZWF0ZSIsdGhpcykuY2FsbCh0aGlzLHQpO3JldHVybiJzdHJpbmciPT10eXBlb2YgdCYmKHdpbmRvdy5rYXRleC5yZW5kZXIodCxuLHt0aHJvd09uRXJyb3I6ITEsZXJyb3JDb2xvcjoiI2YwMCJ9KSxuLnNldEF0dHJpYnV0ZSgiZGF0YS12YWx1ZSIsdCkpLG59fSx7a2V5OiJ2YWx1ZSIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHQuZ2V0QXR0cmlidXRlKCJkYXRhLXZhbHVlIil9fV0pLGV9KGMuZGVmYXVsdCk7eS5ibG90TmFtZT0iZm9ybXVsYSIseS5jbGFzc05hbWU9InFsLWZvcm11bGEiLHkudGFnTmFtZT0iU1BBTiI7dmFyIHY9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe28odGhpcyxlKTt2YXIgdD1pKHRoaXMsKGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSkpLmNhbGwodGhpcykpO2lmKG51bGw9PXdpbmRvdy5rYXRleCl0aHJvdyBuZXcgRXJyb3IoIkZvcm11bGEgbW9kdWxlIHJlcXVpcmVzIEthVGVYLiIpO3JldHVybiB0fXJldHVybiBsKGUsdCksYShlLG51bGwsW3trZXk6InJlZ2lzdGVyIix2YWx1ZTpmdW5jdGlvbigpe2guZGVmYXVsdC5yZWdpc3Rlcih5LCEwKX19XSksZX0oZC5kZWZhdWx0KTtlLkZvcm11bGFCbG90PXksZS5kZWZhdWx0PXZ9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZnVuY3Rpb24gbyh0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfWZ1bmN0aW9uIGkodCxlKXtpZighdCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpO3JldHVybiFlfHwib2JqZWN0IiE9dHlwZW9mIGUmJiJmdW5jdGlvbiIhPXR5cGVvZiBlP3Q6ZX1mdW5jdGlvbiBsKHQsZSl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgIit0eXBlb2YgZSk7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksZSYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YodCxlKTp0Ll9fcHJvdG9fXz1lKX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PWUuQ29kZVRva2VuPWUuQ29kZUJsb2NrPXZvaWQgMDt2YXIgYT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LHIua2V5LHIpfX1yZXR1cm4gZnVuY3Rpb24oZSxuLHIpe3JldHVybiBuJiZ0KGUucHJvdG90eXBlLG4pLHImJnQoZSxyKSxlfX0oKSxzPWZ1bmN0aW9uIHQoZSxuLHIpe251bGw9PT1lJiYoZT1GdW5jdGlvbi5wcm90b3R5cGUpO3ZhciBvPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxuKTtpZih2b2lkIDA9PT1vKXt2YXIgaT1PYmplY3QuZ2V0UHJvdG90eXBlT2YoZSk7cmV0dXJuIG51bGw9PT1pP3ZvaWQgMDp0KGksbixyKX1pZigidmFsdWUiaW4gbylyZXR1cm4gby52YWx1ZTt2YXIgbD1vLmdldDtpZih2b2lkIDAhPT1sKXJldHVybiBsLmNhbGwocil9LHU9bigwKSxjPXIodSksZj1uKDYpLGg9cihmKSxwPW4oNyksZD1yKHApLHk9bigxMyksdj1yKHkpLGI9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3JldHVybiBvKHRoaXMsZSksaSh0aGlzLChlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpKS5hcHBseSh0aGlzLGFyZ3VtZW50cykpfXJldHVybiBsKGUsdCksYShlLFt7a2V5OiJyZXBsYWNlV2l0aCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5kb21Ob2RlLnRleHRDb250ZW50PXRoaXMuZG9tTm9kZS50ZXh0Q29udGVudCx0aGlzLmF0dGFjaCgpLHMoZS5wcm90b3R5cGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZS5wcm90b3R5cGUpLCJyZXBsYWNlV2l0aCIsdGhpcykuY2FsbCh0aGlzLHQpfX0se2tleToiaGlnaGxpZ2h0Iix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLmRvbU5vZGUudGV4dENvbnRlbnQ7dGhpcy5jYWNoZWRUZXh0IT09ZSYmKChlLnRyaW0oKS5sZW5ndGg+MHx8bnVsbD09dGhpcy5jYWNoZWRUZXh0KSYmKHRoaXMuZG9tTm9kZS5pbm5lckhUTUw9dChlKSx0aGlzLmRvbU5vZGUubm9ybWFsaXplKCksdGhpcy5hdHRhY2goKSksdGhpcy5jYWNoZWRUZXh0PWUpfX1dKSxlfSh2LmRlZmF1bHQpO2IuY2xhc3NOYW1lPSJxbC1zeW50YXgiO3ZhciBnPW5ldyBjLmRlZmF1bHQuQXR0cmlidXRvci5DbGFzcygidG9rZW4iLCJobGpzIix7c2NvcGU6Yy5kZWZhdWx0LlNjb3BlLklOTElORX0pLG09ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSh0LG4pe28odGhpcyxlKTt2YXIgcj1pKHRoaXMsKGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSkpLmNhbGwodGhpcyx0LG4pKTtpZigiZnVuY3Rpb24iIT10eXBlb2Ygci5vcHRpb25zLmhpZ2hsaWdodCl0aHJvdyBuZXcgRXJyb3IoIlN5bnRheCBtb2R1bGUgcmVxdWlyZXMgaGlnaGxpZ2h0LmpzLiBQbGVhc2UgaW5jbHVkZSB0aGUgbGlicmFyeSBvbiB0aGUgcGFnZSBiZWZvcmUgUXVpbGwuIik7dmFyIGw9bnVsbDtyZXR1cm4gci5xdWlsbC5vbihoLmRlZmF1bHQuZXZlbnRzLlNDUk9MTF9PUFRJTUlaRSxmdW5jdGlvbigpe2NsZWFyVGltZW91dChsKSxsPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtyLmhpZ2hsaWdodCgpLGw9bnVsbH0sci5vcHRpb25zLmludGVydmFsKX0pLHIuaGlnaGxpZ2h0KCkscn1yZXR1cm4gbChlLHQpLGEoZSxudWxsLFt7a2V5OiJyZWdpc3RlciIsdmFsdWU6ZnVuY3Rpb24oKXtoLmRlZmF1bHQucmVnaXN0ZXIoZywhMCksaC5kZWZhdWx0LnJlZ2lzdGVyKGIsITApfX1dKSxhKGUsW3trZXk6ImhpZ2hsaWdodCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2lmKCF0aGlzLnF1aWxsLnNlbGVjdGlvbi5jb21wb3Npbmcpe3RoaXMucXVpbGwudXBkYXRlKGguZGVmYXVsdC5zb3VyY2VzLlVTRVIpO3ZhciBlPXRoaXMucXVpbGwuZ2V0U2VsZWN0aW9uKCk7dGhpcy5xdWlsbC5zY3JvbGwuZGVzY2VuZGFudHMoYikuZm9yRWFjaChmdW5jdGlvbihlKXtlLmhpZ2hsaWdodCh0Lm9wdGlvbnMuaGlnaGxpZ2h0KX0pLHRoaXMucXVpbGwudXBkYXRlKGguZGVmYXVsdC5zb3VyY2VzLlNJTEVOVCksbnVsbCE9ZSYmdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24oZSxoLmRlZmF1bHQuc291cmNlcy5TSUxFTlQpfX19XSksZX0oZC5kZWZhdWx0KTttLkRFRkFVTFRTPXtoaWdobGlnaHQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09d2luZG93LmhsanM/bnVsbDpmdW5jdGlvbih0KXtyZXR1cm4gd2luZG93LmhsanMuaGlnaGxpZ2h0QXV0byh0KS52YWx1ZX19KCksaW50ZXJ2YWw6MWUzfSxlLkNvZGVCbG9jaz1iLGUuQ29kZVRva2VuPWcsZS5kZWZhdWx0PW19LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZnVuY3Rpb24gbyh0LGUsbil7cmV0dXJuIGUgaW4gdD9PYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHt2YWx1ZTpuLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6dFtlXT1uLHR9ZnVuY3Rpb24gaSh0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfWZ1bmN0aW9uIGwodCxlKXtpZighdCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpO3JldHVybiFlfHwib2JqZWN0IiE9dHlwZW9mIGUmJiJmdW5jdGlvbiIhPXR5cGVvZiBlP3Q6ZX1mdW5jdGlvbiBhKHQsZSl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgIit0eXBlb2YgZSk7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksZSYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YodCxlKTp0Ll9fcHJvdG9fXz1lKX1mdW5jdGlvbiBzKHQsZSxuKXt2YXIgcj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJidXR0b24iKTtyLnNldEF0dHJpYnV0ZSgidHlwZSIsImJ1dHRvbiIpLHIuY2xhc3NMaXN0LmFkZCgicWwtIitlKSxudWxsIT1uJiYoci52YWx1ZT1uKSx0LmFwcGVuZENoaWxkKHIpfWZ1bmN0aW9uIHUodCxlKXtBcnJheS5pc0FycmF5KGVbMF0pfHwoZT1bZV0pLGUuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzcGFuIik7bi5jbGFzc0xpc3QuYWRkKCJxbC1mb3JtYXRzIiksZS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2lmKCJzdHJpbmciPT10eXBlb2YgdClzKG4sdCk7ZWxzZXt2YXIgZT1PYmplY3Qua2V5cyh0KVswXSxyPXRbZV07QXJyYXkuaXNBcnJheShyKT9jKG4sZSxyKTpzKG4sZSxyKX19KSx0LmFwcGVuZENoaWxkKG4pfSl9ZnVuY3Rpb24gYyh0LGUsbil7dmFyIHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2VsZWN0Iik7ci5jbGFzc0xpc3QuYWRkKCJxbC0iK2UpLG4uZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJvcHRpb24iKTshMSE9PXQ/ZS5zZXRBdHRyaWJ1dGUoInZhbHVlIix0KTplLnNldEF0dHJpYnV0ZSgic2VsZWN0ZWQiLCJzZWxlY3RlZCIpLHIuYXBwZW5kQ2hpbGQoZSl9KSx0LmFwcGVuZENoaWxkKHIpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxlLmFkZENvbnRyb2xzPWUuZGVmYXVsdD12b2lkIDA7dmFyIGY9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7dmFyIG49W10scj0hMCxvPSExLGk9dm9pZCAwO3RyeXtmb3IodmFyIGwsYT10W1N5bWJvbC5pdGVyYXRvcl0oKTshKHI9KGw9YS5uZXh0KCkpLmRvbmUpJiYobi5wdXNoKGwudmFsdWUpLCFlfHxuLmxlbmd0aCE9PWUpO3I9ITApO31jYXRjaCh0KXtvPSEwLGk9dH1maW5hbGx5e3RyeXshciYmYS5yZXR1cm4mJmEucmV0dXJuKCl9ZmluYWxseXtpZihvKXRocm93IGl9fXJldHVybiBufXJldHVybiBmdW5jdGlvbihlLG4pe2lmKEFycmF5LmlzQXJyYXkoZSkpcmV0dXJuIGU7aWYoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChlKSlyZXR1cm4gdChlLG4pO3Rocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKX19KCksaD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LHIua2V5LHIpfX1yZXR1cm4gZnVuY3Rpb24oZSxuLHIpe3JldHVybiBuJiZ0KGUucHJvdG90eXBlLG4pLHImJnQoZSxyKSxlfX0oKSxwPW4oNCksZD1yKHApLHk9bigwKSx2PXIoeSksYj1uKDYpLGc9cihiKSxtPW4oMTApLF89cihtKSxPPW4oNyksdz1yKE8pLHg9KDAsXy5kZWZhdWx0KSgicXVpbGw6dG9vbGJhciIpLGs9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSh0LG4pe2kodGhpcyxlKTt2YXIgcj1sKHRoaXMsKGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSkpLmNhbGwodGhpcyx0LG4pKTtpZihBcnJheS5pc0FycmF5KHIub3B0aW9ucy5jb250YWluZXIpKXt2YXIgbz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTt1KG8sci5vcHRpb25zLmNvbnRhaW5lciksdC5jb250YWluZXIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobyx0LmNvbnRhaW5lciksci5jb250YWluZXI9b31lbHNlInN0cmluZyI9PXR5cGVvZiByLm9wdGlvbnMuY29udGFpbmVyP3IuY29udGFpbmVyPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioci5vcHRpb25zLmNvbnRhaW5lcik6ci5jb250YWluZXI9ci5vcHRpb25zLmNvbnRhaW5lcjtpZighKHIuY29udGFpbmVyIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKXt2YXIgYTtyZXR1cm4gYT14LmVycm9yKCJDb250YWluZXIgcmVxdWlyZWQgZm9yIHRvb2xiYXIiLHIub3B0aW9ucyksbChyLGEpfXJldHVybiByLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCJxbC10b29sYmFyIiksci5jb250cm9scz1bXSxyLmhhbmRsZXJzPXt9LE9iamVjdC5rZXlzKHIub3B0aW9ucy5oYW5kbGVycykuZm9yRWFjaChmdW5jdGlvbih0KXtyLmFkZEhhbmRsZXIodCxyLm9wdGlvbnMuaGFuZGxlcnNbdF0pfSksW10uZm9yRWFjaC5jYWxsKHIuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoImJ1dHRvbiwgc2VsZWN0IiksZnVuY3Rpb24odCl7ci5hdHRhY2godCl9KSxyLnF1aWxsLm9uKGcuZGVmYXVsdC5ldmVudHMuRURJVE9SX0NIQU5HRSxmdW5jdGlvbih0LGUpe3Q9PT1nLmRlZmF1bHQuZXZlbnRzLlNFTEVDVElPTl9DSEFOR0UmJnIudXBkYXRlKGUpfSksci5xdWlsbC5vbihnLmRlZmF1bHQuZXZlbnRzLlNDUk9MTF9PUFRJTUlaRSxmdW5jdGlvbigpe3ZhciB0PXIucXVpbGwuc2VsZWN0aW9uLmdldFJhbmdlKCksZT1mKHQsMSksbj1lWzBdO3IudXBkYXRlKG4pfSkscn1yZXR1cm4gYShlLHQpLGgoZSxbe2tleToiYWRkSGFuZGxlciIsdmFsdWU6ZnVuY3Rpb24odCxlKXt0aGlzLmhhbmRsZXJzW3RdPWV9fSx7a2V5OiJhdHRhY2giLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj1bXS5maW5kLmNhbGwodC5jbGFzc0xpc3QsZnVuY3Rpb24odCl7cmV0dXJuIDA9PT10LmluZGV4T2YoInFsLSIpfSk7aWYobil7aWYobj1uLnNsaWNlKCJxbC0iLmxlbmd0aCksIkJVVFRPTiI9PT10LnRhZ05hbWUmJnQuc2V0QXR0cmlidXRlKCJ0eXBlIiwiYnV0dG9uIiksbnVsbD09dGhpcy5oYW5kbGVyc1tuXSl7aWYobnVsbCE9dGhpcy5xdWlsbC5zY3JvbGwud2hpdGVsaXN0JiZudWxsPT10aGlzLnF1aWxsLnNjcm9sbC53aGl0ZWxpc3Rbbl0pcmV0dXJuIHZvaWQgeC53YXJuKCJpZ25vcmluZyBhdHRhY2hpbmcgdG8gZGlzYWJsZWQgZm9ybWF0IixuLHQpO2lmKG51bGw9PXYuZGVmYXVsdC5xdWVyeShuKSlyZXR1cm4gdm9pZCB4Lndhcm4oImlnbm9yaW5nIGF0dGFjaGluZyB0byBub25leGlzdGVudCBmb3JtYXQiLG4sdCl9dmFyIHI9IlNFTEVDVCI9PT10LnRhZ05hbWU/ImNoYW5nZSI6ImNsaWNrIjt0LmFkZEV2ZW50TGlzdGVuZXIocixmdW5jdGlvbihyKXt2YXIgaT12b2lkIDA7aWYoIlNFTEVDVCI9PT10LnRhZ05hbWUpe2lmKHQuc2VsZWN0ZWRJbmRleDwwKXJldHVybjt2YXIgbD10Lm9wdGlvbnNbdC5zZWxlY3RlZEluZGV4XTtpPSFsLmhhc0F0dHJpYnV0ZSgic2VsZWN0ZWQiKSYmKGwudmFsdWV8fCExKX1lbHNlIGk9IXQuY2xhc3NMaXN0LmNvbnRhaW5zKCJxbC1hY3RpdmUiKSYmKHQudmFsdWV8fCF0Lmhhc0F0dHJpYnV0ZSgidmFsdWUiKSksci5wcmV2ZW50RGVmYXVsdCgpO2UucXVpbGwuZm9jdXMoKTt2YXIgYT1lLnF1aWxsLnNlbGVjdGlvbi5nZXRSYW5nZSgpLHM9ZihhLDEpLHU9c1swXTtpZihudWxsIT1lLmhhbmRsZXJzW25dKWUuaGFuZGxlcnNbbl0uY2FsbChlLGkpO2Vsc2UgaWYodi5kZWZhdWx0LnF1ZXJ5KG4pLnByb3RvdHlwZSBpbnN0YW5jZW9mIHYuZGVmYXVsdC5FbWJlZCl7aWYoIShpPXByb21wdCgiRW50ZXIgIituKSkpcmV0dXJuO2UucXVpbGwudXBkYXRlQ29udGVudHMoKG5ldyBkLmRlZmF1bHQpLnJldGFpbih1LmluZGV4KS5kZWxldGUodS5sZW5ndGgpLmluc2VydChvKHt9LG4saSkpLGcuZGVmYXVsdC5zb3VyY2VzLlVTRVIpfWVsc2UgZS5xdWlsbC5mb3JtYXQobixpLGcuZGVmYXVsdC5zb3VyY2VzLlVTRVIpO2UudXBkYXRlKHUpfSksdGhpcy5jb250cm9scy5wdXNoKFtuLHRdKX19fSx7a2V5OiJ1cGRhdGUiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPW51bGw9PXQ/e306dGhpcy5xdWlsbC5nZXRGb3JtYXQodCk7dGhpcy5jb250cm9scy5mb3JFYWNoKGZ1bmN0aW9uKG4pe3ZhciByPWYobiwyKSxvPXJbMF0saT1yWzFdO2lmKCJTRUxFQ1QiPT09aS50YWdOYW1lKXt2YXIgbD12b2lkIDA7aWYobnVsbD09dClsPW51bGw7ZWxzZSBpZihudWxsPT1lW29dKWw9aS5xdWVyeVNlbGVjdG9yKCJvcHRpb25bc2VsZWN0ZWRdIik7ZWxzZSBpZighQXJyYXkuaXNBcnJheShlW29dKSl7dmFyIGE9ZVtvXTsic3RyaW5nIj09dHlwZW9mIGEmJihhPWEucmVwbGFjZSgvXCIvZywnXFwiJykpLGw9aS5xdWVyeVNlbGVjdG9yKCdvcHRpb25bdmFsdWU9IicrYSsnIl0nKX1udWxsPT1sPyhpLnZhbHVlPSIiLGkuc2VsZWN0ZWRJbmRleD0tMSk6bC5zZWxlY3RlZD0hMH1lbHNlIGlmKG51bGw9PXQpaS5jbGFzc0xpc3QucmVtb3ZlKCJxbC1hY3RpdmUiKTtlbHNlIGlmKGkuaGFzQXR0cmlidXRlKCJ2YWx1ZSIpKXt2YXIgcz1lW29dPT09aS5nZXRBdHRyaWJ1dGUoInZhbHVlIil8fG51bGwhPWVbb10mJmVbb10udG9TdHJpbmcoKT09PWkuZ2V0QXR0cmlidXRlKCJ2YWx1ZSIpfHxudWxsPT1lW29dJiYhaS5nZXRBdHRyaWJ1dGUoInZhbHVlIik7aS5jbGFzc0xpc3QudG9nZ2xlKCJxbC1hY3RpdmUiLHMpfWVsc2UgaS5jbGFzc0xpc3QudG9nZ2xlKCJxbC1hY3RpdmUiLG51bGwhPWVbb10pfSl9fV0pLGV9KHcuZGVmYXVsdCk7ay5ERUZBVUxUUz17fSxrLkRFRkFVTFRTPXtjb250YWluZXI6bnVsbCxoYW5kbGVyczp7Y2xlYW46ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dGhpcy5xdWlsbC5nZXRTZWxlY3Rpb24oKTtpZihudWxsIT1lKWlmKDA9PWUubGVuZ3RoKXt2YXIgbj10aGlzLnF1aWxsLmdldEZvcm1hdCgpO09iamVjdC5rZXlzKG4pLmZvckVhY2goZnVuY3Rpb24oZSl7bnVsbCE9di5kZWZhdWx0LnF1ZXJ5KGUsdi5kZWZhdWx0LlNjb3BlLklOTElORSkmJnQucXVpbGwuZm9ybWF0KGUsITEpfSl9ZWxzZSB0aGlzLnF1aWxsLnJlbW92ZUZvcm1hdChlLGcuZGVmYXVsdC5zb3VyY2VzLlVTRVIpfSxkaXJlY3Rpb246ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5xdWlsbC5nZXRGb3JtYXQoKS5hbGlnbjsicnRsIj09PXQmJm51bGw9PWU/dGhpcy5xdWlsbC5mb3JtYXQoImFsaWduIiwicmlnaHQiLGcuZGVmYXVsdC5zb3VyY2VzLlVTRVIpOnR8fCJyaWdodCIhPT1lfHx0aGlzLnF1aWxsLmZvcm1hdCgiYWxpZ24iLCExLGcuZGVmYXVsdC5zb3VyY2VzLlVTRVIpLHRoaXMucXVpbGwuZm9ybWF0KCJkaXJlY3Rpb24iLHQsZy5kZWZhdWx0LnNvdXJjZXMuVVNFUil9LGluZGVudDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLnF1aWxsLmdldFNlbGVjdGlvbigpLG49dGhpcy5xdWlsbC5nZXRGb3JtYXQoZSkscj1wYXJzZUludChuLmluZGVudHx8MCk7aWYoIisxIj09PXR8fCItMSI9PT10KXt2YXIgbz0iKzEiPT09dD8xOi0xOyJydGwiPT09bi5kaXJlY3Rpb24mJihvKj0tMSksdGhpcy5xdWlsbC5mb3JtYXQoImluZGVudCIscitvLGcuZGVmYXVsdC5zb3VyY2VzLlVTRVIpfX0sbGluazpmdW5jdGlvbih0KXshMD09PXQmJih0PXByb21wdCgiRW50ZXIgbGluayBVUkw6IikpLHRoaXMucXVpbGwuZm9ybWF0KCJsaW5rIix0LGcuZGVmYXVsdC5zb3VyY2VzLlVTRVIpfSxsaXN0OmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMucXVpbGwuZ2V0U2VsZWN0aW9uKCksbj10aGlzLnF1aWxsLmdldEZvcm1hdChlKTsiY2hlY2siPT09dD8iY2hlY2tlZCI9PT1uLmxpc3R8fCJ1bmNoZWNrZWQiPT09bi5saXN0P3RoaXMucXVpbGwuZm9ybWF0KCJsaXN0IiwhMSxnLmRlZmF1bHQuc291cmNlcy5VU0VSKTp0aGlzLnF1aWxsLmZvcm1hdCgibGlzdCIsInVuY2hlY2tlZCIsZy5kZWZhdWx0LnNvdXJjZXMuVVNFUik6dGhpcy5xdWlsbC5mb3JtYXQoImxpc3QiLHQsZy5kZWZhdWx0LnNvdXJjZXMuVVNFUil9fX0sZS5kZWZhdWx0PWssZS5hZGRDb250cm9scz11fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz0nPHN2ZyB2aWV3Ym94PSIwIDAgMTggMTgiPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MyB4Mj0xNSB5MT05IHkyPTk+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MyB4Mj0xMyB5MT0xNCB5Mj0xND48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0zIHgyPTkgeTE9NCB5Mj00PjwvbGluZT4gPC9zdmc+J30sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9Jzxzdmcgdmlld2JveD0iMCAwIDE4IDE4Ij4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTE1IHgyPTMgeTE9OSB5Mj05PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTE0IHgyPTQgeTE9MTQgeTI9MTQ+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MTIgeDI9NiB5MT00IHkyPTQ+PC9saW5lPiA8L3N2Zz4nfSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz0nPHN2ZyB2aWV3Ym94PSIwIDAgMTggMTgiPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MTUgeDI9MyB5MT05IHkyPTk+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MTUgeDI9NSB5MT0xNCB5Mj0xND48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0xNSB4Mj05IHkxPTQgeTI9ND48L2xpbmU+IDwvc3ZnPid9LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPSc8c3ZnIHZpZXdib3g9IjAgMCAxOCAxOCI+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0xNSB4Mj0zIHkxPTkgeTI9OT48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0xNSB4Mj0zIHkxPTE0IHkyPTE0PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTE1IHgyPTMgeTE9NCB5Mj00PjwvbGluZT4gPC9zdmc+J30sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9Jzxzdmcgdmlld2JveD0iMCAwIDE4IDE4Ij4gPGcgY2xhc3M9InFsLWZpbGwgcWwtY29sb3ItbGFiZWwiPiA8cG9seWdvbiBwb2ludHM9IjYgNi44NjggNiA2IDUgNiA1IDcgNS45NDIgNyA2IDYuODY4Ij48L3BvbHlnb24+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD00IHk9ND48L3JlY3Q+IDxwb2x5Z29uIHBvaW50cz0iNi44MTcgNSA2IDUgNiA2IDYuMzggNiA2LjgxNyA1Ij48L3BvbHlnb24+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0yIHk9Nj48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0zIHk9NT48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD00IHk9Nz48L3JlY3Q+IDxwb2x5Z29uIHBvaW50cz0iNCAxMS40MzkgNCAxMSAzIDExIDMgMTIgMy43NTUgMTIgNCAxMS40MzkiPjwvcG9seWdvbj4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTIgeT0xMj48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0yIHk9OT48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0yIHk9MTU+PC9yZWN0PiA8cG9seWdvbiBwb2ludHM9IjQuNjMgMTAgNCAxMCA0IDExIDQuMTkyIDExIDQuNjMgMTAiPjwvcG9seWdvbj4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTMgeT04PjwvcmVjdD4gPHBhdGggZD1NMTAuODMyLDQuMkwxMSw0LjU4MlY0SDEwLjcwOEExLjk0OCwxLjk0OCwwLDAsMSwxMC44MzIsNC4yWj48L3BhdGg+IDxwYXRoIGQ9TTcsNC41ODJMNy4xNjgsNC4yQTEuOTI5LDEuOTI5LDAsMCwxLDcuMjkyLDRIN1Y0LjU4Mlo+PC9wYXRoPiA8cGF0aCBkPU04LDEzSDcuNjgzbC0wLjM1MS44YTEuOTMzLDEuOTMzLDAsMCwxLS4xMjQuMkg4VjEzWj48L3BhdGg+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0xMiB5PTI+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MTEgeT0zPjwvcmVjdD4gPHBhdGggZD1NOSwzSDhWMy4yODJBMS45ODUsMS45ODUsMCwwLDEsOSwzWj48L3BhdGg+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0yIHk9Mz48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD02IHk9Mj48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0zIHk9Mj48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD01IHk9Mz48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD05IHk9Mj48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0xNSB5PTE0PjwvcmVjdD4gPHBvbHlnb24gcG9pbnRzPSIxMy40NDcgMTAuMTc0IDEzLjQ2OSAxMC4yMjUgMTMuNDcyIDEwLjIzMiAxMy44MDggMTEgMTQgMTEgMTQgMTAgMTMuMzcgMTAgMTMuNDQ3IDEwLjE3NCI+PC9wb2x5Z29uPiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MTMgeT03PjwvcmVjdD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTE1IHk9NT48L3JlY3Q+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0xNCB5PTY+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MTUgeT04PjwvcmVjdD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTE0IHk9OT48L3JlY3Q+IDxwYXRoIGQ9TTMuNzc1LDE0SDN2MUg0VjE0LjMxNEExLjk3LDEuOTcsMCwwLDEsMy43NzUsMTRaPjwvcGF0aD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTE0IHk9Mz48L3JlY3Q+IDxwb2x5Z29uIHBvaW50cz0iMTIgNi44NjggMTIgNiAxMS42MiA2IDEyIDYuODY4Ij48L3BvbHlnb24+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0xNSB5PTI+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MTIgeT01PjwvcmVjdD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTEzIHk9ND48L3JlY3Q+IDxwb2x5Z29uIHBvaW50cz0iMTIuOTMzIDkgMTMgOSAxMyA4IDEyLjQ5NSA4IDEyLjkzMyA5Ij48L3BvbHlnb24+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD05IHk9MTQ+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9OCB5PTE1PjwvcmVjdD4gPHBhdGggZD1NNiwxNC45MjZWMTVIN1YxNC4zMTZBMS45OTMsMS45OTMsMCwwLDEsNiwxNC45MjZaPjwvcGF0aD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTUgeT0xNT48L3JlY3Q+IDxwYXRoIGQ9TTEwLjY2OCwxMy44TDEwLjMxNywxM0gxMHYxaDAuNzkyQTEuOTQ3LDEuOTQ3LDAsMCwxLDEwLjY2OCwxMy44Wj48L3BhdGg+IDxyZWN0IGhlaWdodD0xIHdpZHRoPTEgeD0xMSB5PTE1PjwvcmVjdD4gPHBhdGggZD1NMTQuMzMyLDEyLjJhMS45OSwxLjk5LDAsMCwxLC4xNjYuOEgxNVYxMkgxNC4yNDVaPjwvcGF0aD4gPHJlY3QgaGVpZ2h0PTEgd2lkdGg9MSB4PTE0IHk9MTU+PC9yZWN0PiA8cmVjdCBoZWlnaHQ9MSB3aWR0aD0xIHg9MTUgeT0xMT48L3JlY3Q+IDwvZz4gPHBvbHlsaW5lIGNsYXNzPXFsLXN0cm9rZSBwb2ludHM9IjUuNSAxMyA5IDUgMTIuNSAxMyI+PC9wb2x5bGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTExLjYzIHgyPTYuMzggeTE9MTEgeTI9MTE+PC9saW5lPiA8L3N2Zz4nfSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz0nPHN2ZyB2aWV3Ym94PSIwIDAgMTggMTgiPiA8cmVjdCBjbGFzcz0icWwtZmlsbCBxbC1zdHJva2UiIGhlaWdodD0zIHdpZHRoPTMgeD00IHk9NT48L3JlY3Q+IDxyZWN0IGNsYXNzPSJxbC1maWxsIHFsLXN0cm9rZSIgaGVpZ2h0PTMgd2lkdGg9MyB4PTExIHk9NT48L3JlY3Q+IDxwYXRoIGNsYXNzPSJxbC1ldmVuIHFsLWZpbGwgcWwtc3Ryb2tlIiBkPU03LDhjMCw0LjAzMS0zLDUtMyw1PjwvcGF0aD4gPHBhdGggY2xhc3M9InFsLWV2ZW4gcWwtZmlsbCBxbC1zdHJva2UiIGQ9TTE0LDhjMCw0LjAzMS0zLDUtMyw1PjwvcGF0aD4gPC9zdmc+J30sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9Jzxzdmcgdmlld2JveD0iMCAwIDE4IDE4Ij4gPHBhdGggY2xhc3M9cWwtc3Ryb2tlIGQ9TTUsNEg5LjVBMi41LDIuNSwwLDAsMSwxMiw2LjV2MEEyLjUsMi41LDAsMCwxLDkuNSw5SDVBMCwwLDAsMCwxLDUsOVY0QTAsMCwwLDAsMSw1LDRaPjwvcGF0aD4gPHBhdGggY2xhc3M9cWwtc3Ryb2tlIGQ9TTUsOWg1LjVBMi41LDIuNSwwLDAsMSwxMywxMS41djBBMi41LDIuNSwwLDAsMSwxMC41LDE0SDVhMCwwLDAsMCwxLDAsMFY5QTAsMCwwLDAsMSw1LDlaPjwvcGF0aD4gPC9zdmc+J30sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9JzxzdmcgY2xhc3M9IiIgdmlld2JveD0iMCAwIDE4IDE4Ij4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTUgeDI9MTMgeTE9MyB5Mj0zPjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTYgeDI9OS4zNSB5MT0xMiB5Mj0zPjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTExIHgyPTE1IHkxPTExIHkyPTE1PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTE1IHgyPTExIHkxPTExIHkyPTE1PjwvbGluZT4gPHJlY3QgY2xhc3M9cWwtZmlsbCBoZWlnaHQ9MSByeD0wLjUgcnk9MC41IHdpZHRoPTcgeD0yIHk9MTQ+PC9yZWN0PiA8L3N2Zz4nfSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz0nPHN2ZyB2aWV3Ym94PSIwIDAgMTggMTgiPiA8bGluZSBjbGFzcz0icWwtY29sb3ItbGFiZWwgcWwtc3Ryb2tlIHFsLXRyYW5zcGFyZW50IiB4MT0zIHgyPTE1IHkxPTE1IHkyPTE1PjwvbGluZT4gPHBvbHlsaW5lIGNsYXNzPXFsLXN0cm9rZSBwb2ludHM9IjUuNSAxMSA5IDMgMTIuNSAxMSI+PC9wb2x5bGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTExLjYzIHgyPTYuMzggeTE9OSB5Mj05PjwvbGluZT4gPC9zdmc+J30sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9Jzxzdmcgdmlld2JveD0iMCAwIDE4IDE4Ij4gPHBvbHlnb24gY2xhc3M9InFsLXN0cm9rZSBxbC1maWxsIiBwb2ludHM9IjMgMTEgNSA5IDMgNyAzIDExIj48L3BvbHlnb24+IDxsaW5lIGNsYXNzPSJxbC1zdHJva2UgcWwtZmlsbCIgeDE9MTUgeDI9MTEgeTE9NCB5Mj00PjwvbGluZT4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU0xMSwzYTMsMywwLDAsMCwwLDZoMVYzSDExWj48L3BhdGg+IDxyZWN0IGNsYXNzPXFsLWZpbGwgaGVpZ2h0PTExIHdpZHRoPTEgeD0xMSB5PTQ+PC9yZWN0PiA8cmVjdCBjbGFzcz1xbC1maWxsIGhlaWdodD0xMSB3aWR0aD0xIHg9MTMgeT00PjwvcmVjdD4gPC9zdmc+J30sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9Jzxzdmcgdmlld2JveD0iMCAwIDE4IDE4Ij4gPHBvbHlnb24gY2xhc3M9InFsLXN0cm9rZSBxbC1maWxsIiBwb2ludHM9IjE1IDEyIDEzIDEwIDE1IDggMTUgMTIiPjwvcG9seWdvbj4gPGxpbmUgY2xhc3M9InFsLXN0cm9rZSBxbC1maWxsIiB4MT05IHgyPTUgeTE9NCB5Mj00PjwvbGluZT4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU01LDNBMywzLDAsMCwwLDUsOUg2VjNINVo+PC9wYXRoPiA8cmVjdCBjbGFzcz1xbC1maWxsIGhlaWdodD0xMSB3aWR0aD0xIHg9NSB5PTQ+PC9yZWN0PiA8cmVjdCBjbGFzcz1xbC1maWxsIGhlaWdodD0xMSB3aWR0aD0xIHg9NyB5PTQ+PC9yZWN0PiA8L3N2Zz4nfSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz0nPHN2ZyB2aWV3Ym94PSIwIDAgMTggMTgiPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTE0LDE2SDRhMSwxLDAsMCwxLDAtMkgxNEExLDEsMCwwLDEsMTQsMTZaIC8+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NMTQsNEg0QTEsMSwwLDAsMSw0LDJIMTRBMSwxLDAsMCwxLDE0LDRaIC8+IDxyZWN0IGNsYXNzPXFsLWZpbGwgeD0zIHk9NiB3aWR0aD0xMiBoZWlnaHQ9NiByeD0xIHJ5PTEgLz4gPC9zdmc+J30sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9Jzxzdmcgdmlld2JveD0iMCAwIDE4IDE4Ij4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU0xMywxNkg1YTEsMSwwLDAsMSwwLTJoOEExLDEsMCwwLDEsMTMsMTZaIC8+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NMTMsNEg1QTEsMSwwLDAsMSw1LDJoOEExLDEsMCwwLDEsMTMsNFogLz4gPHJlY3QgY2xhc3M9cWwtZmlsbCB4PTIgeT02IHdpZHRoPTE0IGhlaWdodD02IHJ4PTEgcnk9MSAvPiA8L3N2Zz4nfSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz0nPHN2ZyB2aWV3Ym94PSIwIDAgMTggMTgiPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTE1LDhIMTNhMSwxLDAsMCwxLDAtMmgyQTEsMSwwLDAsMSwxNSw4WiAvPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTE1LDEySDEzYTEsMSwwLDAsMSwwLTJoMkExLDEsMCwwLDEsMTUsMTJaIC8+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NMTUsMTZINWExLDEsMCwwLDEsMC0ySDE1QTEsMSwwLDAsMSwxNSwxNlogLz4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU0xNSw0SDVBMSwxLDAsMCwxLDUsMkgxNUExLDEsMCwwLDEsMTUsNFogLz4gPHJlY3QgY2xhc3M9cWwtZmlsbCB4PTIgeT02IHdpZHRoPTggaGVpZ2h0PTYgcng9MSByeT0xIC8+IDwvc3ZnPid9LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPSc8c3ZnIHZpZXdib3g9IjAgMCAxOCAxOCI+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NNSw4SDNBMSwxLDAsMCwxLDMsNkg1QTEsMSwwLDAsMSw1LDhaIC8+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NNSwxMkgzYTEsMSwwLDAsMSwwLTJINUExLDEsMCwwLDEsNSwxMlogLz4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU0xMywxNkgzYTEsMSwwLDAsMSwwLTJIMTNBMSwxLDAsMCwxLDEzLDE2WiAvPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTEzLDRIM0ExLDEsMCwwLDEsMywySDEzQTEsMSwwLDAsMSwxMyw0WiAvPiA8cmVjdCBjbGFzcz1xbC1maWxsIHg9OCB5PTYgd2lkdGg9OCBoZWlnaHQ9NiByeD0xIHJ5PTEgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMjQgMTgpIHJvdGF0ZSgtMTgwKSIvPiA8L3N2Zz4nfSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz0nPHN2ZyB2aWV3Ym94PSIwIDAgMTggMTgiPiA8cGF0aCBjbGFzcz1xbC1maWxsIGQ9TTExLjc1OSwyLjQ4MmEyLjU2MSwyLjU2MSwwLDAsMC0zLjUzLjYwN0E3LjY1Niw3LjY1NiwwLDAsMCw2LjgsNi4yQzYuMTA5LDkuMTg4LDUuMjc1LDE0LjY3Nyw0LjE1LDE0LjkyN2ExLjU0NSwxLjU0NSwwLDAsMC0xLjMtLjkzM0EwLjkyMiwwLjkyMiwwLDAsMCwyLDE1LjAzNlMxLjk1NCwxNiw0LjExOSwxNnMzLjA5MS0yLjY5MSwzLjctNS41NTNjMC4xNzctLjgyNi4zNi0xLjcyNiwwLjU1NC0yLjZMOC43NzUsNi4yYzAuMzgxLTEuNDIxLjgwNy0yLjUyMSwxLjMwNi0yLjY3NmExLjAxNCwxLjAxNCwwLDAsMCwxLjAyLjU2QTAuOTY2LDAuOTY2LDAsMCwwLDExLjc1OSwyLjQ4Mlo+PC9wYXRoPiA8cmVjdCBjbGFzcz1xbC1maWxsIGhlaWdodD0xLjYgcng9MC44IHJ5PTAuOCB3aWR0aD01IHg9NS4xNSB5PTYuMj48L3JlY3Q+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NMTMuNjYzLDEyLjAyN2ExLjY2MiwxLjY2MiwwLDAsMSwuMjY2LTAuMjc2cTAuMTkzLDAuMDY5LjQ1NiwwLjEzOGEyLjEsMi4xLDAsMCwwLC41MzUuMDY5LDEuMDc1LDEuMDc1LDAsMCwwLC43NjctMC4zLDEuMDQ0LDEuMDQ0LDAsMCwwLC4zMTQtMC44LDAuODQsMC44NCwwLDAsMC0uMjM4LTAuNjE5LDAuOCwwLjgsMCwwLDAtLjU5NC0wLjIzOSwxLjE1NCwxLjE1NCwwLDAsMC0uNzgxLjMsNC42MDcsNC42MDcsMCwwLDAtLjc4MSwxcS0wLjA5MS4xNS0uMjE4LDAuMzQ2bC0wLjI0Ni4zOGMtMC4wNjgtLjI4OC0wLjEzNy0wLjU4Mi0wLjIxMi0wLjg4NS0wLjQ1OS0xLjg0Ny0yLjQ5NC0uOTg0LTIuOTQxLTAuOC0wLjQ4Mi4yLS4zNTMsMC42NDctMC4wOTQsMC41MjlhMC44NjksMC44NjksMCwwLDEsMS4yODEuNTg1YzAuMjE3LDAuNzUxLjM3NywxLjQzNiwwLjUyNywyLjAzOGE1LjY4OCw1LjY4OCwwLDAsMS0uMzYyLjQ2NywyLjY5LDIuNjksMCwwLDEtLjI2NC4yNzFxLTAuMjIxLS4wOC0wLjQ3MS0wLjE0N2EyLjAyOSwyLjAyOSwwLDAsMC0uNTIyLTAuMDY2LDEuMDc5LDEuMDc5LDAsMCwwLS43NjguM0ExLjA1OCwxLjA1OCwwLDAsMCw5LDE1LjEzMWEwLjgyLDAuODIsMCwwLDAsLjgzMi44NTIsMS4xMzQsMS4xMzQsMCwwLDAsLjc4Ny0wLjMsNS4xMSw1LjExLDAsMCwwLC43NzYtMC45OTNxMC4xNDEtLjIxOS4yMTUtMC4zNGMwLjA0Ni0uMDc2LjEyMi0wLjE5NCwwLjIyMy0wLjM0NmEyLjc4NiwyLjc4NiwwLDAsMCwuOTE4LDEuNzI2LDIuNTgyLDIuNTgyLDAsMCwwLDIuMzc2LS4xODVjMC4zMTctLjE4MS4yMTItMC41NjUsMC0wLjQ5NEEwLjgwNywwLjgwNywwLDAsMSwxNC4xNzYsMTVhNS4xNTksNS4xNTksMCwwLDEtLjkxMy0yLjQ0NmwwLDBRMTMuNDg3LDEyLjI0LDEzLjY2MywxMi4wMjdaPjwvcGF0aD4gPC9zdmc+J30sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9Jzxzdmcgdmlld0JveD0iMCAwIDE4IDE4Ij4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU0xMCw0VjE0YTEsMSwwLDAsMS0yLDBWMTBIM3Y0YTEsMSwwLDAsMS0yLDBWNEExLDEsMCwwLDEsMyw0VjhIOFY0YTEsMSwwLDAsMSwyLDBabTYuMDY3ODcsOS4yMDlIMTQuOTg5NzVWNy41OTg2M2EuNTQwODUuNTQwODUsMCwwLDAtLjYwNS0uNjA1NDdoLS42Mjc0NGExLjAxMTE5LDEuMDExMTksMCwwLDAtLjc0OC4yOTY4OEwxMS42NDUsOC41NjY0MWEuNTQzNS41NDM1LDAsMCwwLS4wMjIuODU4NGwuMjg2MTMuMzA3NjJhLjUzODYxLjUzODYxLDAsMCwwLC44NDcxNy4wMzMybC4wOTkxMi0uMDg3ODlhMS4yMTM3LDEuMjEzNywwLDAsMCwuMjQxNy0uMzUyNTRoLjAyMjQ2cy0uMDExMjMuMzA4NTktLjAxMTIzLjYwNTQ3VjEzLjIwOUgxMi4wNDFhLjU0MDg1LjU0MDg1LDAsMCwwLS42MDUuNjA1NDd2LjQzOTQ1YS41NDA4NS41NDA4NSwwLDAsMCwuNjA1LjYwNTQ3aDQuMDI2ODZhLjU0MDg1LjU0MDg1LDAsMCwwLC42MDUtLjYwNTQ3di0uNDM5NDVBLjU0MDg1LjU0MDg1LDAsMCwwLDE2LjA2Nzg3LDEzLjIwOVogLz4gPC9zdmc+J30sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9Jzxzdmcgdmlld0JveD0iMCAwIDE4IDE4Ij4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU0xNi43Mzk3NSwxMy44MTQ0NXYuNDM5NDVhLjU0MDg1LjU0MDg1LDAsMCwxLS42MDUuNjA1NDdIMTEuODU1YS41ODM5Mi41ODM5MiwwLDAsMS0uNjQ4OTMtLjYwNTQ3VjE0LjAxMjdjMC0yLjkwNTI3LDMuMzk5NDEtMy40MjE4NywzLjM5OTQxLTQuNTU0NjlhLjc3Njc1Ljc3Njc1LDAsMCwwLS44NDcxNy0uNzgxMjUsMS4xNzY4NCwxLjE3Njg0LDAsMCwwLS44MzU5NC4zODQ3N2MtLjI3NDkuMjYzNjctLjU2MS4zNzQtLjg1NzkxLjEzMTg0bC0uNDI5Mi0uMzQwODJjLS4zMDgxMS0uMjQyMTktLjM4NTI1LS41MTc1OC0uMTU0My0uODE0NDVhMi45NzE1NSwyLjk3MTU1LDAsMCwxLDIuNDUzNjEtMS4xNzY3NiwyLjQ1MzkzLDIuNDUzOTMsMCwwLDEsMi42ODQwOCwyLjQwOTE4YzAsMi40NTMxMi0zLjE3OTIsMi45MjY3Ni0zLjI3ODMyLDMuOTM4NDhoMi43OTQ0M0EuNTQwODUuNTQwODUsMCwwLDEsMTYuNzM5NzUsMTMuODE0NDVaTTksM0EuOTk5NzQuOTk5NzQsMCwwLDAsOCw0VjhIM1Y0QTEsMSwwLDAsMCwxLDRWMTRhMSwxLDAsMCwwLDIsMFYxMEg4djRhMSwxLDAsMCwwLDIsMFY0QS45OTk3NC45OTk3NCwwLDAsMCw5LDNaIC8+IDwvc3ZnPid9LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPSc8c3ZnIHZpZXdib3g9IjAgMCAxOCAxOCI+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT03IHgyPTEzIHkxPTQgeTI9ND48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT01IHgyPTExIHkxPTE0IHkyPTE0PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTggeDI9MTAgeTE9MTQgeTI9ND48L2xpbmU+IDwvc3ZnPid9LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPSc8c3ZnIHZpZXdib3g9IjAgMCAxOCAxOCI+IDxyZWN0IGNsYXNzPXFsLXN0cm9rZSBoZWlnaHQ9MTAgd2lkdGg9MTIgeD0zIHk9ND48L3JlY3Q+IDxjaXJjbGUgY2xhc3M9cWwtZmlsbCBjeD02IGN5PTcgcj0xPjwvY2lyY2xlPiA8cG9seWxpbmUgY2xhc3M9InFsLWV2ZW4gcWwtZmlsbCIgcG9pbnRzPSI1IDEyIDUgMTEgNyA5IDggMTAgMTEgNyAxMyA5IDEzIDEyIDUgMTIiPjwvcG9seWxpbmU+IDwvc3ZnPid9LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPSc8c3ZnIHZpZXdib3g9IjAgMCAxOCAxOCI+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0zIHgyPTE1IHkxPTE0IHkyPTE0PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTMgeDI9MTUgeTE9NCB5Mj00PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTkgeDI9MTUgeTE9OSB5Mj05PjwvbGluZT4gPHBvbHlsaW5lIGNsYXNzPSJxbC1maWxsIHFsLXN0cm9rZSIgcG9pbnRzPSIzIDcgMyAxMSA1IDkgMyA3Ij48L3BvbHlsaW5lPiA8L3N2Zz4nfSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz0nPHN2ZyB2aWV3Ym94PSIwIDAgMTggMTgiPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MyB4Mj0xNSB5MT0xNCB5Mj0xND48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0zIHgyPTE1IHkxPTQgeTI9ND48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT05IHgyPTE1IHkxPTkgeTI9OT48L2xpbmU+IDxwb2x5bGluZSBjbGFzcz1xbC1zdHJva2UgcG9pbnRzPSI1IDcgNSAxMSAzIDkgNSA3Ij48L3BvbHlsaW5lPiA8L3N2Zz4nfSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz0nPHN2ZyB2aWV3Ym94PSIwIDAgMTggMTgiPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9NyB4Mj0xMSB5MT03IHkyPTExPjwvbGluZT4gPHBhdGggY2xhc3M9InFsLWV2ZW4gcWwtc3Ryb2tlIiBkPU04LjksNC41NzdhMy40NzYsMy40NzYsMCwwLDEsLjM2LDQuNjc5QTMuNDc2LDMuNDc2LDAsMCwxLDQuNTc3LDguOUMzLjE4NSw3LjUsMi4wMzUsNi40LDQuMjE3LDQuMjE3UzcuNSwzLjE4NSw4LjksNC41NzdaPjwvcGF0aD4gPHBhdGggY2xhc3M9InFsLWV2ZW4gcWwtc3Ryb2tlIiBkPU0xMy40MjMsOS4xYTMuNDc2LDMuNDc2LDAsMCwwLTQuNjc5LS4zNiwzLjQ3NiwzLjQ3NiwwLDAsMCwuMzYsNC42NzljMS4zOTIsMS4zOTIsMi41LDIuNTQyLDQuNjc5LjM2UzE0LjgxNSwxMC41LDEzLjQyMyw5LjFaPjwvcGF0aD4gPC9zdmc+J30sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9Jzxzdmcgdmlld2JveD0iMCAwIDE4IDE4Ij4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTcgeDI9MTUgeTE9NCB5Mj00PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTcgeDI9MTUgeTE9OSB5Mj05PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTcgeDI9MTUgeTE9MTQgeTI9MTQ+PC9saW5lPiA8bGluZSBjbGFzcz0icWwtc3Ryb2tlIHFsLXRoaW4iIHgxPTIuNSB4Mj00LjUgeTE9NS41IHkyPTUuNT48L2xpbmU+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NMy41LDZBMC41LDAuNSwwLDAsMSwzLDUuNVYzLjA4NWwtMC4yNzYuMTM4QTAuNSwwLjUsMCwwLDEsMi4wNTMsM2MtMC4xMjQtLjI0Ny0wLjAyMy0wLjMyNC4yMjQtMC40NDdsMS0uNUEwLjUsMC41LDAsMCwxLDQsMi41djNBMC41LDAuNSwwLDAsMSwzLjUsNlo+PC9wYXRoPiA8cGF0aCBjbGFzcz0icWwtc3Ryb2tlIHFsLXRoaW4iIGQ9TTQuNSwxMC41aC0yYzAtLjIzNCwxLjg1LTEuMDc2LDEuODUtMi4yMzRBMC45NTksMC45NTksMCwwLDAsMi41LDguMTU2PjwvcGF0aD4gPHBhdGggY2xhc3M9InFsLXN0cm9rZSBxbC10aGluIiBkPU0yLjUsMTQuODQ2YTAuOTU5LDAuOTU5LDAsMCwwLDEuODUtLjEwOUEwLjcsMC43LDAsMCwwLDMuNzUsMTRhMC42ODgsMC42ODgsMCwwLDAsLjYtMC43MzYsMC45NTksMC45NTksMCwwLDAtMS44NS0uMTA5PjwvcGF0aD4gPC9zdmc+J30sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9Jzxzdmcgdmlld2JveD0iMCAwIDE4IDE4Ij4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTYgeDI9MTUgeTE9NCB5Mj00PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTYgeDI9MTUgeTE9OSB5Mj05PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTYgeDI9MTUgeTE9MTQgeTI9MTQ+PC9saW5lPiA8bGluZSBjbGFzcz1xbC1zdHJva2UgeDE9MyB4Mj0zIHkxPTQgeTI9ND48L2xpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT0zIHgyPTMgeTE9OSB5Mj05PjwvbGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTMgeDI9MyB5MT0xNCB5Mj0xND48L2xpbmU+IDwvc3ZnPid9LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPSc8c3ZnIGNsYXNzPSIiIHZpZXdib3g9IjAgMCAxOCAxOCI+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT05IHgyPTE1IHkxPTQgeTI9ND48L2xpbmU+IDxwb2x5bGluZSBjbGFzcz1xbC1zdHJva2UgcG9pbnRzPSIzIDQgNCA1IDYgMyI+PC9wb2x5bGluZT4gPGxpbmUgY2xhc3M9cWwtc3Ryb2tlIHgxPTkgeDI9MTUgeTE9MTQgeTI9MTQ+PC9saW5lPiA8cG9seWxpbmUgY2xhc3M9cWwtc3Ryb2tlIHBvaW50cz0iMyAxNCA0IDE1IDYgMTMiPjwvcG9seWxpbmU+IDxsaW5lIGNsYXNzPXFsLXN0cm9rZSB4MT05IHgyPTE1IHkxPTkgeTI9OT48L2xpbmU+IDxwb2x5bGluZSBjbGFzcz1xbC1zdHJva2UgcG9pbnRzPSIzIDkgNCAxMCA2IDgiPjwvcG9seWxpbmU+IDwvc3ZnPid9LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPSc8c3ZnIHZpZXdib3g9IjAgMCAxOCAxOCI+IDxwYXRoIGNsYXNzPXFsLWZpbGwgZD1NMTUuNSwxNUgxMy44NjFhMy44NTgsMy44NTgsMCwwLDAsMS45MTQtMi45NzUsMS44LDEuOCwwLDAsMC0xLjYtMS43NTFBMS45MjEsMS45MjEsMCwwLDAsMTIuMDIxLDExLjdhMC41MDAxMywwLjUwMDEzLDAsMSwwLC45NTcuMjkxaDBhMC45MTQsMC45MTQsMCwwLDEsMS4wNTMtLjcyNSwwLjgxLDAuODEsMCwwLDEsLjc0NC43NjJjMCwxLjA3Ni0xLjE2OTcxLDEuODY5ODItMS45Mzk3MSwyLjQzMDgyQTEuNDU2MzksMS40NTYzOSwwLDAsMCwxMiwxNS41YTAuNSwwLjUsMCwwLDAsLjUuNWgzQTAuNSwwLjUsMCwwLDAsMTUuNSwxNVogLz4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU05LjY1LDUuMjQxYTEsMSwwLDAsMC0xLjQwOS4xMDhMNiw3Ljk2NCwzLjc1OSw1LjM0OUExLDEsMCwwLDAsMi4xOTIsNi41OTE3OFEyLjIxNTQxLDYuNjIxMywyLjI0MSw2LjY0OUw0LjY4NCw5LjUsMi4yNDEsMTIuMzVBMSwxLDAsMCwwLDMuNzEsMTMuNzA3MjJxMC4wMjU1Ny0uMDI3NjguMDQ5LTAuMDU3MjJMNiwxMS4wMzYsOC4yNDEsMTMuNjVhMSwxLDAsMSwwLDEuNTY3LTEuMjQyNzdROS43ODQ1OSwxMi4zNzc3LDkuNzU5LDEyLjM1TDcuMzE2LDkuNSw5Ljc1OSw2LjY1MUExLDEsMCwwLDAsOS42NSw1LjI0MVogLz4gPC9zdmc+J30sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9Jzxzdmcgdmlld2JveD0iMCAwIDE4IDE4Ij4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU0xNS41LDdIMTMuODYxYTQuMDE1LDQuMDE1LDAsMCwwLDEuOTE0LTIuOTc1LDEuOCwxLjgsMCwwLDAtMS42LTEuNzUxQTEuOTIyLDEuOTIyLDAsMCwwLDEyLjAyMSwzLjdhMC41LDAuNSwwLDEsMCwuOTU3LjI5MSwwLjkxNywwLjkxNywwLDAsMSwxLjA1My0uNzI1LDAuODEsMC44MSwwLDAsMSwuNzQ0Ljc2MmMwLDEuMDc3LTEuMTY0LDEuOTI1LTEuOTM0LDIuNDg2QTEuNDIzLDEuNDIzLDAsMCwwLDEyLDcuNWEwLjUsMC41LDAsMCwwLC41LjVoM0EwLjUsMC41LDAsMCwwLDE1LjUsN1ogLz4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU05LjY1MSw1LjI0MWExLDEsMCwwLDAtMS40MS4xMDhMNiw3Ljk2NCwzLjc1OSw1LjM0OWExLDEsMCwxLDAtMS41MTksMS4zTDQuNjgzLDkuNSwyLjI0MSwxMi4zNWExLDEsMCwxLDAsMS41MTksMS4zTDYsMTEuMDM2LDguMjQxLDEzLjY1YTEsMSwwLDAsMCwxLjUxOS0xLjNMNy4zMTcsOS41LDkuNzU5LDYuNjUxQTEsMSwwLDAsMCw5LjY1MSw1LjI0MVogLz4gPC9zdmc+J30sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9Jzxzdmcgdmlld2JveD0iMCAwIDE4IDE4Ij4gPGxpbmUgY2xhc3M9InFsLXN0cm9rZSBxbC10aGluIiB4MT0xNS41IHgyPTIuNSB5MT04LjUgeTI9OS41PjwvbGluZT4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU05LjAwNyw4QzYuNTQyLDcuNzkxLDYsNy41MTksNiw2LjUsNiw1Ljc5Miw3LjI4Myw1LDksNWMxLjU3MSwwLDIuNzY1LjY3OSwyLjk2OSwxLjMwOWExLDEsMCwwLDAsMS45LS42MTdDMTMuMzU2LDQuMTA2LDExLjM1NCwzLDksMyw2LjIsMyw0LDQuNTM4LDQsNi41YTMuMiwzLjIsMCwwLDAsLjUsMS44NDNaPjwvcGF0aD4gPHBhdGggY2xhc3M9cWwtZmlsbCBkPU04Ljk4NCwxMEMxMS40NTcsMTAuMjA4LDEyLDEwLjQ3OSwxMiwxMS41YzAsMC43MDgtMS4yODMsMS41LTMsMS41LTEuNTcxLDAtMi43NjUtLjY3OS0yLjk2OS0xLjMwOWExLDEsMCwxLDAtMS45LjYxN0M0LjY0NCwxMy44OTQsNi42NDYsMTUsOSwxNWMyLjgsMCw1LTEuNTM4LDUtMy41YTMuMiwzLjIsMCwwLDAtLjUtMS44NDNaPjwvcGF0aD4gPC9zdmc+J30sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9Jzxzdmcgdmlld2JveD0iMCAwIDE4IDE4Ij4gPHBhdGggY2xhc3M9cWwtc3Ryb2tlIGQ9TTUsM1Y5YTQuMDEyLDQuMDEyLDAsMCwwLDQsNEg5YTQuMDEyLDQuMDEyLDAsMCwwLDQtNFYzPjwvcGF0aD4gPHJlY3QgY2xhc3M9cWwtZmlsbCBoZWlnaHQ9MSByeD0wLjUgcnk9MC41IHdpZHRoPTEyIHg9MyB5PTE1PjwvcmVjdD4gPC9zdmc+J30sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9Jzxzdmcgdmlld2JveD0iMCAwIDE4IDE4Ij4gPHJlY3QgY2xhc3M9cWwtc3Ryb2tlIGhlaWdodD0xMiB3aWR0aD0xMiB4PTMgeT0zPjwvcmVjdD4gPHJlY3QgY2xhc3M9cWwtZmlsbCBoZWlnaHQ9MTIgd2lkdGg9MSB4PTUgeT0zPjwvcmVjdD4gPHJlY3QgY2xhc3M9cWwtZmlsbCBoZWlnaHQ9MTIgd2lkdGg9MSB4PTEyIHk9Mz48L3JlY3Q+IDxyZWN0IGNsYXNzPXFsLWZpbGwgaGVpZ2h0PTIgd2lkdGg9OCB4PTUgeT04PjwvcmVjdD4gPHJlY3QgY2xhc3M9cWwtZmlsbCBoZWlnaHQ9MSB3aWR0aD0zIHg9MyB5PTU+PC9yZWN0PiA8cmVjdCBjbGFzcz1xbC1maWxsIGhlaWdodD0xIHdpZHRoPTMgeD0zIHk9Nz48L3JlY3Q+IDxyZWN0IGNsYXNzPXFsLWZpbGwgaGVpZ2h0PTEgd2lkdGg9MyB4PTMgeT0xMD48L3JlY3Q+IDxyZWN0IGNsYXNzPXFsLWZpbGwgaGVpZ2h0PTEgd2lkdGg9MyB4PTMgeT0xMj48L3JlY3Q+IDxyZWN0IGNsYXNzPXFsLWZpbGwgaGVpZ2h0PTEgd2lkdGg9MyB4PTEyIHk9NT48L3JlY3Q+IDxyZWN0IGNsYXNzPXFsLWZpbGwgaGVpZ2h0PTEgd2lkdGg9MyB4PTEyIHk9Nz48L3JlY3Q+IDxyZWN0IGNsYXNzPXFsLWZpbGwgaGVpZ2h0PTEgd2lkdGg9MyB4PTEyIHk9MTA+PC9yZWN0PiA8cmVjdCBjbGFzcz1xbC1maWxsIGhlaWdodD0xIHdpZHRoPTMgeD0xMiB5PTEyPjwvcmVjdD4gPC9zdmc+J30sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9Jzxzdmcgdmlld2JveD0iMCAwIDE4IDE4Ij4gPHBvbHlnb24gY2xhc3M9cWwtc3Ryb2tlIHBvaW50cz0iNyAxMSA5IDEzIDExIDExIDcgMTEiPjwvcG9seWdvbj4gPHBvbHlnb24gY2xhc3M9cWwtc3Ryb2tlIHBvaW50cz0iNyA3IDkgNSAxMSA3IDcgNyI+PC9wb2x5Z29uPiA8L3N2Zz4nfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWZ1bmN0aW9uIG8odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1mdW5jdGlvbiBpKHQsZSl7aWYoIXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTtyZXR1cm4hZXx8Im9iamVjdCIhPXR5cGVvZiBlJiYiZnVuY3Rpb24iIT10eXBlb2YgZT90OmV9ZnVuY3Rpb24gbCh0LGUpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIrdHlwZW9mIGUpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLGUmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHQsZSk6dC5fX3Byb3RvX189ZSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLGUuZGVmYXVsdD1lLkJ1YmJsZVRvb2x0aXA9dm9pZCAwO3ZhciBhPWZ1bmN0aW9uIHQoZSxuLHIpe251bGw9PT1lJiYoZT1GdW5jdGlvbi5wcm90b3R5cGUpO3ZhciBvPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxuKTtpZih2b2lkIDA9PT1vKXt2YXIgaT1PYmplY3QuZ2V0UHJvdG90eXBlT2YoZSk7cmV0dXJuIG51bGw9PT1pP3ZvaWQgMDp0KGksbixyKX1pZigidmFsdWUiaW4gbylyZXR1cm4gby52YWx1ZTt2YXIgbD1vLmdldDtpZih2b2lkIDAhPT1sKXJldHVybiBsLmNhbGwocil9LHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsInZhbHVlImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxyLmtleSxyKX19cmV0dXJuIGZ1bmN0aW9uKGUsbixyKXtyZXR1cm4gbiYmdChlLnByb3RvdHlwZSxuKSxyJiZ0KGUsciksZX19KCksdT1uKDIpLGM9cih1KSxmPW4oOSksaD1yKGYpLHA9big0NCksZD1yKHApLHk9bigyMiksdj1uKDI2KSxiPXIodiksZz1bWyJib2xkIiwiaXRhbGljIiwibGluayJdLFt7aGVhZGVyOjF9LHtoZWFkZXI6Mn0sImJsb2NrcXVvdGUiXV0sbT1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKHQsbil7byh0aGlzLGUpLG51bGwhPW4ubW9kdWxlcy50b29sYmFyJiZudWxsPT1uLm1vZHVsZXMudG9vbGJhci5jb250YWluZXImJihuLm1vZHVsZXMudG9vbGJhci5jb250YWluZXI9Zyk7dmFyIHI9aSh0aGlzLChlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpKS5jYWxsKHRoaXMsdCxuKSk7cmV0dXJuIHIucXVpbGwuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoInFsLWJ1YmJsZSIpLHJ9cmV0dXJuIGwoZSx0KSxzKGUsW3trZXk6ImV4dGVuZFRvb2xiYXIiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMudG9vbHRpcD1uZXcgXyh0aGlzLnF1aWxsLHRoaXMub3B0aW9ucy5ib3VuZHMpLHRoaXMudG9vbHRpcC5yb290LmFwcGVuZENoaWxkKHQuY29udGFpbmVyKSx0aGlzLmJ1aWxkQnV0dG9ucyhbXS5zbGljZS5jYWxsKHQuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoImJ1dHRvbiIpKSxiLmRlZmF1bHQpLHRoaXMuYnVpbGRQaWNrZXJzKFtdLnNsaWNlLmNhbGwodC5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgic2VsZWN0IikpLGIuZGVmYXVsdCl9fV0pLGV9KGQuZGVmYXVsdCk7bS5ERUZBVUxUUz0oMCxjLmRlZmF1bHQpKCEwLHt9LGQuZGVmYXVsdC5ERUZBVUxUUyx7bW9kdWxlczp7dG9vbGJhcjp7aGFuZGxlcnM6e2xpbms6ZnVuY3Rpb24odCl7dD90aGlzLnF1aWxsLnRoZW1lLnRvb2x0aXAuZWRpdCgpOnRoaXMucXVpbGwuZm9ybWF0KCJsaW5rIiwhMSl9fX19fSk7dmFyIF89ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSh0LG4pe28odGhpcyxlKTt2YXIgcj1pKHRoaXMsKGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSkpLmNhbGwodGhpcyx0LG4pKTtyZXR1cm4gci5xdWlsbC5vbihoLmRlZmF1bHQuZXZlbnRzLkVESVRPUl9DSEFOR0UsZnVuY3Rpb24odCxlLG4sbyl7aWYodD09PWguZGVmYXVsdC5ldmVudHMuU0VMRUNUSU9OX0NIQU5HRSlpZihudWxsIT1lJiZlLmxlbmd0aD4wJiZvPT09aC5kZWZhdWx0LnNvdXJjZXMuVVNFUil7ci5zaG93KCksci5yb290LnN0eWxlLmxlZnQ9IjBweCIsci5yb290LnN0eWxlLndpZHRoPSIiLHIucm9vdC5zdHlsZS53aWR0aD1yLnJvb3Qub2Zmc2V0V2lkdGgrInB4Ijt2YXIgaT1yLnF1aWxsLmdldExpbmVzKGUuaW5kZXgsZS5sZW5ndGgpO2lmKDE9PT1pLmxlbmd0aClyLnBvc2l0aW9uKHIucXVpbGwuZ2V0Qm91bmRzKGUpKTtlbHNle3ZhciBsPWlbaS5sZW5ndGgtMV0sYT1yLnF1aWxsLmdldEluZGV4KGwpLHM9TWF0aC5taW4obC5sZW5ndGgoKS0xLGUuaW5kZXgrZS5sZW5ndGgtYSksdT1yLnF1aWxsLmdldEJvdW5kcyhuZXcgeS5SYW5nZShhLHMpKTtyLnBvc2l0aW9uKHUpfX1lbHNlIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1yLnRleHRib3gmJnIucXVpbGwuaGFzRm9jdXMoKSYmci5oaWRlKCl9KSxyfXJldHVybiBsKGUsdCkscyhlLFt7a2V5OiJsaXN0ZW4iLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczthKGUucHJvdG90eXBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUucHJvdG90eXBlKSwibGlzdGVuIix0aGlzKS5jYWxsKHRoaXMpLHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKCIucWwtY2xvc2UiKS5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsZnVuY3Rpb24oKXt0LnJvb3QuY2xhc3NMaXN0LnJlbW92ZSgicWwtZWRpdGluZyIpfSksdGhpcy5xdWlsbC5vbihoLmRlZmF1bHQuZXZlbnRzLlNDUk9MTF9PUFRJTUlaRSxmdW5jdGlvbigpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXtpZighdC5yb290LmNsYXNzTGlzdC5jb250YWlucygicWwtaGlkZGVuIikpe3ZhciBlPXQucXVpbGwuZ2V0U2VsZWN0aW9uKCk7bnVsbCE9ZSYmdC5wb3NpdGlvbih0LnF1aWxsLmdldEJvdW5kcyhlKSl9fSwxKX0pfX0se2tleToiY2FuY2VsIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuc2hvdygpfX0se2tleToicG9zaXRpb24iLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBuPWEoZS5wcm90b3R5cGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZS5wcm90b3R5cGUpLCJwb3NpdGlvbiIsdGhpcykuY2FsbCh0aGlzLHQpLHI9dGhpcy5yb290LnF1ZXJ5U2VsZWN0b3IoIi5xbC10b29sdGlwLWFycm93Iik7aWYoci5zdHlsZS5tYXJnaW5MZWZ0PSIiLDA9PT1uKXJldHVybiBuO3Iuc3R5bGUubWFyZ2luTGVmdD0tMSpuLXIub2Zmc2V0V2lkdGgvMisicHgifX1dKSxlfShwLkJhc2VUb29sdGlwKTtfLlRFTVBMQVRFPVsnPHNwYW4gY2xhc3M9InFsLXRvb2x0aXAtYXJyb3ciPjwvc3Bhbj4nLCc8ZGl2IGNsYXNzPSJxbC10b29sdGlwLWVkaXRvciI+JywnPGlucHV0IHR5cGU9InRleHQiIGRhdGEtZm9ybXVsYT0iZT1tY14yIiBkYXRhLWxpbms9Imh0dHBzOi8vcXVpbGxqcy5jb20iIGRhdGEtdmlkZW89IkVtYmVkIFVSTCI+JywnPGEgY2xhc3M9InFsLWNsb3NlIj48L2E+JywiPC9kaXY+Il0uam9pbigiIiksZS5CdWJibGVUb29sdGlwPV8sZS5kZWZhdWx0PW19LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZnVuY3Rpb24gbyh0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfWZ1bmN0aW9uIGkodCxlKXtpZighdCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpO3JldHVybiFlfHwib2JqZWN0IiE9dHlwZW9mIGUmJiJmdW5jdGlvbiIhPXR5cGVvZiBlP3Q6ZX1mdW5jdGlvbiBsKHQsZSl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgIit0eXBlb2YgZSk7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksZSYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YodCxlKTp0Ll9fcHJvdG9fXz1lKX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIGE9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7dmFyIG49W10scj0hMCxvPSExLGk9dm9pZCAwO3RyeXtmb3IodmFyIGwsYT10W1N5bWJvbC5pdGVyYXRvcl0oKTshKHI9KGw9YS5uZXh0KCkpLmRvbmUpJiYobi5wdXNoKGwudmFsdWUpLCFlfHxuLmxlbmd0aCE9PWUpO3I9ITApO31jYXRjaCh0KXtvPSEwLGk9dH1maW5hbGx5e3RyeXshciYmYS5yZXR1cm4mJmEucmV0dXJuKCl9ZmluYWxseXtpZihvKXRocm93IGl9fXJldHVybiBufXJldHVybiBmdW5jdGlvbihlLG4pe2lmKEFycmF5LmlzQXJyYXkoZSkpcmV0dXJuIGU7aWYoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChlKSlyZXR1cm4gdChlLG4pO3Rocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKX19KCkscz1mdW5jdGlvbiB0KGUsbixyKXtudWxsPT09ZSYmKGU9RnVuY3Rpb24ucHJvdG90eXBlKTt2YXIgbz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsbik7aWYodm9pZCAwPT09byl7dmFyIGk9T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpO3JldHVybiBudWxsPT09aT92b2lkIDA6dChpLG4scil9aWYoInZhbHVlImluIG8pcmV0dXJuIG8udmFsdWU7dmFyIGw9by5nZXQ7aWYodm9pZCAwIT09bClyZXR1cm4gbC5jYWxsKHIpfSx1PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsci5rZXkscil9fXJldHVybiBmdW5jdGlvbihlLG4scil7cmV0dXJuIG4mJnQoZS5wcm90b3R5cGUsbiksciYmdChlLHIpLGV9fSgpLGM9bigyKSxmPXIoYyksaD1uKDkpLHA9cihoKSxkPW4oNDQpLHk9cihkKSx2PW4oMTUpLGI9cih2KSxnPW4oMjIpLG09bigyNiksXz1yKG0pLE89W1t7aGVhZGVyOlsiMSIsIjIiLCIzIiwhMV19XSxbImJvbGQiLCJpdGFsaWMiLCJ1bmRlcmxpbmUiLCJsaW5rIl0sW3tsaXN0OiJvcmRlcmVkIn0se2xpc3Q6ImJ1bGxldCJ9XSxbImNsZWFuIl1dLHc9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSh0LG4pe28odGhpcyxlKSxudWxsIT1uLm1vZHVsZXMudG9vbGJhciYmbnVsbD09bi5tb2R1bGVzLnRvb2xiYXIuY29udGFpbmVyJiYobi5tb2R1bGVzLnRvb2xiYXIuY29udGFpbmVyPU8pO3ZhciByPWkodGhpcywoZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlKSkuY2FsbCh0aGlzLHQsbikpO3JldHVybiByLnF1aWxsLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCJxbC1zbm93Iikscn1yZXR1cm4gbChlLHQpLHUoZSxbe2tleToiZXh0ZW5kVG9vbGJhciIsdmFsdWU6ZnVuY3Rpb24odCl7dC5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgicWwtc25vdyIpLHRoaXMuYnVpbGRCdXR0b25zKFtdLnNsaWNlLmNhbGwodC5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgiYnV0dG9uIikpLF8uZGVmYXVsdCksdGhpcy5idWlsZFBpY2tlcnMoW10uc2xpY2UuY2FsbCh0LmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCJzZWxlY3QiKSksXy5kZWZhdWx0KSx0aGlzLnRvb2x0aXA9bmV3IHgodGhpcy5xdWlsbCx0aGlzLm9wdGlvbnMuYm91bmRzKSx0LmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCIucWwtbGluayIpJiZ0aGlzLnF1aWxsLmtleWJvYXJkLmFkZEJpbmRpbmcoe2tleToiSyIsc2hvcnRLZXk6ITB9LGZ1bmN0aW9uKGUsbil7dC5oYW5kbGVycy5saW5rLmNhbGwodCwhbi5mb3JtYXQubGluayl9KX19XSksZX0oeS5kZWZhdWx0KTt3LkRFRkFVTFRTPSgwLGYuZGVmYXVsdCkoITAse30seS5kZWZhdWx0LkRFRkFVTFRTLHttb2R1bGVzOnt0b29sYmFyOntoYW5kbGVyczp7bGluazpmdW5jdGlvbih0KXtpZih0KXt2YXIgZT10aGlzLnF1aWxsLmdldFNlbGVjdGlvbigpO2lmKG51bGw9PWV8fDA9PWUubGVuZ3RoKXJldHVybjt2YXIgbj10aGlzLnF1aWxsLmdldFRleHQoZSk7L15cUytAXFMrXC5cUyskLy50ZXN0KG4pJiYwIT09bi5pbmRleE9mKCJtYWlsdG86IikmJihuPSJtYWlsdG86IituKTt0aGlzLnF1aWxsLnRoZW1lLnRvb2x0aXAuZWRpdCgibGluayIsbil9ZWxzZSB0aGlzLnF1aWxsLmZvcm1hdCgibGluayIsITEpfX19fX0pO3ZhciB4PWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUodCxuKXtvKHRoaXMsZSk7dmFyIHI9aSh0aGlzLChlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpKS5jYWxsKHRoaXMsdCxuKSk7cmV0dXJuIHIucHJldmlldz1yLnJvb3QucXVlcnlTZWxlY3RvcigiYS5xbC1wcmV2aWV3Iikscn1yZXR1cm4gbChlLHQpLHUoZSxbe2tleToibGlzdGVuIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7cyhlLnByb3RvdHlwZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlLnByb3RvdHlwZSksImxpc3RlbiIsdGhpcykuY2FsbCh0aGlzKSx0aGlzLnJvb3QucXVlcnlTZWxlY3RvcigiYS5xbC1hY3Rpb24iKS5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsZnVuY3Rpb24oZSl7dC5yb290LmNsYXNzTGlzdC5jb250YWlucygicWwtZWRpdGluZyIpP3Quc2F2ZSgpOnQuZWRpdCgibGluayIsdC5wcmV2aWV3LnRleHRDb250ZW50KSxlLnByZXZlbnREZWZhdWx0KCl9KSx0aGlzLnJvb3QucXVlcnlTZWxlY3RvcigiYS5xbC1yZW1vdmUiKS5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsZnVuY3Rpb24oZSl7aWYobnVsbCE9dC5saW5rUmFuZ2Upe3ZhciBuPXQubGlua1JhbmdlO3QucmVzdG9yZUZvY3VzKCksdC5xdWlsbC5mb3JtYXRUZXh0KG4sImxpbmsiLCExLHAuZGVmYXVsdC5zb3VyY2VzLlVTRVIpLGRlbGV0ZSB0LmxpbmtSYW5nZX1lLnByZXZlbnREZWZhdWx0KCksdC5oaWRlKCl9KSx0aGlzLnF1aWxsLm9uKHAuZGVmYXVsdC5ldmVudHMuU0VMRUNUSU9OX0NIQU5HRSxmdW5jdGlvbihlLG4scil7aWYobnVsbCE9ZSl7aWYoMD09PWUubGVuZ3RoJiZyPT09cC5kZWZhdWx0LnNvdXJjZXMuVVNFUil7dmFyIG89dC5xdWlsbC5zY3JvbGwuZGVzY2VuZGFudChiLmRlZmF1bHQsZS5pbmRleCksaT1hKG8sMiksbD1pWzBdLHM9aVsxXTtpZihudWxsIT1sKXt0LmxpbmtSYW5nZT1uZXcgZy5SYW5nZShlLmluZGV4LXMsbC5sZW5ndGgoKSk7dmFyIHU9Yi5kZWZhdWx0LmZvcm1hdHMobC5kb21Ob2RlKTtyZXR1cm4gdC5wcmV2aWV3LnRleHRDb250ZW50PXUsdC5wcmV2aWV3LnNldEF0dHJpYnV0ZSgiaHJlZiIsdSksdC5zaG93KCksdm9pZCB0LnBvc2l0aW9uKHQucXVpbGwuZ2V0Qm91bmRzKHQubGlua1JhbmdlKSl9fWVsc2UgZGVsZXRlIHQubGlua1JhbmdlO3QuaGlkZSgpfX0pfX0se2tleToic2hvdyIsdmFsdWU6ZnVuY3Rpb24oKXtzKGUucHJvdG90eXBlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKGUucHJvdG90eXBlKSwic2hvdyIsdGhpcykuY2FsbCh0aGlzKSx0aGlzLnJvb3QucmVtb3ZlQXR0cmlidXRlKCJkYXRhLW1vZGUiKX19XSksZX0oZC5CYXNlVG9vbHRpcCk7eC5URU1QTEFURT1bJzxhIGNsYXNzPSJxbC1wcmV2aWV3IiB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iYWJvdXQ6YmxhbmsiPjwvYT4nLCc8aW5wdXQgdHlwZT0idGV4dCIgZGF0YS1mb3JtdWxhPSJlPW1jXjIiIGRhdGEtbGluaz0iaHR0cHM6Ly9xdWlsbGpzLmNvbSIgZGF0YS12aWRlbz0iRW1iZWQgVVJMIj4nLCc8YSBjbGFzcz0icWwtYWN0aW9uIj48L2E+JywnPGEgY2xhc3M9InFsLXJlbW92ZSI+PC9hPiddLmpvaW4oIiIpLGUuZGVmYXVsdD13fV0pLmRlZmF1bHR9KTs=';

        public static quillCSS = '.ql-container {  box-sizing: border-box;  font-family: Helvetica, Arial, sans-serif;  font-size: 13px;  height: 100%;  margin: 0px;  position: relative;}.ql-container.ql-disabled .ql-tooltip {  visibility: hidden;}.ql-container.ql-disabled .ql-editor ul[data-checked] > li::before {  pointer-events: none;}.ql-clipboard {  left: -100000px;  height: 1px;  overflow-y: hidden;  position: absolute;  top: 50%;}.ql-clipboard p {  margin: 0;  padding: 0;}.ql-editor {  box-sizing: border-box;  line-height: 1.42;  height: 100%;  outline: none;  overflow-y: auto;  padding: 12px 15px;  tab-size: 4;  -moz-tab-size: 4;  text-align: left;  white-space: pre-wrap;  word-wrap: break-word;}.ql-editor > * {  cursor: text;}.ql-editor p,.ql-editor ol,.ql-editor ul,.ql-editor pre,.ql-editor blockquote,.ql-editor h1,.ql-editor h2,.ql-editor h3,.ql-editor h4,.ql-editor h5,.ql-editor h6 {  margin: 0;  padding: 0;  counter-reset: list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;}.ql-editor ol,.ql-editor ul {  padding-left: 1.5em;}.ql-editor ol > li,.ql-editor ul > li {  list-style-type: none;}.ql-editor ul > li::before {  content: "\2022";}.ql-editor ul[data-checked=true],.ql-editor ul[data-checked=false] {  pointer-events: none;}.ql-editor ul[data-checked=true] > li *,.ql-editor ul[data-checked=false] > li * {  pointer-events: all;}.ql-editor ul[data-checked=true] > li::before,.ql-editor ul[data-checked=false] > li::before {  color: #777;  cursor: pointer;  pointer-events: all;}.ql-editor ul[data-checked=true] > li::before {  content: "\2611";}.ql-editor ul[data-checked=false] > li::before {  content: "\2610";}.ql-editor li::before {  display: inline-block;  white-space: nowrap;  width: 1.2em;}.ql-editor li:not(.ql-direction-rtl)::before {  margin-left: -1.5em;  margin-right: 0.3em;  text-align: right;}.ql-editor li.ql-direction-rtl::before {  margin-left: 0.3em;  margin-right: -1.5em;}.ql-editor ol li:not(.ql-direction-rtl),.ql-editor ul li:not(.ql-direction-rtl) {  padding-left: 1.5em;}.ql-editor ol li.ql-direction-rtl,.ql-editor ul li.ql-direction-rtl {  padding-right: 1.5em;}.ql-editor ol li {  counter-reset: list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;  counter-increment: list-0;}.ql-editor ol li:before {  content: counter(list-0, decimal) ". ";}.ql-editor ol li.ql-indent-1 {  counter-increment: list-1;}.ql-editor ol li.ql-indent-1:before {  content: counter(list-1, lower-alpha) ". ";}.ql-editor ol li.ql-indent-1 {  counter-reset: list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;}.ql-editor ol li.ql-indent-2 {  counter-increment: list-2;}.ql-editor ol li.ql-indent-2:before {  content: counter(list-2, lower-roman) ". ";}.ql-editor ol li.ql-indent-2 {  counter-reset: list-3 list-4 list-5 list-6 list-7 list-8 list-9;}.ql-editor ol li.ql-indent-3 {  counter-increment: list-3;}.ql-editor ol li.ql-indent-3:before {  content: counter(list-3, decimal) ". ";}.ql-editor ol li.ql-indent-3 {  counter-reset: list-4 list-5 list-6 list-7 list-8 list-9;}.ql-editor ol li.ql-indent-4 {  counter-increment: list-4;}.ql-editor ol li.ql-indent-4:before {  content: counter(list-4, lower-alpha) ". ";}.ql-editor ol li.ql-indent-4 {  counter-reset: list-5 list-6 list-7 list-8 list-9;}.ql-editor ol li.ql-indent-5 {  counter-increment: list-5;}.ql-editor ol li.ql-indent-5:before {  content: counter(list-5, lower-roman) ". ";}.ql-editor ol li.ql-indent-5 {  counter-reset: list-6 list-7 list-8 list-9;}.ql-editor ol li.ql-indent-6 {  counter-increment: list-6;}.ql-editor ol li.ql-indent-6:before {  content: counter(list-6, decimal) ". ";}.ql-editor ol li.ql-indent-6 {  counter-reset: list-7 list-8 list-9;}.ql-editor ol li.ql-indent-7 {  counter-increment: list-7;}.ql-editor ol li.ql-indent-7:before {  content: counter(list-7, lower-alpha) ". ";}.ql-editor ol li.ql-indent-7 {  counter-reset: list-8 list-9;}.ql-editor ol li.ql-indent-8 {  counter-increment: list-8;}.ql-editor ol li.ql-indent-8:before {  content: counter(list-8, lower-roman) ". ";}.ql-editor ol li.ql-indent-8 {  counter-reset: list-9;}.ql-editor ol li.ql-indent-9 {  counter-increment: list-9;}.ql-editor ol li.ql-indent-9:before {  content: counter(list-9, decimal) ". ";}.ql-editor .ql-indent-1:not(.ql-direction-rtl) {  padding-left: 3em;}.ql-editor li.ql-indent-1:not(.ql-direction-rtl) {  padding-left: 4.5em;}.ql-editor .ql-indent-1.ql-direction-rtl.ql-align-right {  padding-right: 3em;}.ql-editor li.ql-indent-1.ql-direction-rtl.ql-align-right {  padding-right: 4.5em;}.ql-editor .ql-indent-2:not(.ql-direction-rtl) {  padding-left: 6em;}.ql-editor li.ql-indent-2:not(.ql-direction-rtl) {  padding-left: 7.5em;}.ql-editor .ql-indent-2.ql-direction-rtl.ql-align-right {  padding-right: 6em;}.ql-editor li.ql-indent-2.ql-direction-rtl.ql-align-right {  padding-right: 7.5em;}.ql-editor .ql-indent-3:not(.ql-direction-rtl) {  padding-left: 9em;}.ql-editor li.ql-indent-3:not(.ql-direction-rtl) {  padding-left: 10.5em;}.ql-editor .ql-indent-3.ql-direction-rtl.ql-align-right {  padding-right: 9em;}.ql-editor li.ql-indent-3.ql-direction-rtl.ql-align-right {  padding-right: 10.5em;}.ql-editor .ql-indent-4:not(.ql-direction-rtl) {  padding-left: 12em;}.ql-editor li.ql-indent-4:not(.ql-direction-rtl) {  padding-left: 13.5em;}.ql-editor .ql-indent-4.ql-direction-rtl.ql-align-right {  padding-right: 12em;}.ql-editor li.ql-indent-4.ql-direction-rtl.ql-align-right {  padding-right: 13.5em;}.ql-editor .ql-indent-5:not(.ql-direction-rtl) {  padding-left: 15em;}.ql-editor li.ql-indent-5:not(.ql-direction-rtl) {  padding-left: 16.5em;}.ql-editor .ql-indent-5.ql-direction-rtl.ql-align-right {  padding-right: 15em;}.ql-editor li.ql-indent-5.ql-direction-rtl.ql-align-right {  padding-right: 16.5em;}.ql-editor .ql-indent-6:not(.ql-direction-rtl) {  padding-left: 18em;}.ql-editor li.ql-indent-6:not(.ql-direction-rtl) {  padding-left: 19.5em;}.ql-editor .ql-indent-6.ql-direction-rtl.ql-align-right {  padding-right: 18em;}.ql-editor li.ql-indent-6.ql-direction-rtl.ql-align-right {  padding-right: 19.5em;}.ql-editor .ql-indent-7:not(.ql-direction-rtl) {  padding-left: 21em;}.ql-editor li.ql-indent-7:not(.ql-direction-rtl) {  padding-left: 22.5em;}.ql-editor .ql-indent-7.ql-direction-rtl.ql-align-right {  padding-right: 21em;}.ql-editor li.ql-indent-7.ql-direction-rtl.ql-align-right {  padding-right: 22.5em;}.ql-editor .ql-indent-8:not(.ql-direction-rtl) {  padding-left: 24em;}.ql-editor li.ql-indent-8:not(.ql-direction-rtl) {  padding-left: 25.5em;}.ql-editor .ql-indent-8.ql-direction-rtl.ql-align-right {  padding-right: 24em;}.ql-editor li.ql-indent-8.ql-direction-rtl.ql-align-right {  padding-right: 25.5em;}.ql-editor .ql-indent-9:not(.ql-direction-rtl) {  padding-left: 27em;}.ql-editor li.ql-indent-9:not(.ql-direction-rtl) {  padding-left: 28.5em;}.ql-editor .ql-indent-9.ql-direction-rtl.ql-align-right {  padding-right: 27em;}.ql-editor li.ql-indent-9.ql-direction-rtl.ql-align-right {  padding-right: 28.5em;}.ql-editor .ql-video {  display: block;  max-width: 100%;}.ql-editor .ql-video.ql-align-center {  margin: 0 auto;}.ql-editor .ql-video.ql-align-right {  margin: 0 0 0 auto;}.ql-editor .ql-bg-black {  background-color: #000;}.ql-editor .ql-bg-red {  background-color: #e60000;}.ql-editor .ql-bg-orange {  background-color: #f90;}.ql-editor .ql-bg-yellow {  background-color: #ff0;}.ql-editor .ql-bg-green {  background-color: #008a00;}.ql-editor .ql-bg-blue {  background-color: #06c;}.ql-editor .ql-bg-purple {  background-color: #93f;}.ql-editor .ql-color-white {  color: #fff;}.ql-editor .ql-color-red {  color: #e60000;}.ql-editor .ql-color-orange {  color: #f90;}.ql-editor .ql-color-yellow {  color: #ff0;}.ql-editor .ql-color-green {  color: #008a00;}.ql-editor .ql-color-blue {  color: #06c;}.ql-editor .ql-color-purple {  color: #93f;}.ql-editor .ql-font-serif {  font-family: Georgia, Times New Roman, serif;}.ql-editor .ql-font-monospace {  font-family: Monaco, Courier New, monospace;}.ql-editor .ql-size-small {  font-size: 0.75em;}.ql-editor .ql-size-large {  font-size: 1.5em;}.ql-editor .ql-size-huge {  font-size: 2.5em;}.ql-editor .ql-direction-rtl {  direction: rtl;  text-align: inherit;}.ql-editor .ql-align-center {  text-align: center;}.ql-editor .ql-align-justify {  text-align: justify;}.ql-editor .ql-align-right {  text-align: right;}.ql-editor.ql-blank::before {  color: rgba(0,0,0,0.6);  content: attr(data-placeholder);  font-style: italic;  left: 15px;  pointer-events: none;  position: absolute;  right: 15px;}.ql-snow.ql-toolbar:after,.ql-snow .ql-toolbar:after {  clear: both;  content: "";  display: table;}.ql-snow.ql-toolbar button,.ql-snow .ql-toolbar button {  background: none;  border: none;  cursor: pointer;  display: inline-block;  float: left;  height: 24px;  padding: 3px 5px;  width: 28px;}.ql-snow.ql-toolbar button svg,.ql-snow .ql-toolbar button svg {  float: left;  height: 100%;}.ql-snow.ql-toolbar button:active:hover,.ql-snow .ql-toolbar button:active:hover {  outline: none;}.ql-snow.ql-toolbar input.ql-image[type=file],.ql-snow .ql-toolbar input.ql-image[type=file] {  display: none;}.ql-snow.ql-toolbar button:hover,.ql-snow .ql-toolbar button:hover,.ql-snow.ql-toolbar button:focus,.ql-snow .ql-toolbar button:focus,.ql-snow.ql-toolbar button.ql-active,.ql-snow .ql-toolbar button.ql-active,.ql-snow.ql-toolbar .ql-picker-label:hover,.ql-snow .ql-toolbar .ql-picker-label:hover,.ql-snow.ql-toolbar .ql-picker-label.ql-active,.ql-snow .ql-toolbar .ql-picker-label.ql-active,.ql-snow.ql-toolbar .ql-picker-item:hover,.ql-snow .ql-toolbar .ql-picker-item:hover,.ql-snow.ql-toolbar .ql-picker-item.ql-selected,.ql-snow .ql-toolbar .ql-picker-item.ql-selected {  color: #06c;}.ql-snow.ql-toolbar button:hover .ql-fill,.ql-snow .ql-toolbar button:hover .ql-fill,.ql-snow.ql-toolbar button:focus .ql-fill,.ql-snow .ql-toolbar button:focus .ql-fill,.ql-snow.ql-toolbar button.ql-active .ql-fill,.ql-snow .ql-toolbar button.ql-active .ql-fill,.ql-snow.ql-toolbar .ql-picker-label:hover .ql-fill,.ql-snow .ql-toolbar .ql-picker-label:hover .ql-fill,.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-fill,.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-fill,.ql-snow.ql-toolbar .ql-picker-item:hover .ql-fill,.ql-snow .ql-toolbar .ql-picker-item:hover .ql-fill,.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-fill,.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-fill,.ql-snow.ql-toolbar button:hover .ql-stroke.ql-fill,.ql-snow .ql-toolbar button:hover .ql-stroke.ql-fill,.ql-snow.ql-toolbar button:focus .ql-stroke.ql-fill,.ql-snow .ql-toolbar button:focus .ql-stroke.ql-fill,.ql-snow.ql-toolbar button.ql-active .ql-stroke.ql-fill,.ql-snow .ql-toolbar button.ql-active .ql-stroke.ql-fill,.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill,.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill {  fill: #06c;}.ql-snow.ql-toolbar button:hover .ql-stroke,.ql-snow .ql-toolbar button:hover .ql-stroke,.ql-snow.ql-toolbar button:focus .ql-stroke,.ql-snow .ql-toolbar button:focus .ql-stroke,.ql-snow.ql-toolbar button.ql-active .ql-stroke,.ql-snow .ql-toolbar button.ql-active .ql-stroke,.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke,.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke,.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke,.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke,.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke,.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke,.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke,.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke,.ql-snow.ql-toolbar button:hover .ql-stroke-miter,.ql-snow .ql-toolbar button:hover .ql-stroke-miter,.ql-snow.ql-toolbar button:focus .ql-stroke-miter,.ql-snow .ql-toolbar button:focus .ql-stroke-miter,.ql-snow.ql-toolbar button.ql-active .ql-stroke-miter,.ql-snow .ql-toolbar button.ql-active .ql-stroke-miter,.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke-miter,.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke-miter,.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke-miter,.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke-miter,.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter,.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter {  stroke: #06c;}@media (pointer: coarse) {  .ql-snow.ql-toolbar button:hover:not(.ql-active),  .ql-snow .ql-toolbar button:hover:not(.ql-active) {    color: #444;  }  .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-fill,  .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-fill,  .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill,  .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill {    fill: #444;  }  .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke,  .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke,  .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter,  .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter {    stroke: #444;  }}.ql-snow {  box-sizing: border-box;}.ql-snow * {  box-sizing: border-box;}.ql-snow .ql-hidden {  display: none;}.ql-snow .ql-out-bottom,.ql-snow .ql-out-top {  visibility: hidden;}.ql-snow .ql-tooltip {  position: absolute;  transform: translateY(10px);}.ql-snow .ql-tooltip a {  cursor: pointer;  text-decoration: none;}.ql-snow .ql-tooltip.ql-flip {  transform: translateY(-10px);}.ql-snow .ql-formats {  display: inline-block;  vertical-align: middle;}.ql-snow .ql-formats:after {  clear: both;  content: "";  display: table;}.ql-snow .ql-stroke {  fill: none;  stroke: #444;  stroke-linecap: round;  stroke-linejoin: round;  stroke-width: 2;}.ql-snow .ql-stroke-miter {  fill: none;  stroke: #444;  stroke-miterlimit: 10;  stroke-width: 2;}.ql-snow .ql-fill,.ql-snow .ql-stroke.ql-fill {  fill: #444;}.ql-snow .ql-empty {  fill: none;}.ql-snow .ql-even {  fill-rule: evenodd;}.ql-snow .ql-thin,.ql-snow .ql-stroke.ql-thin {  stroke-width: 1;}.ql-snow .ql-transparent {  opacity: 0.4;}.ql-snow .ql-direction svg:last-child {  display: none;}.ql-snow .ql-direction.ql-active svg:last-child {  display: inline;}.ql-snow .ql-direction.ql-active svg:first-child {  display: none;}.ql-snow .ql-editor h1 {  font-size: 2em;}.ql-snow .ql-editor h2 {  font-size: 1.5em;}.ql-snow .ql-editor h3 {  font-size: 1.17em;}.ql-snow .ql-editor h4 {  font-size: 1em;}.ql-snow .ql-editor h5 {  font-size: 0.83em;}.ql-snow .ql-editor h6 {  font-size: 0.67em;}.ql-snow .ql-editor a {  text-decoration: underline;}.ql-snow .ql-editor blockquote {  border-left: 4px solid #ccc;  margin-bottom: 5px;  margin-top: 5px;  padding-left: 16px;}.ql-snow .ql-editor code,.ql-snow .ql-editor pre {  background-color: #f0f0f0;  border-radius: 3px;}.ql-snow .ql-editor pre {  white-space: pre-wrap;  margin-bottom: 5px;  margin-top: 5px;  padding: 5px 10px;}.ql-snow .ql-editor code {  font-size: 85%;  padding: 2px 4px;}.ql-snow .ql-editor pre.ql-syntax {  background-color: #23241f;  color: #f8f8f2;  overflow: visible;}.ql-snow .ql-editor img {  max-width: 100%;}.ql-snow .ql-picker {  color: #444;  display: inline-block;  float: left;  font-size: 14px;  font-weight: 500;  height: 24px;  position: relative;  vertical-align: middle;}.ql-snow .ql-picker-label {  cursor: pointer;  display: inline-block;  height: 100%;  padding-left: 8px;  padding-right: 2px;  position: relative;  width: 100%;}.ql-snow .ql-picker-label::before {  display: inline-block;  line-height: 22px;}.ql-snow .ql-picker-options {  background-color: #fff;  display: none;  min-width: 100%;  padding: 4px 8px;  position: absolute;  white-space: nowrap;}.ql-snow .ql-picker-options .ql-picker-item {  cursor: pointer;  display: block;  padding-bottom: 5px;  padding-top: 5px;}.ql-snow .ql-picker.ql-expanded .ql-picker-label {  color: #ccc;  z-index: 2;}.ql-snow .ql-picker.ql-expanded .ql-picker-label .ql-fill {  fill: #ccc;}.ql-snow .ql-picker.ql-expanded .ql-picker-label .ql-stroke {  stroke: #ccc;}.ql-snow .ql-picker.ql-expanded .ql-picker-options {  display: block;  margin-top: -1px;  top: 100%;  z-index: 1;}.ql-snow .ql-color-picker,.ql-snow .ql-icon-picker {  width: 28px;}.ql-snow .ql-color-picker .ql-picker-label,.ql-snow .ql-icon-picker .ql-picker-label {  padding: 2px 4px;}.ql-snow .ql-color-picker .ql-picker-label svg,.ql-snow .ql-icon-picker .ql-picker-label svg {  right: 4px;}.ql-snow .ql-icon-picker .ql-picker-options {  padding: 4px 0px;}.ql-snow .ql-icon-picker .ql-picker-item {  height: 24px;  width: 24px;  padding: 2px 4px;}.ql-snow .ql-color-picker .ql-picker-options {  padding: 3px 5px;  width: 152px;}.ql-snow .ql-color-picker .ql-picker-item {  border: 1px solid transparent;  float: left;  height: 16px;  margin: 2px;  padding: 0px;  width: 16px;}.ql-snow .ql-picker:not(.ql-color-picker):not(.ql-icon-picker) svg {  position: absolute;  margin-top: -9px;  right: 0;  top: 50%;  width: 18px;}.ql-snow .ql-picker.ql-header .ql-picker-label[data-label]:not([data-label=""])::before,.ql-snow .ql-picker.ql-font .ql-picker-label[data-label]:not([data-label=""])::before,.ql-snow .ql-picker.ql-size .ql-picker-label[data-label]:not([data-label=""])::before,.ql-snow .ql-picker.ql-header .ql-picker-item[data-label]:not([data-label=""])::before,.ql-snow .ql-picker.ql-font .ql-picker-item[data-label]:not([data-label=""])::before,.ql-snow .ql-picker.ql-size .ql-picker-item[data-label]:not([data-label=""])::before {  content: attr(data-label);}.ql-snow .ql-picker.ql-header {  width: 98px;}.ql-snow .ql-picker.ql-header .ql-picker-label::before,.ql-snow .ql-picker.ql-header .ql-picker-item::before {  content: "Normal";}.ql-snow .ql-picker.ql-header .ql-picker-label[data-value="1"]::before,.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="1"]::before {  content: "Heading 1";}.ql-snow .ql-picker.ql-header .ql-picker-label[data-value="2"]::before,.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="2"]::before {  content: "Heading 2";}.ql-snow .ql-picker.ql-header .ql-picker-label[data-value="3"]::before,.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="3"]::before {  content: "Heading 3";}.ql-snow .ql-picker.ql-header .ql-picker-label[data-value="4"]::before,.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="4"]::before {  content: "Heading 4";}.ql-snow .ql-picker.ql-header .ql-picker-label[data-value="5"]::before,.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="5"]::before {  content: "Heading 5";}.ql-snow .ql-picker.ql-header .ql-picker-label[data-value="6"]::before,.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="6"]::before {  content: "Heading 6";}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="1"]::before {  font-size: 2em;}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="2"]::before {  font-size: 1.5em;}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="3"]::before {  font-size: 1.17em;}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="4"]::before {  font-size: 1em;}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="5"]::before {  font-size: 0.83em;}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="6"]::before {  font-size: 0.67em;}.ql-snow .ql-picker.ql-font {  width: 108px;}.ql-snow .ql-picker.ql-font .ql-picker-label::before,.ql-snow .ql-picker.ql-font .ql-picker-item::before {  content: "Sans Serif";}.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=serif]::before,.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=serif]::before {  content: "Serif";}.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=monospace]::before,.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before {  content: "Monospace";}.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=serif]::before {  font-family: Georgia, Times New Roman, serif;}.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before {  font-family: Monaco, Courier New, monospace;}.ql-snow .ql-picker.ql-size {  width: 98px;}.ql-snow .ql-picker.ql-size .ql-picker-label::before,.ql-snow .ql-picker.ql-size .ql-picker-item::before {  content: "Normal";}.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=small]::before,.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=small]::before {  content: "Small";}.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=large]::before,.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=large]::before {  content: "Large";}.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=huge]::before,.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=huge]::before {  content: "Huge";}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=small]::before {  font-size: 10px;}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=large]::before {  font-size: 18px;}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=huge]::before {  font-size: 32px;}.ql-snow .ql-color-picker.ql-background .ql-picker-item {  background-color: #fff;}.ql-snow .ql-color-picker.ql-color .ql-picker-item {  background-color: #000;}.ql-toolbar.ql-snow {  border: 1px solid #ccc;  box-sizing: border-box;  font-family: "Helvetica Neue", "Helvetica", "Arial", sans-serif;  padding: 8px;}.ql-toolbar.ql-snow .ql-formats {  margin-right: 15px;}.ql-toolbar.ql-snow .ql-picker-label {  border: 1px solid transparent;}.ql-toolbar.ql-snow .ql-picker-options {  border: 1px solid transparent;  box-shadow: rgba(0,0,0,0.2) 0 2px 8px;}.ql-toolbar.ql-snow .ql-picker.ql-expanded .ql-picker-label {  border-color: #ccc;}.ql-toolbar.ql-snow .ql-picker.ql-expanded .ql-picker-options {  border-color: #ccc;}.ql-toolbar.ql-snow .ql-color-picker .ql-picker-item.ql-selected,.ql-toolbar.ql-snow .ql-color-picker .ql-picker-item:hover {  border-color: #000;}.ql-toolbar.ql-snow + .ql-container.ql-snow {  border-top: 0px;}.ql-snow .ql-tooltip {  background-color: #fff;  border: 1px solid #ccc;  box-shadow: 0px 0px 5px #ddd;  color: #444;  padding: 5px 12px;  white-space: nowrap;}.ql-snow .ql-tooltip::before {  content: "Visit URL:";  line-height: 26px;  margin-right: 8px;}.ql-snow .ql-tooltip input[type=text] {  display: none;  border: 1px solid #ccc;  font-size: 13px;  height: 26px;  margin: 0px;  padding: 3px 5px;  width: 170px;}.ql-snow .ql-tooltip a.ql-preview {  display: inline-block;  max-width: 200px;  overflow-x: hidden;  text-overflow: ellipsis;  vertical-align: top;}.ql-snow .ql-tooltip a.ql-action::after {  border-right: 1px solid #ccc;  content: "Edit";  margin-left: 16px;  padding-right: 8px;}.ql-snow .ql-tooltip a.ql-remove::before {  content: "Remove";  margin-left: 8px;}.ql-snow .ql-tooltip a {  line-height: 26px;}.ql-snow .ql-tooltip.ql-editing a.ql-preview,.ql-snow .ql-tooltip.ql-editing a.ql-remove {  display: none;}.ql-snow .ql-tooltip.ql-editing input[type=text] {  display: inline-block;}.ql-snow .ql-tooltip.ql-editing a.ql-action::after {  border-right: 0px;  content: "Save";  padding-right: 0px;}.ql-snow .ql-tooltip[data-mode=link]::before {  content: "Enter link:";}.ql-snow .ql-tooltip[data-mode=formula]::before {  content: "Enter formula:";}.ql-snow .ql-tooltip[data-mode=video]::before {  content: "Enter video:";}.ql-snow a {  color: #06c;}.ql-container.ql-snow {  border: 1px solid #ccc;}';


        public static defaultStyle?: RichTextEditorStyle;

        public static style = `
            .next-admin-rich-text-editor .next-admin-editor-container {
                width:100%;
                height:100%;
                display:flex;
                flex-direction:column;
                background:#fff
            }
            .next-admin-table .next-admin-editor-container {
                background:rgba(255,255,255,0)
                }
            .next-admin-table{
                .next-admin-rich-text-editor-modern{
                    .ql-editor{
                        background:#fff;
                        border-radius:4px;
                        box-shadow: 0px 0px 2px rgba(0,0,0,0.25);
                        padding:4px;
                    }
                    .ql-container{
                        border:0px;
                    }
                }
            }
            .next-admin-rich-text-editor-no-background{
                .ql-editor{
                    background:rgba(255,255,255,0);
                    border:0px;
                    box-shadow: unset;
                    padding:0px;
                }
                .ql-container{
                    border:0px;
                    background:rgba(255,255,255,0);
                }
                .ql-editor:hover{
                    box-shadow: 0px 0px 2px rgba(0,0,0,0.40);
                }
            }
            .next-admin-rich-text-editor-inline-grid{
                .ql-editor{
                    padding-top:13px;
                    min-height:46px;
                }
            }


        `;

        public quill: Quill;

        public editorContainer: HTMLDivElement;

        public quillContainer: HTMLDivElement;

        public options: RichTextEditorOptions;

        public static onCreated = new EventHandler<RichTextEditor, RichTextEditorOptions>();


        constructor(options?: RichTextEditorOptions) {
            super({
                displayToolbar: true,
                style: RichTextEditor.defaultStyle,
                ...options
            } as RichTextEditorOptions);
            NextAdmin.Style.append("NextAdmin.UI.RichTextEditor.quillStyle", RichTextEditor.quillCSS);
            NextAdmin.Script.append("NextAdmin.UI.RichTextEditor.quillScript", atob(RichTextEditor.quillB64JS));
            Style.append('RichTextEditor', RichTextEditor.style);

            if (this.options.inlineGrid) {
                this.options.style = NextAdmin.UI.RichTextEditorStyle.noBackground;
                this.options.displayToolbar = false;
                this.element.classList.add('next-admin-rich-text-editor-inline-grid');
            }

            this.element.classList.add('next-admin-rich-text-editor');
            this.controlContainer.style.verticalAlign = 'top';
            this.controlContainer.style.height = '100%';
            this.editorContainer = this.controlContainer.appendHTML('div', editorContainer => {
                editorContainer.classList.add('next-admin-editor-container');
            });

            this.quillContainer = this.editorContainer.appendHTML('div');

            this.quill = new Quill(this.quillContainer, {
                modules: {
                    toolbar: this.options.displayToolbar ? [
                        ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
                        ['link', 'image'], //links and images
                        ['blockquote', 'code-block'],

                        [{ 'header': 1 }, { 'header': 2 }],               // custom button values
                        [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                        [{ 'script': 'sub' }, { 'script': 'super' }],      // superscript/subscript
                        [{ 'indent': '-1' }, { 'indent': '+1' }],          // outdent/indent
                        [{ 'direction': 'rtl' }],                         // text direction

                        [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown

                        [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
                        [{ 'font': [] }],
                        [{ 'align': [] }],

                        ['clean']                                         // remove formatting button
                    ] : null
                },
                placeholder: this.options.placeHolder,
                theme: 'snow'
            });
            this.quill.on('text-change', () => {
                if (this.suspendChange) {
                    return;
                }
                this.onValueChanged.dispatch(this, { value: null });
            });

            this.setStyle(this.options.style);
            RichTextEditor.onCreated.dispatch(this, this.options);
        }

        public setStyle(style?: RichTextEditorStyle) {
            switch (style) {
                default:
                case RichTextEditorStyle.default:
                    this.element.classList.add('next-admin-rich-text-editor-default');
                    break;
                case RichTextEditorStyle.modern:
                    this.element.classList.add('next-admin-rich-text-editor-modern');
                    break;
                case RichTextEditorStyle.noBackground:
                    this.element.classList.add('next-admin-rich-text-editor-no-background');
                    break;
            }
        }

        getLabel(): string {
            return this.label.innerText;
        }

        getToolbar(): HTMLDivElement {
            return this.element.querySelector('.ql-toolbar');
        }

        addToolbarButton(buttonOption: ButtonOptions, configAction?: (btn: Button) => void): Button {
            let button: Button;
            this.getToolbar().appendHTML('span', (btnContainer) => {
                btnContainer.classList.add('ql-formats');
                button = btnContainer.appendControl(new Button({ style: ButtonStyle.noBg, ...buttonOption }));
                if (configAction != null) {
                    configAction(button);
                }
            });
            return button;
        }


        addToolbarDropDownButton(buttonOption: DropDownButtonOptions, configAction?: (btn: DropDownButton) => void): DropDownButton {
            let button: DropDownButton;
            this.getToolbar().appendHTML('span', (btnContainer) => {
                btnContainer.classList.add('ql-formats');
                button = btnContainer.appendControl(new DropDownButton({ style: ButtonStyle.noBg, ...buttonOption }));
                if (configAction != null) {
                    configAction(button);
                }
            });
            return button;
        }


        private _value: string;
        private suspendChange = false;
        setValue(value: any, fireChange?: boolean) {
            this._value = value;
            setTimeout(() => {
                this._value = null;
                if (!fireChange) {
                    this.suspendChange = true;
                }

                this.quillContainer.style.display = 'none';//bug fix to avoid scroll to editr
                this.quill.pasteHTML((value as string ?? '').replace(new RegExp('<p><br></p>', 'g'), '<br/>').replace(new RegExp('<p>', 'g'), '<p><br/>').replaceAll('<p><br/>', '<p>'));
                this.quillContainer.style.display = '';
                this.suspendChange = false;
            },0);
        }

        getValue(): string {
            return this._value ?? this.quill.root.innerHTML.replace(new RegExp('<p><br/>', 'g'), '<p>');
        }
    }


    export interface RichTextEditorOptions extends LabelFormControlOptions {

        label?: string;

        placeHolder?: string;

        displayToolbar?: boolean;

        style?: RichTextEditorStyle;

        inlineGrid?: boolean;

    }

    export enum RichTextEditorStyle {
        default,
        modern,
        noBackground,
    }
}


// Type definitions for Quill 2.0
// Project: https://github.com/quilljs/quill/, http://quilljs.com
// Definitions by: Sumit <https://github.com/sumitkm>
//                 Guillaume <https://github.com/guillaume-ro-fr>
//                 James Garbutt <https://github.com/43081j>
//                 Aniello Falcone <https://github.com/AnielloFalcone>
//                 Mohammad Hossein Amri <https://github.com/mhamri>
//                 Marco Mantovani <https://github.com/TheLand>
//                 Ameer Hamoodi <https://github.com/AmeerHamoodi>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.9



/**
 * A stricter type definition would be:
 *
 *   type anyOperation ({ insert: any } | { delete: number } | { retain: number }) & OptionalAttributes;
 *
 *  But this would break a lot of existing code as it would require manual discrimination of the union types.
 */
declare type anyOperation = { insert?: any; delete?: number | undefined; retain?: number | undefined } & OptionalAttributes;
interface SourceMap {
    API: "api";
    SILENT: "silent";
    USER: "user";
}
declare type Sources = "api" | "user" | "silent";

declare interface Key {
    key: string | number;
    shortKey?: boolean | null | undefined;
    shiftKey?: boolean | null | undefined;
    altKey?: boolean | null | undefined;
    metaKey?: boolean | null | undefined;
    ctrlKey?: boolean | null | undefined;
}

declare interface StringMap {
    [key: string]: any;
}

declare interface OptionalAttributes {
    attributes?: StringMap | undefined;
}

declare type TextChangeHandler = (any: any, oldContents: any, source: Sources) => any;
declare type SelectionChangeHandler = (range: RangeStatic, oldRange: RangeStatic, source: Sources) => any;
declare type EditorChangeHandler =
    | ((name: "text-change", any: any, oldContents: any, source: Sources) => any)
    | ((name: "selection-change", range: RangeStatic, oldRange: RangeStatic, source: Sources) => any);

declare interface KeyboardStatic {
    addBinding(key: Key, callback: (range: RangeStatic, context: any) => void): void;
    addBinding(key: Key, context: any, callback: (range: RangeStatic, context: any) => void): void;
}

declare type ClipboardMatcherCallback = (node: any, any: any) => any;
declare type ClipboardMatcherNode = string | number;

declare interface ClipboardStatic {
    matchers: Array<[ClipboardMatcherNode, ClipboardMatcherCallback]>;
    convert(content?: { html?: string | undefined; text?: string | undefined }, formats?: StringMap): any;
    addMatcher(selectorOrNodeType: ClipboardMatcherNode, callback: ClipboardMatcherCallback): void;
    dangerouslyPasteHTML(html: string, source?: Sources): void;
    dangerouslyPasteHTML(index: number, html: string, source?: Sources): void;
}

declare interface QuillOptionsStatic {
    debug?: string | boolean | undefined;
    modules?: StringMap | undefined;
    placeholder?: string | undefined;
    readOnly?: boolean | undefined;
    theme?: string | undefined;
    formats?: string[] | undefined;
    bounds?: HTMLElement | string | undefined;
    scrollingContainer?: HTMLElement | string | undefined;
    strict?: boolean | undefined;
}

declare interface BoundsStatic {
    bottom: number;
    left: number;
    right: number;
    top: number;
    height: number;
    width: number;
}

declare interface RangeStatic {
    index: number;
    length: number;
}

declare class RangeStatic implements RangeStatic {
    constructor();
    index: number;
    length: number;
}

declare interface EventEmitter {
    on(eventName: "text-change", handler: TextChangeHandler): EventEmitter;
    on(eventName: "selection-change", handler: SelectionChangeHandler): EventEmitter;
    on(eventName: "editor-change", handler: EditorChangeHandler): EventEmitter;
    once(eventName: "text-change", handler: TextChangeHandler): EventEmitter;
    once(eventName: "selection-change", handler: SelectionChangeHandler): EventEmitter;
    once(eventName: "editor-change", handler: EditorChangeHandler): EventEmitter;
    off(eventName: "text-change", handler: TextChangeHandler): EventEmitter;
    off(eventName: "selection-change", handler: SelectionChangeHandler): EventEmitter;
    off(eventName: "editor-change", handler: EditorChangeHandler): EventEmitter;
}

declare class Quill implements EventEmitter {
    /**
     * Internal API
     */
    root: HTMLDivElement;
    clipboard: ClipboardStatic;
    scroll: any;
    keyboard: KeyboardStatic;
    constructor(container: string | Element, options?: QuillOptionsStatic);
    deleteText(index: number, length: number, source?: Sources): any;
    disable(): void;
    enable(enabled?: boolean): void;
    isEnabled(): boolean;
    getContents(index?: number, length?: number): any;
    getLength(): number;
    getText(index?: number, length?: number): string;
    insertEmbed(index: number, type: string, value: any, source?: Sources): any;
    insertText(index: number, text: string, source?: Sources): any;
    insertText(index: number, text: string, format: string, value: any, source?: Sources): any;
    insertText(index: number, text: string, formats: StringMap, source?: Sources): any;
    /**
     * @deprecated Remove in 2.0. Use clipboard.dangerouslyPasteHTML(index: number, html: string, source: Sources)
     */
    pasteHTML(index: number, html: string, source?: Sources): string;
    /**
     * @deprecated Remove in 2.0. Use clipboard.dangerouslyPasteHTML(html: string, source: Sources): void;
     */
    pasteHTML(html: string, source?: Sources): string;
    setContents(any: any, source?: Sources): any;
    setText(text: string, source?: Sources): any;
    update(source?: Sources): void;
    updateContents(any: any, source?: Sources): any;

    static readonly sources: SourceMap;

    format(name: string, value: any, source?: Sources): any;
    formatLine(index: number, length: number, source?: Sources): any;
    formatLine(index: number, length: number, format: string, value: any, source?: Sources): any;
    formatLine(index: number, length: number, formats: StringMap, source?: Sources): any;
    formatText(index: number, length: number, source?: Sources): any;
    formatText(index: number, length: number, format: string, value: any, source?: Sources): any;
    formatText(index: number, length: number, formats: StringMap, source?: Sources): any;
    formatText(range: RangeStatic, format: string, value: any, source?: Sources): any;
    formatText(range: RangeStatic, formats: StringMap, source?: Sources): any;
    getFormat(range?: RangeStatic): StringMap;
    getFormat(index: number, length?: number): StringMap;
    removeFormat(index: number, length: number, source?: Sources): any;

    blur(): void;
    focus(): void;
    getBounds(index: number, length?: number): BoundsStatic;
    getSelection(focus: true): RangeStatic;
    getSelection(focus?: false): RangeStatic | null;
    hasFocus(): boolean;
    setSelection(index: number, length: number, source?: Sources): void;
    setSelection(range: RangeStatic, source?: Sources): void;

    // static methods: debug, import, register, find
    static debug(level: string | boolean): void;
    static import(path: string): any;
    static register(path: string, def: any, suppressWarning?: boolean): void;
    static register(defs: StringMap, suppressWarning?: boolean): void;
    static find(domNode: Node, bubble?: boolean): Quill | any;

    addContainer(classNameOrDomNode: string | Node, refNode?: Node): any;
    getModule(name: string): any;

    // Blot interface is not declareed on Parchment
    getIndex(blot: any): number;
    getLeaf(index: number): any;
    getLine(index: number): [any, number];
    getLines(index?: number, length?: number): any[];
    getLines(range: RangeStatic): any[];

    // EventEmitter methods
    on(eventName: "text-change", handler: TextChangeHandler): EventEmitter;
    on(eventName: "selection-change", handler: SelectionChangeHandler): EventEmitter;
    on(eventName: "editor-change", handler: EditorChangeHandler): EventEmitter;
    once(eventName: "text-change", handler: TextChangeHandler): EventEmitter;
    once(eventName: "selection-change", handler: SelectionChangeHandler): EventEmitter;
    once(eventName: "editor-change", handler: EditorChangeHandler): EventEmitter;
    off(eventName: "text-change", handler: TextChangeHandler): EventEmitter;
    off(eventName: "selection-change", handler: SelectionChangeHandler): EventEmitter;
    off(eventName: "editor-change", handler: EditorChangeHandler): EventEmitter;
}






